input:

    struct Vec {
      x: f64,
      y: f64,
      z: f64
    }

    struct Isect {
      hit: i32,
      hit_point: * struct Vec,
      normal: * struct Vec,
      color: * struct Vec,
      distance: f64,
      ray_dir: * struct Vec
    }

    struct Ray {
      origin: * struct Vec,
      dir: * struct Vec
    }

    struct Sphere {
      radius: f64,
      position: * struct Vec,
      color: * struct Vec
    }

    struct Plane {
      position: * struct Vec,
      normal  : * struct Vec,
      color   : * struct Vec
    }

    struct Env {
      light     : *struct Vec,
      sphere1: *struct Sphere,
      sphere2: *struct Sphere,
      sphere3: *struct Sphere,
      plane   : *struct Plane
    }

    function clamp(t: f64, min: f64, max: f64): f64 {
      if t < min { return min; }
      if max < t { return max; }
      return t;
    }

    function Vec_new(x: f64, y: f64, z: f64): *struct Vec {
      var vec: * struct Vec;
      vec = malloc(128);
      (*vec).x = x;
      (*vec).y = y;
      (*vec).z = z;
      return vec;
    }

    function Vec_add(a: *struct Vec, b: *struct Vec): *struct Vec {
      return Vec_new((*a).x + (*b).x, (*a).y + (*b).y, (*a).z + (*b).z);
    }

    function Vec_sub(a: *struct Vec, b: *struct Vec): *struct Vec {
      return Vec_new((*a).x - (*b).x, (*a).y - (*b).y, (*a).z - (*b).z);
    }

    function Vec_mul(a: *struct Vec, t: f64): *struct Vec {
      return Vec_new((*a).x * t, (*a).y * t, (*a).z * t);
    }

    function Vec_multi(a: *struct Vec, b: *struct Vec): *struct Vec {
      return Vec_new((*a).x * (*b).x, (*a).y * (*b).y, (*a).z * (*b).z);
    }

    function Vec_dot(a: *struct Vec, b: *struct Vec): f64 {
      return (*a).x * (*b).x + (*a).y * (*b).y + (*a).z * (*b).z;
    }

    function Vec_reflect(self: *struct Vec, normal: *struct Vec): *struct Vec {
      return Vec_add(self, Vec_mul(normal, (0.0-2.0)*Vec_dot(normal, self)));
    }

    function Vec_length(v: *struct Vec): f64 {
      return sqrt((*v).x*(*v).x + (*v).y*(*v).y + (*v).z*(*v).z);
    }

    function Vec_normalize(v: *struct Vec): *struct Vec {
      var len: f64;
      var r_len: f64;
      len = Vec_length(v);
      if 0.00000001 < len {
        r_len = 1.0 / len;
        (*v).x = (*v).x * r_len;
        (*v).y = (*v).y * r_len;
        (*v).z = (*v).z * r_len;
      }
      return v;
    }

    function Ray_new(origin: *struct Vec, dir: *struct Vec): *struct Ray {
      var ray: *struct Ray;
      ray = malloc(128);
      (*ray).origin = origin;
      (*ray).dir = dir;
      return ray;
    }

    function Isect_new(
      hit: i32,
      hit_point: *struct Vec,
      normal: *struct Vec,
      color: *struct Vec,
      distance: f64,
      ray_dir: *struct Vec): *struct Isect {
      var i: *struct Isect;
      i = malloc(128);
      (*i).hit       = hit      ;
      (*i).hit_point = hit_point;
      (*i).normal    = normal   ;
      (*i).color     = color    ;
      (*i).distance  = distance ;
      (*i).ray_dir   = ray_dir ;
      return i;
    }

    function Sphere_new(radius: f64, position: *struct Vec, color: *struct Vec): *struct Sphere {
      var s: *struct Sphere;
      s = malloc(128);
      (*s).radius   = radius;
      (*s).position = position;
      (*s).color    = color;
      return s;
    }

    function Sphere_intersect(s: *struct Sphere, light: *struct Vec, ray: *struct Ray, isect: *struct Isect): i32 {
      var rs: *struct Vec;
      var b: f64; var c: f64; var d: f64; var t: f64;
      rs = Vec_sub((*ray).origin, (*s).position);
      b = Vec_dot(rs, (*ray).dir);
      c = Vec_dot(rs, rs) - (*s).radius * (*s).radius;
      d = b * b - c;
      t = 0.0 - b - sqrt(d);
      if d <= 0.0 { return 0; }
      if t <= 0.0001 { return 0; }
      if (*isect).distance <= t { return 0; }
      (*isect).hit_point = Vec_add((*ray).origin, Vec_mul((*ray).dir, t));
      (*isect).normal = Vec_normalize(Vec_sub((*isect).hit_point, (*s).position));
      (*isect).color = Vec_mul((*s).color, clamp(Vec_dot(light, (*isect).normal), 0.1, 1.0));
      (*isect).distance = t;
      (*isect).hit = (*isect).hit + 1;
      (*isect).ray_dir = (*ray).dir;
      return 0;
    }

    function Plane_new(position: *struct Vec, normal: *struct Vec, color: *struct Vec): *struct Plane {
      var p: *struct Plane;
      p = malloc(128);
      (*p).position = position;
      (*p).normal = normal;
      (*p).color = color;
      return p;
    }

    function Plane_intersect(p: *struct Plane, light: *struct Vec, ray: *struct Ray, isect: *struct Isect): i32 {
      var d: f64;
      var v: f64;
      var t: f64;
      var d2: f64;
      var m: f64;
      var n: f64;
      var d3: f64;
      var abs_: f64;
      var f: f64;
      d = 0.0 - Vec_dot((*p).position, (*p).normal);
      v = Vec_dot((*ray).dir, (*p).normal);
      t = 0.0 - (Vec_dot((*ray).origin, (*p).normal) + d) / v;
      if t <= 0.0001 { return 0; }
      if (*isect).distance <= t { return 0; }
      (*isect).hit_point = Vec_add((*ray).origin, Vec_mul((*ray).dir, t));
      (*isect).normal = (*p).normal;
      d2 = clamp(Vec_dot(light, (*isect).normal), 0.1, 1.0);
      m = (*(*isect).hit_point).x - 2.0*floor((*(*isect).hit_point).x / 2.0);
      n = (*(*isect).hit_point).z - 2.0*floor((*(*isect).hit_point).z / 2.0);
      d3 = d2;
      if 1.0 < m { if 1.0 < n { d3 = d3 * 0.5; } }
      else { if m < 1.0 { if n < 1.0 { d3 = d3 * 0.5; } } }
      abs_ = fabs((*(*isect).hit_point).z);
      f = 0.0;
      if abs_ < 25.0 { f = 1.0 - abs_*0.04; }
      (*isect).color = Vec_mul((*p).color, d3 * f);
      (*isect).distance = t;
      (*isect).hit = (*isect).hit + 1;
      (*isect).ray_dir = (*ray).dir;
      return 0;
    }

    function Env_intersect(env: *struct Env, ray: *struct Ray, i: *struct Isect): i32 {
      Sphere_intersect((*env).sphere1, (*env).light, ray, i);
      Sphere_intersect((*env).sphere2, (*env).light, ray, i);
      Sphere_intersect((*env).sphere3, (*env).light, ray, i);
      Plane_intersect((*env).plane, (*env).light, ray, i);
      return 0;
    }

    function Env_new(): *struct Env {
      var env: *struct Env;
      env = malloc(128);
      (*env).light = Vec_new(0.577, 0.577, 0.577);
      (*env).sphere1 = Sphere_new(0.5, Vec_new( 0.0, 0.0-0.5, 0.0), Vec_new(1.0, 0.0, 0.0));
      (*env).sphere2 = Sphere_new(1.0, Vec_new( 2.0,  0.0, cos(10.0 * 0.666)), Vec_new(0.0, 1.0, 0.0));
      (*env).sphere3 = Sphere_new(1.5, Vec_new(0.0-2.0,  0.5, cos(10.0 * 0.333)), Vec_new(0.0, 0.0, 1.0));
      (*env).plane = Plane_new(Vec_new(0.0, 0.0-1.0, 0.0), Vec_new(0.0, 1.0, 0.0), Vec_new(1.0, 1.0, 1.0));
      return env;
    }

    function color_of(t: f64): i32 {
      var ret: i32;
      ret = f64_to_i32((i32_to_f64(256) * clamp(t, 0.0, 1.0)));
      if ret == 256 { return 256 - 1; }
      return ret;
    }

    function print_col(c: *struct Vec): i32 {
      print_i32(color_of((*c).x)); printch_i32(32);
      print_i32(color_of((*c).y)); printch_i32(32);
      print_i32(color_of((*c).z)); printch_i32(10);
      return 0;
    }

    function main(): i32 {
      var env: *struct Env;
      var row: i32; var col: i32;
      var x: f64; var y: f64;
      var ray: *struct Ray;
      var i: *struct Isect;
      var dest_col: *struct Vec;
      var temp_col: *struct Vec;
      var j: i32;
      var q: *struct Ray;
      var q1: *struct Ray;
      var q2: *struct Ray;

      env = Env_new();

      row = 0; while row < 300 {
        col = 0; while col < 300 {
          x = i32_to_f64(col) / (300.0 / 2.0) - 1.0;
          y = i32_to_f64(300 - row) / (300.0 / 2.0) - 1.0;

          ray = Ray_new( Vec_new(0.0, 2.0, 6.0), Vec_normalize(Vec_new(x, y, 0.0 - 1.0)) );
          i = Isect_new(0, Vec_new(0.0, 0.0, 0.0), Vec_new(0.0, 0.0, 0.0), Vec_new(0.0, 0.0, 0.0),
                        10000000.0, Vec_new(0.0, 0.0, 0.0));
              Env_intersect(env, ray, i);

          if 0 < (*i).hit {
            dest_col = (*i).color;
            temp_col = Vec_multi(Vec_new(1.0, 1.0, 1.0), (*i).color);
            j = 1; while j < 4 {
              q = Ray_new(Vec_add((*i).hit_point, Vec_mul((*i).normal, 0.0001)),
                                      Vec_reflect((*i).ray_dir, (*i).normal));
              Env_intersect(env, q, i);
              if j < (*i).hit {
                dest_col = Vec_add(dest_col, Vec_multi(temp_col, (*i).color));
                temp_col = Vec_multi(temp_col, (*i).color);
              }

              j = j + 1;
            }
            print_col(dest_col);
          } else {
            print_col(Vec_new((*(*ray).dir).y, (*(*ray).dir).y, (*(*ray).dir).y));
          }
          col = col + 1;
        }
        row = row + 1;
      }

      return 0;
    }
                    
Parsed: Module { functions: [Function { name: "clamp", params: [("t", F64), ("min", F64), ("max", F64)], ret_ty: F64, body: [IfElse(Lt(Load(Identifier("t")), Load(Identifier("min"))), [Return(Load(Identifier("min")))], None), IfElse(Lt(Load(Identifier("max")), Load(Identifier("t"))), [Return(Load(Identifier("max")))], None), Return(Load(Identifier("t")))] }, Function { name: "Vec_new", params: [("x", F64), ("y", F64), ("z", F64)], ret_ty: Pointer(Struct("Vec")), body: [VarDecl("vec", Pointer(Struct("Vec"))), Assign(Identifier("vec"), Call("malloc", [Number(128)])), Assign(Dot(Load(Identifier("vec")), Identifier("x")), Load(Identifier("x"))), Assign(Dot(Load(Identifier("vec")), Identifier("y")), Load(Identifier("y"))), Assign(Dot(Load(Identifier("vec")), Identifier("z")), Load(Identifier("z"))), Return(Load(Identifier("vec")))] }, Function { name: "Vec_add", params: [("a", Pointer(Struct("Vec"))), ("b", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Vec")), body: [Return(Call("Vec_new", [Add(Load(Dot(Load(Identifier("a")), Identifier("x"))), Load(Dot(Load(Identifier("b")), Identifier("x")))), Add(Load(Dot(Load(Identifier("a")), Identifier("y"))), Load(Dot(Load(Identifier("b")), Identifier("y")))), Add(Load(Dot(Load(Identifier("a")), Identifier("z"))), Load(Dot(Load(Identifier("b")), Identifier("z"))))]))] }, Function { name: "Vec_sub", params: [("a", Pointer(Struct("Vec"))), ("b", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Vec")), body: [Return(Call("Vec_new", [Sub(Load(Dot(Load(Identifier("a")), Identifier("x"))), Load(Dot(Load(Identifier("b")), Identifier("x")))), Sub(Load(Dot(Load(Identifier("a")), Identifier("y"))), Load(Dot(Load(Identifier("b")), Identifier("y")))), Sub(Load(Dot(Load(Identifier("a")), Identifier("z"))), Load(Dot(Load(Identifier("b")), Identifier("z"))))]))] }, Function { name: "Vec_mul", params: [("a", Pointer(Struct("Vec"))), ("t", F64)], ret_ty: Pointer(Struct("Vec")), body: [Return(Call("Vec_new", [Mul(Load(Dot(Load(Identifier("a")), Identifier("x"))), Load(Identifier("t"))), Mul(Load(Dot(Load(Identifier("a")), Identifier("y"))), Load(Identifier("t"))), Mul(Load(Dot(Load(Identifier("a")), Identifier("z"))), Load(Identifier("t")))]))] }, Function { name: "Vec_multi", params: [("a", Pointer(Struct("Vec"))), ("b", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Vec")), body: [Return(Call("Vec_new", [Mul(Load(Dot(Load(Identifier("a")), Identifier("x"))), Load(Dot(Load(Identifier("b")), Identifier("x")))), Mul(Load(Dot(Load(Identifier("a")), Identifier("y"))), Load(Dot(Load(Identifier("b")), Identifier("y")))), Mul(Load(Dot(Load(Identifier("a")), Identifier("z"))), Load(Dot(Load(Identifier("b")), Identifier("z"))))]))] }, Function { name: "Vec_dot", params: [("a", Pointer(Struct("Vec"))), ("b", Pointer(Struct("Vec")))], ret_ty: F64, body: [Return(Add(Add(Mul(Load(Dot(Load(Identifier("a")), Identifier("x"))), Load(Dot(Load(Identifier("b")), Identifier("x")))), Mul(Load(Dot(Load(Identifier("a")), Identifier("y"))), Load(Dot(Load(Identifier("b")), Identifier("y"))))), Mul(Load(Dot(Load(Identifier("a")), Identifier("z"))), Load(Dot(Load(Identifier("b")), Identifier("z"))))))] }, Function { name: "Vec_reflect", params: [("self", Pointer(Struct("Vec"))), ("normal", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Vec")), body: [Return(Call("Vec_add", [Load(Identifier("self")), Call("Vec_mul", [Load(Identifier("normal")), Mul(Sub(FPNumber(0.0), FPNumber(2.0)), Call("Vec_dot", [Load(Identifier("normal")), Load(Identifier("self"))]))])]))] }, Function { name: "Vec_length", params: [("v", Pointer(Struct("Vec")))], ret_ty: F64, body: [Return(Call("sqrt", [Add(Add(Mul(Load(Dot(Load(Identifier("v")), Identifier("x"))), Load(Dot(Load(Identifier("v")), Identifier("x")))), Mul(Load(Dot(Load(Identifier("v")), Identifier("y"))), Load(Dot(Load(Identifier("v")), Identifier("y"))))), Mul(Load(Dot(Load(Identifier("v")), Identifier("z"))), Load(Dot(Load(Identifier("v")), Identifier("z")))))]))] }, Function { name: "Vec_normalize", params: [("v", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Vec")), body: [VarDecl("len", F64), VarDecl("r_len", F64), Assign(Identifier("len"), Call("Vec_length", [Load(Identifier("v"))])), IfElse(Lt(FPNumber(0.00000001), Load(Identifier("len"))), [Assign(Identifier("r_len"), Div(FPNumber(1.0), Load(Identifier("len")))), Assign(Dot(Load(Identifier("v")), Identifier("x")), Mul(Load(Dot(Load(Identifier("v")), Identifier("x"))), Load(Identifier("r_len")))), Assign(Dot(Load(Identifier("v")), Identifier("y")), Mul(Load(Dot(Load(Identifier("v")), Identifier("y"))), Load(Identifier("r_len")))), Assign(Dot(Load(Identifier("v")), Identifier("z")), Mul(Load(Dot(Load(Identifier("v")), Identifier("z"))), Load(Identifier("r_len"))))], None), Return(Load(Identifier("v")))] }, Function { name: "Ray_new", params: [("origin", Pointer(Struct("Vec"))), ("dir", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Ray")), body: [VarDecl("ray", Pointer(Struct("Ray"))), Assign(Identifier("ray"), Call("malloc", [Number(128)])), Assign(Dot(Load(Identifier("ray")), Identifier("origin")), Load(Identifier("origin"))), Assign(Dot(Load(Identifier("ray")), Identifier("dir")), Load(Identifier("dir"))), Return(Load(Identifier("ray")))] }, Function { name: "Isect_new", params: [("hit", Int32), ("hit_point", Pointer(Struct("Vec"))), ("normal", Pointer(Struct("Vec"))), ("color", Pointer(Struct("Vec"))), ("distance", F64), ("ray_dir", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Isect")), body: [VarDecl("i", Pointer(Struct("Isect"))), Assign(Identifier("i"), Call("malloc", [Number(128)])), Assign(Dot(Load(Identifier("i")), Identifier("hit")), Load(Identifier("hit"))), Assign(Dot(Load(Identifier("i")), Identifier("hit_point")), Load(Identifier("hit_point"))), Assign(Dot(Load(Identifier("i")), Identifier("normal")), Load(Identifier("normal"))), Assign(Dot(Load(Identifier("i")), Identifier("color")), Load(Identifier("color"))), Assign(Dot(Load(Identifier("i")), Identifier("distance")), Load(Identifier("distance"))), Assign(Dot(Load(Identifier("i")), Identifier("ray_dir")), Load(Identifier("ray_dir"))), Return(Load(Identifier("i")))] }, Function { name: "Sphere_new", params: [("radius", F64), ("position", Pointer(Struct("Vec"))), ("color", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Sphere")), body: [VarDecl("s", Pointer(Struct("Sphere"))), Assign(Identifier("s"), Call("malloc", [Number(128)])), Assign(Dot(Load(Identifier("s")), Identifier("radius")), Load(Identifier("radius"))), Assign(Dot(Load(Identifier("s")), Identifier("position")), Load(Identifier("position"))), Assign(Dot(Load(Identifier("s")), Identifier("color")), Load(Identifier("color"))), Return(Load(Identifier("s")))] }, Function { name: "Sphere_intersect", params: [("s", Pointer(Struct("Sphere"))), ("light", Pointer(Struct("Vec"))), ("ray", Pointer(Struct("Ray"))), ("isect", Pointer(Struct("Isect")))], ret_ty: Int32, body: [VarDecl("rs", Pointer(Struct("Vec"))), VarDecl("b", F64), VarDecl("c", F64), VarDecl("d", F64), VarDecl("t", F64), Assign(Identifier("rs"), Call("Vec_sub", [Load(Dot(Load(Identifier("ray")), Identifier("origin"))), Load(Dot(Load(Identifier("s")), Identifier("position")))])), Assign(Identifier("b"), Call("Vec_dot", [Load(Identifier("rs")), Load(Dot(Load(Identifier("ray")), Identifier("dir")))])), Assign(Identifier("c"), Sub(Call("Vec_dot", [Load(Identifier("rs")), Load(Identifier("rs"))]), Mul(Load(Dot(Load(Identifier("s")), Identifier("radius"))), Load(Dot(Load(Identifier("s")), Identifier("radius")))))), Assign(Identifier("d"), Sub(Mul(Load(Identifier("b")), Load(Identifier("b"))), Load(Identifier("c")))), Assign(Identifier("t"), Sub(Sub(FPNumber(0.0), Load(Identifier("b"))), Call("sqrt", [Load(Identifier("d"))]))), IfElse(Le(Load(Identifier("d")), FPNumber(0.0)), [Return(Number(0))], None), IfElse(Le(Load(Identifier("t")), FPNumber(0.0001)), [Return(Number(0))], None), IfElse(Le(Load(Dot(Load(Identifier("isect")), Identifier("distance"))), Load(Identifier("t"))), [Return(Number(0))], None), Assign(Dot(Load(Identifier("isect")), Identifier("hit_point")), Call("Vec_add", [Load(Dot(Load(Identifier("ray")), Identifier("origin"))), Call("Vec_mul", [Load(Dot(Load(Identifier("ray")), Identifier("dir"))), Load(Identifier("t"))])])), Assign(Dot(Load(Identifier("isect")), Identifier("normal")), Call("Vec_normalize", [Call("Vec_sub", [Load(Dot(Load(Identifier("isect")), Identifier("hit_point"))), Load(Dot(Load(Identifier("s")), Identifier("position")))])])), Assign(Dot(Load(Identifier("isect")), Identifier("color")), Call("Vec_mul", [Load(Dot(Load(Identifier("s")), Identifier("color"))), Call("clamp", [Call("Vec_dot", [Load(Identifier("light")), Load(Dot(Load(Identifier("isect")), Identifier("normal")))]), FPNumber(0.1), FPNumber(1.0)])])), Assign(Dot(Load(Identifier("isect")), Identifier("distance")), Load(Identifier("t"))), Assign(Dot(Load(Identifier("isect")), Identifier("hit")), Add(Load(Dot(Load(Identifier("isect")), Identifier("hit"))), Number(1))), Assign(Dot(Load(Identifier("isect")), Identifier("ray_dir")), Load(Dot(Load(Identifier("ray")), Identifier("dir")))), Return(Number(0))] }, Function { name: "Plane_new", params: [("position", Pointer(Struct("Vec"))), ("normal", Pointer(Struct("Vec"))), ("color", Pointer(Struct("Vec")))], ret_ty: Pointer(Struct("Plane")), body: [VarDecl("p", Pointer(Struct("Plane"))), Assign(Identifier("p"), Call("malloc", [Number(128)])), Assign(Dot(Load(Identifier("p")), Identifier("position")), Load(Identifier("position"))), Assign(Dot(Load(Identifier("p")), Identifier("normal")), Load(Identifier("normal"))), Assign(Dot(Load(Identifier("p")), Identifier("color")), Load(Identifier("color"))), Return(Load(Identifier("p")))] }, Function { name: "Plane_intersect", params: [("p", Pointer(Struct("Plane"))), ("light", Pointer(Struct("Vec"))), ("ray", Pointer(Struct("Ray"))), ("isect", Pointer(Struct("Isect")))], ret_ty: Int32, body: [VarDecl("d", F64), VarDecl("v", F64), VarDecl("t", F64), VarDecl("d2", F64), VarDecl("m", F64), VarDecl("n", F64), VarDecl("d3", F64), VarDecl("abs_", F64), VarDecl("f", F64), Assign(Identifier("d"), Sub(FPNumber(0.0), Call("Vec_dot", [Load(Dot(Load(Identifier("p")), Identifier("position"))), Load(Dot(Load(Identifier("p")), Identifier("normal")))]))), Assign(Identifier("v"), Call("Vec_dot", [Load(Dot(Load(Identifier("ray")), Identifier("dir"))), Load(Dot(Load(Identifier("p")), Identifier("normal")))])), Assign(Identifier("t"), Sub(FPNumber(0.0), Div(Add(Call("Vec_dot", [Load(Dot(Load(Identifier("ray")), Identifier("origin"))), Load(Dot(Load(Identifier("p")), Identifier("normal")))]), Load(Identifier("d"))), Load(Identifier("v"))))), IfElse(Le(Load(Identifier("t")), FPNumber(0.0001)), [Return(Number(0))], None), IfElse(Le(Load(Dot(Load(Identifier("isect")), Identifier("distance"))), Load(Identifier("t"))), [Return(Number(0))], None), Assign(Dot(Load(Identifier("isect")), Identifier("hit_point")), Call("Vec_add", [Load(Dot(Load(Identifier("ray")), Identifier("origin"))), Call("Vec_mul", [Load(Dot(Load(Identifier("ray")), Identifier("dir"))), Load(Identifier("t"))])])), Assign(Dot(Load(Identifier("isect")), Identifier("normal")), Load(Dot(Load(Identifier("p")), Identifier("normal")))), Assign(Identifier("d2"), Call("clamp", [Call("Vec_dot", [Load(Identifier("light")), Load(Dot(Load(Identifier("isect")), Identifier("normal")))]), FPNumber(0.1), FPNumber(1.0)])), Assign(Identifier("m"), Sub(Load(Dot(Load(Dot(Load(Identifier("isect")), Identifier("hit_point"))), Identifier("x"))), Mul(FPNumber(2.0), Call("floor", [Div(Load(Dot(Load(Dot(Load(Identifier("isect")), Identifier("hit_point"))), Identifier("x"))), FPNumber(2.0))])))), Assign(Identifier("n"), Sub(Load(Dot(Load(Dot(Load(Identifier("isect")), Identifier("hit_point"))), Identifier("z"))), Mul(FPNumber(2.0), Call("floor", [Div(Load(Dot(Load(Dot(Load(Identifier("isect")), Identifier("hit_point"))), Identifier("z"))), FPNumber(2.0))])))), Assign(Identifier("d3"), Load(Identifier("d2"))), IfElse(Lt(FPNumber(1.0), Load(Identifier("m"))), [IfElse(Lt(FPNumber(1.0), Load(Identifier("n"))), [Assign(Identifier("d3"), Mul(Load(Identifier("d3")), FPNumber(0.5)))], None)], Some([IfElse(Lt(Load(Identifier("m")), FPNumber(1.0)), [IfElse(Lt(Load(Identifier("n")), FPNumber(1.0)), [Assign(Identifier("d3"), Mul(Load(Identifier("d3")), FPNumber(0.5)))], None)], None)])), Assign(Identifier("abs_"), Call("fabs", [Load(Dot(Load(Dot(Load(Identifier("isect")), Identifier("hit_point"))), Identifier("z")))])), Assign(Identifier("f"), FPNumber(0.0)), IfElse(Lt(Load(Identifier("abs_")), FPNumber(25.0)), [Assign(Identifier("f"), Sub(FPNumber(1.0), Mul(Load(Identifier("abs_")), FPNumber(0.04))))], None), Assign(Dot(Load(Identifier("isect")), Identifier("color")), Call("Vec_mul", [Load(Dot(Load(Identifier("p")), Identifier("color"))), Mul(Load(Identifier("d3")), Load(Identifier("f")))])), Assign(Dot(Load(Identifier("isect")), Identifier("distance")), Load(Identifier("t"))), Assign(Dot(Load(Identifier("isect")), Identifier("hit")), Add(Load(Dot(Load(Identifier("isect")), Identifier("hit"))), Number(1))), Assign(Dot(Load(Identifier("isect")), Identifier("ray_dir")), Load(Dot(Load(Identifier("ray")), Identifier("dir")))), Return(Number(0))] }, Function { name: "Env_intersect", params: [("env", Pointer(Struct("Env"))), ("ray", Pointer(Struct("Ray"))), ("i", Pointer(Struct("Isect")))], ret_ty: Int32, body: [Call("Sphere_intersect", [Load(Dot(Load(Identifier("env")), Identifier("sphere1"))), Load(Dot(Load(Identifier("env")), Identifier("light"))), Load(Identifier("ray")), Load(Identifier("i"))]), Call("Sphere_intersect", [Load(Dot(Load(Identifier("env")), Identifier("sphere2"))), Load(Dot(Load(Identifier("env")), Identifier("light"))), Load(Identifier("ray")), Load(Identifier("i"))]), Call("Sphere_intersect", [Load(Dot(Load(Identifier("env")), Identifier("sphere3"))), Load(Dot(Load(Identifier("env")), Identifier("light"))), Load(Identifier("ray")), Load(Identifier("i"))]), Call("Plane_intersect", [Load(Dot(Load(Identifier("env")), Identifier("plane"))), Load(Dot(Load(Identifier("env")), Identifier("light"))), Load(Identifier("ray")), Load(Identifier("i"))]), Return(Number(0))] }, Function { name: "Env_new", params: [], ret_ty: Pointer(Struct("Env")), body: [VarDecl("env", Pointer(Struct("Env"))), Assign(Identifier("env"), Call("malloc", [Number(128)])), Assign(Dot(Load(Identifier("env")), Identifier("light")), Call("Vec_new", [FPNumber(0.577), FPNumber(0.577), FPNumber(0.577)])), Assign(Dot(Load(Identifier("env")), Identifier("sphere1")), Call("Sphere_new", [FPNumber(0.5), Call("Vec_new", [FPNumber(0.0), Sub(FPNumber(0.0), FPNumber(0.5)), FPNumber(0.0)]), Call("Vec_new", [FPNumber(1.0), FPNumber(0.0), FPNumber(0.0)])])), Assign(Dot(Load(Identifier("env")), Identifier("sphere2")), Call("Sphere_new", [FPNumber(1.0), Call("Vec_new", [FPNumber(2.0), FPNumber(0.0), Call("cos", [Mul(FPNumber(10.0), FPNumber(0.666))])]), Call("Vec_new", [FPNumber(0.0), FPNumber(1.0), FPNumber(0.0)])])), Assign(Dot(Load(Identifier("env")), Identifier("sphere3")), Call("Sphere_new", [FPNumber(1.5), Call("Vec_new", [Sub(FPNumber(0.0), FPNumber(2.0)), FPNumber(0.5), Call("cos", [Mul(FPNumber(10.0), FPNumber(0.333))])]), Call("Vec_new", [FPNumber(0.0), FPNumber(0.0), FPNumber(1.0)])])), Assign(Dot(Load(Identifier("env")), Identifier("plane")), Call("Plane_new", [Call("Vec_new", [FPNumber(0.0), Sub(FPNumber(0.0), FPNumber(1.0)), FPNumber(0.0)]), Call("Vec_new", [FPNumber(0.0), FPNumber(1.0), FPNumber(0.0)]), Call("Vec_new", [FPNumber(1.0), FPNumber(1.0), FPNumber(1.0)])])), Return(Load(Identifier("env")))] }, Function { name: "color_of", params: [("t", F64)], ret_ty: Int32, body: [VarDecl("ret", Int32), Assign(Identifier("ret"), Call("f64_to_i32", [Mul(Call("i32_to_f64", [Number(256)]), Call("clamp", [Load(Identifier("t")), FPNumber(0.0), FPNumber(1.0)]))])), IfElse(Eq(Load(Identifier("ret")), Number(256)), [Return(Sub(Number(256), Number(1)))], None), Return(Load(Identifier("ret")))] }, Function { name: "print_col", params: [("c", Pointer(Struct("Vec")))], ret_ty: Int32, body: [Call("print_i32", [Call("color_of", [Load(Dot(Load(Identifier("c")), Identifier("x")))])]), Call("printch_i32", [Number(32)]), Call("print_i32", [Call("color_of", [Load(Dot(Load(Identifier("c")), Identifier("y")))])]), Call("printch_i32", [Number(32)]), Call("print_i32", [Call("color_of", [Load(Dot(Load(Identifier("c")), Identifier("z")))])]), Call("printch_i32", [Number(10)]), Return(Number(0))] }, Function { name: "main", params: [], ret_ty: Int32, body: [VarDecl("env", Pointer(Struct("Env"))), VarDecl("row", Int32), VarDecl("col", Int32), VarDecl("x", F64), VarDecl("y", F64), VarDecl("ray", Pointer(Struct("Ray"))), VarDecl("i", Pointer(Struct("Isect"))), VarDecl("dest_col", Pointer(Struct("Vec"))), VarDecl("temp_col", Pointer(Struct("Vec"))), VarDecl("j", Int32), VarDecl("q", Pointer(Struct("Ray"))), VarDecl("q1", Pointer(Struct("Ray"))), VarDecl("q2", Pointer(Struct("Ray"))), Assign(Identifier("env"), Call("Env_new", [])), Assign(Identifier("row"), Number(0)), WhileLoop(Lt(Load(Identifier("row")), Number(300)), [Assign(Identifier("col"), Number(0)), WhileLoop(Lt(Load(Identifier("col")), Number(300)), [Assign(Identifier("x"), Sub(Div(Call("i32_to_f64", [Load(Identifier("col"))]), Div(FPNumber(300.0), FPNumber(2.0))), FPNumber(1.0))), Assign(Identifier("y"), Sub(Div(Call("i32_to_f64", [Sub(Number(300), Load(Identifier("row")))]), Div(FPNumber(300.0), FPNumber(2.0))), FPNumber(1.0))), Assign(Identifier("ray"), Call("Ray_new", [Call("Vec_new", [FPNumber(0.0), FPNumber(2.0), FPNumber(6.0)]), Call("Vec_normalize", [Call("Vec_new", [Load(Identifier("x")), Load(Identifier("y")), Sub(FPNumber(0.0), FPNumber(1.0))])])])), Assign(Identifier("i"), Call("Isect_new", [Number(0), Call("Vec_new", [FPNumber(0.0), FPNumber(0.0), FPNumber(0.0)]), Call("Vec_new", [FPNumber(0.0), FPNumber(0.0), FPNumber(0.0)]), Call("Vec_new", [FPNumber(0.0), FPNumber(0.0), FPNumber(0.0)]), FPNumber(10000000.0), Call("Vec_new", [FPNumber(0.0), FPNumber(0.0), FPNumber(0.0)])])), Call("Env_intersect", [Load(Identifier("env")), Load(Identifier("ray")), Load(Identifier("i"))]), IfElse(Lt(Number(0), Load(Dot(Load(Identifier("i")), Identifier("hit")))), [Assign(Identifier("dest_col"), Load(Dot(Load(Identifier("i")), Identifier("color")))), Assign(Identifier("temp_col"), Call("Vec_multi", [Call("Vec_new", [FPNumber(1.0), FPNumber(1.0), FPNumber(1.0)]), Load(Dot(Load(Identifier("i")), Identifier("color")))])), Assign(Identifier("j"), Number(1)), WhileLoop(Lt(Load(Identifier("j")), Number(4)), [Assign(Identifier("q"), Call("Ray_new", [Call("Vec_add", [Load(Dot(Load(Identifier("i")), Identifier("hit_point"))), Call("Vec_mul", [Load(Dot(Load(Identifier("i")), Identifier("normal"))), FPNumber(0.0001)])]), Call("Vec_reflect", [Load(Dot(Load(Identifier("i")), Identifier("ray_dir"))), Load(Dot(Load(Identifier("i")), Identifier("normal")))])])), Call("Env_intersect", [Load(Identifier("env")), Load(Identifier("q")), Load(Identifier("i"))]), IfElse(Lt(Load(Identifier("j")), Load(Dot(Load(Identifier("i")), Identifier("hit")))), [Assign(Identifier("dest_col"), Call("Vec_add", [Load(Identifier("dest_col")), Call("Vec_multi", [Load(Identifier("temp_col")), Load(Dot(Load(Identifier("i")), Identifier("color")))])])), Assign(Identifier("temp_col"), Call("Vec_multi", [Load(Identifier("temp_col")), Load(Dot(Load(Identifier("i")), Identifier("color")))]))], None), Assign(Identifier("j"), Add(Load(Identifier("j")), Number(1)))]), Call("print_col", [Load(Identifier("dest_col"))])], Some([Call("print_col", [Call("Vec_new", [Load(Dot(Load(Dot(Load(Identifier("ray")), Identifier("dir"))), Identifier("y"))), Load(Dot(Load(Dot(Load(Identifier("ray")), Identifier("dir"))), Identifier("y"))), Load(Dot(Load(Dot(Load(Identifier("ray")), Identifier("dir"))), Identifier("y")))])])])), Assign(Identifier("col"), Add(Load(Identifier("col")), Number(1)))]), Assign(Identifier("row"), Add(Load(Identifier("row")), Number(1)))]), Return(Number(0))] }], structs: [("Vec", [("x", F64), ("y", F64), ("z", F64)]), ("Isect", [("hit", Int32), ("hit_point", Pointer(Struct("Vec"))), ("normal", Pointer(Struct("Vec"))), ("color", Pointer(Struct("Vec"))), ("distance", F64), ("ray_dir", Pointer(Struct("Vec")))]), ("Ray", [("origin", Pointer(Struct("Vec"))), ("dir", Pointer(Struct("Vec")))]), ("Sphere", [("radius", F64), ("position", Pointer(Struct("Vec"))), ("color", Pointer(Struct("Vec")))]), ("Plane", [("position", Pointer(Struct("Vec"))), ("normal", Pointer(Struct("Vec"))), ("color", Pointer(Struct("Vec")))]), ("Env", [("light", Pointer(Struct("Vec"))), ("sphere1", Pointer(Struct("Sphere"))), ("sphere2", Pointer(Struct("Sphere"))), ("sphere3", Pointer(Struct("Sphere"))), ("plane", Pointer(Struct("Plane")))])] }
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
3 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
3 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
5 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
8 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
3 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Debug at /home/unsigned/work/cilk/src/ir/cse.rs
0 insts removed
Module (name: minilang)
define void cilk.println.i32(i32) internal;
define void cilk.print.i32(i32) internal;
define void cilk.printch.i32(i32) internal;
define void cilk.println.f64(f64) internal;
define void cilk.print.f64(f64) internal;
define f64 cilk.sin.f64(f64) internal;
define f64 cilk.cos.f64(f64) internal;
define f64 cilk.sqrt.f64(f64) internal;
define f64 cilk.floor.f64(f64) internal;
define f64 cilk.fabs.f64(f64) internal;
define f64 cilk.i32_to_f64.i32(i32) internal;
define i32 cilk.f64_to_i32.f64(f64) internal;
define i64* cilk.malloc.i32(i32) internal;
define f64 clamp(f64, f64, f64) {
label.0:	// pred(), succ(1,2), def(), in(), out()
    %0 = fcmp ult, f64 %arg.0, f64 %arg.1 // (self:0, users:[Id { idx: 1 }])
    br i1 %0, %label.1, %label.2 // (self:1, users:[])
label.1:	// pred(0), succ(), def(), in(), out()
    ret f64 %arg.1 // (self:2, users:[])
label.2:	// pred(0), succ(3,4), def(), in(), out()
    %3 = fcmp ult, f64 %arg.2, f64 %arg.0 // (self:3, users:[Id { idx: 4 }])
    br i1 %3, %label.3, %label.4 // (self:4, users:[])
label.3:	// pred(2), succ(), def(), in(), out()
    ret f64 %arg.2 // (self:5, users:[])
label.4:	// pred(2), succ(), def(), in(), out()
    ret f64 %arg.0 // (self:6, users:[])
}
define struct {f64, f64, f64}* Vec_new(f64, f64, f64) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = alloca struct {f64, f64, f64}* // (self:0, users:[Id { idx: 2 }, Id { idx: 3 }, Id { idx: 6 }, Id { idx: 9 }, Id { idx: 12 }])
    %1 = call i64* cilk.malloc.i32, i32 128 // (self:1, users:[Id { idx: 2 }])
    store i64* %1, struct {f64, f64, f64}** %0 // (self:2, users:[])
    %3 = load struct {f64, f64, f64}** %0 // (self:3, users:[Id { idx: 4 }])
    %4 = getelementptr struct {f64, f64, f64}* %3, i32 0, i32 0 // (self:4, users:[Id { idx: 5 }])
    store f64 %arg.0, f64* %4 // (self:5, users:[])
    %6 = load struct {f64, f64, f64}** %0 // (self:6, users:[Id { idx: 7 }])
    %7 = getelementptr struct {f64, f64, f64}* %6, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    store f64 %arg.1, f64* %7 // (self:8, users:[])
    %9 = load struct {f64, f64, f64}** %0 // (self:9, users:[Id { idx: 10 }])
    %10 = getelementptr struct {f64, f64, f64}* %9, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    store f64 %arg.2, f64* %10 // (self:11, users:[])
    %12 = load struct {f64, f64, f64}** %0 // (self:12, users:[Id { idx: 13 }])
    ret struct {f64, f64, f64}* %12 // (self:13, users:[])
}
define struct {f64, f64, f64}* Vec_add(struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 4 }])
    %2 = getelementptr (ty:8)* %arg.1, i32 0, i32 0 // (self:2, users:[Id { idx: 3 }])
    %3 = load f64* %2 // (self:3, users:[Id { idx: 4 }])
    %4 = add f64 %1, f64 %3 // (self:4, users:[Id { idx: 15 }])
    %5 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:5, users:[Id { idx: 6 }])
    %6 = load f64* %5 // (self:6, users:[Id { idx: 9 }])
    %7 = getelementptr (ty:8)* %arg.1, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    %8 = load f64* %7 // (self:8, users:[Id { idx: 9 }])
    %9 = add f64 %6, f64 %8 // (self:9, users:[Id { idx: 15 }])
    %10 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    %11 = load f64* %10 // (self:11, users:[Id { idx: 14 }])
    %12 = getelementptr (ty:8)* %arg.1, i32 0, i32 2 // (self:12, users:[Id { idx: 13 }])
    %13 = load f64* %12 // (self:13, users:[Id { idx: 14 }])
    %14 = add f64 %11, f64 %13 // (self:14, users:[Id { idx: 15 }])
    %15 = call struct {f64, f64, f64}* Vec_new, f64 %4, f64 %9, f64 %14 // (self:15, users:[Id { idx: 16 }])
    ret struct {f64, f64, f64}* %15 // (self:16, users:[])
}
define struct {f64, f64, f64}* Vec_sub(struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 4 }])
    %2 = getelementptr (ty:8)* %arg.1, i32 0, i32 0 // (self:2, users:[Id { idx: 3 }])
    %3 = load f64* %2 // (self:3, users:[Id { idx: 4 }])
    %4 = sub f64 %1, f64 %3 // (self:4, users:[Id { idx: 15 }])
    %5 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:5, users:[Id { idx: 6 }])
    %6 = load f64* %5 // (self:6, users:[Id { idx: 9 }])
    %7 = getelementptr (ty:8)* %arg.1, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    %8 = load f64* %7 // (self:8, users:[Id { idx: 9 }])
    %9 = sub f64 %6, f64 %8 // (self:9, users:[Id { idx: 15 }])
    %10 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    %11 = load f64* %10 // (self:11, users:[Id { idx: 14 }])
    %12 = getelementptr (ty:8)* %arg.1, i32 0, i32 2 // (self:12, users:[Id { idx: 13 }])
    %13 = load f64* %12 // (self:13, users:[Id { idx: 14 }])
    %14 = sub f64 %11, f64 %13 // (self:14, users:[Id { idx: 15 }])
    %15 = call struct {f64, f64, f64}* Vec_new, f64 %4, f64 %9, f64 %14 // (self:15, users:[Id { idx: 16 }])
    ret struct {f64, f64, f64}* %15 // (self:16, users:[])
}
define struct {f64, f64, f64}* Vec_mul(struct {f64, f64, f64}*, f64) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 2 }])
    %2 = mul f64 %1, f64 %arg.1 // (self:2, users:[Id { idx: 9 }])
    %3 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:3, users:[Id { idx: 4 }])
    %4 = load f64* %3 // (self:4, users:[Id { idx: 5 }])
    %5 = mul f64 %4, f64 %arg.1 // (self:5, users:[Id { idx: 9 }])
    %6 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:6, users:[Id { idx: 7 }])
    %7 = load f64* %6 // (self:7, users:[Id { idx: 8 }])
    %8 = mul f64 %7, f64 %arg.1 // (self:8, users:[Id { idx: 9 }])
    %9 = call struct {f64, f64, f64}* Vec_new, f64 %2, f64 %5, f64 %8 // (self:9, users:[Id { idx: 10 }])
    ret struct {f64, f64, f64}* %9 // (self:10, users:[])
}
define struct {f64, f64, f64}* Vec_multi(struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 4 }])
    %2 = getelementptr (ty:8)* %arg.1, i32 0, i32 0 // (self:2, users:[Id { idx: 3 }])
    %3 = load f64* %2 // (self:3, users:[Id { idx: 4 }])
    %4 = mul f64 %1, f64 %3 // (self:4, users:[Id { idx: 15 }])
    %5 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:5, users:[Id { idx: 6 }])
    %6 = load f64* %5 // (self:6, users:[Id { idx: 9 }])
    %7 = getelementptr (ty:8)* %arg.1, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    %8 = load f64* %7 // (self:8, users:[Id { idx: 9 }])
    %9 = mul f64 %6, f64 %8 // (self:9, users:[Id { idx: 15 }])
    %10 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    %11 = load f64* %10 // (self:11, users:[Id { idx: 14 }])
    %12 = getelementptr (ty:8)* %arg.1, i32 0, i32 2 // (self:12, users:[Id { idx: 13 }])
    %13 = load f64* %12 // (self:13, users:[Id { idx: 14 }])
    %14 = mul f64 %11, f64 %13 // (self:14, users:[Id { idx: 15 }])
    %15 = call struct {f64, f64, f64}* Vec_new, f64 %4, f64 %9, f64 %14 // (self:15, users:[Id { idx: 16 }])
    ret struct {f64, f64, f64}* %15 // (self:16, users:[])
}
define f64 Vec_dot(struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 4 }])
    %2 = getelementptr (ty:8)* %arg.1, i32 0, i32 0 // (self:2, users:[Id { idx: 3 }])
    %3 = load f64* %2 // (self:3, users:[Id { idx: 4 }])
    %4 = mul f64 %1, f64 %3 // (self:4, users:[Id { idx: 10 }])
    %5 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:5, users:[Id { idx: 6 }])
    %6 = load f64* %5 // (self:6, users:[Id { idx: 9 }])
    %7 = getelementptr (ty:8)* %arg.1, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    %8 = load f64* %7 // (self:8, users:[Id { idx: 9 }])
    %9 = mul f64 %6, f64 %8 // (self:9, users:[Id { idx: 10 }])
    %10 = add f64 %4, f64 %9 // (self:10, users:[Id { idx: 16 }])
    %11 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:11, users:[Id { idx: 12 }])
    %12 = load f64* %11 // (self:12, users:[Id { idx: 15 }])
    %13 = getelementptr (ty:8)* %arg.1, i32 0, i32 2 // (self:13, users:[Id { idx: 14 }])
    %14 = load f64* %13 // (self:14, users:[Id { idx: 15 }])
    %15 = mul f64 %12, f64 %14 // (self:15, users:[Id { idx: 16 }])
    %16 = add f64 %10, f64 %15 // (self:16, users:[Id { idx: 17 }])
    ret f64 %16 // (self:17, users:[])
}
define struct {f64, f64, f64}* Vec_reflect(struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = call f64 Vec_dot, (ty:8)* %arg.1, (ty:8)* %arg.0 // (self:0, users:[Id { idx: 1 }])
    %1 = mul f64 -2, f64 %0 // (self:1, users:[Id { idx: 2 }])
    %2 = call struct {f64, f64, f64}* Vec_mul, (ty:8)* %arg.1, f64 %1 // (self:2, users:[Id { idx: 3 }])
    %3 = call struct {f64, f64, f64}* Vec_add, (ty:8)* %arg.0, struct {f64, f64, f64}* %2 // (self:3, users:[Id { idx: 4 }])
    ret struct {f64, f64, f64}* %3 // (self:4, users:[])
}
define f64 Vec_length(struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }, Id { idx: 3 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 4 }])
    %3 = load f64* %0 // (self:3, users:[Id { idx: 4 }])
    %4 = mul f64 %1, f64 %3 // (self:4, users:[Id { idx: 10 }])
    %5 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:5, users:[Id { idx: 6 }, Id { idx: 8 }])
    %6 = load f64* %5 // (self:6, users:[Id { idx: 9 }])
    %8 = load f64* %5 // (self:8, users:[Id { idx: 9 }])
    %9 = mul f64 %6, f64 %8 // (self:9, users:[Id { idx: 10 }])
    %10 = add f64 %4, f64 %9 // (self:10, users:[Id { idx: 16 }])
    %11 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:11, users:[Id { idx: 12 }, Id { idx: 14 }])
    %12 = load f64* %11 // (self:12, users:[Id { idx: 15 }])
    %14 = load f64* %11 // (self:14, users:[Id { idx: 15 }])
    %15 = mul f64 %12, f64 %14 // (self:15, users:[Id { idx: 16 }])
    %16 = add f64 %10, f64 %15 // (self:16, users:[Id { idx: 17 }])
    %17 = call f64 cilk.sqrt.f64, f64 %16 // (self:17, users:[Id { idx: 18 }])
    ret f64 %17 // (self:18, users:[])
}
define struct {f64, f64, f64}* Vec_normalize(struct {f64, f64, f64}*) {
label.0:	// pred(), succ(1,2), def(), in(), out()
    %2 = call f64 Vec_length, (ty:8)* %arg.0 // (self:2, users:[Id { idx: 5 }, Id { idx: 8 }])
    %5 = fcmp ult, f64 0.00000001, f64 %2 // (self:5, users:[Id { idx: 6 }])
    br i1 %5, %label.1, %label.2 // (self:6, users:[])
label.1:	// pred(0), succ(2), def(), in(), out()
    %8 = div f64 1, f64 %2 // (self:8, users:[Id { idx: 14 }, Id { idx: 20 }, Id { idx: 26 }])
    %10 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:10, users:[Id { idx: 15 }, Id { idx: 12 }])
    %12 = load f64* %10 // (self:12, users:[Id { idx: 14 }])
    %14 = mul f64 %12, f64 %8 // (self:14, users:[Id { idx: 15 }])
    store f64 %14, f64* %10 // (self:15, users:[])
    %16 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:16, users:[Id { idx: 21 }, Id { idx: 18 }])
    %18 = load f64* %16 // (self:18, users:[Id { idx: 20 }])
    %20 = mul f64 %18, f64 %8 // (self:20, users:[Id { idx: 21 }])
    store f64 %20, f64* %16 // (self:21, users:[])
    %22 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:22, users:[Id { idx: 27 }, Id { idx: 24 }])
    %24 = load f64* %22 // (self:24, users:[Id { idx: 26 }])
    %26 = mul f64 %24, f64 %8 // (self:26, users:[Id { idx: 27 }])
    store f64 %26, f64* %22 // (self:27, users:[])
    br %label.2 // (self:28, users:[])
label.2:	// pred(0,1), succ(), def(), in(), out()
    ret (ty:8)* %arg.0 // (self:29, users:[])
}
define struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Ray_new(struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = alloca struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:0, users:[Id { idx: 2 }, Id { idx: 3 }, Id { idx: 6 }, Id { idx: 9 }])
    %1 = call i64* cilk.malloc.i32, i32 128 // (self:1, users:[Id { idx: 2 }])
    store i64* %1, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:2, users:[])
    %3 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:3, users:[Id { idx: 4 }])
    %4 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %3, i32 0, i32 0 // (self:4, users:[Id { idx: 5 }])
    store (ty:8)* %arg.0, struct {f64, f64, f64}** %4 // (self:5, users:[])
    %6 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:6, users:[Id { idx: 7 }])
    %7 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %6, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    store (ty:8)* %arg.1, struct {f64, f64, f64}** %7 // (self:8, users:[])
    %9 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:9, users:[Id { idx: 10 }])
    ret struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %9 // (self:10, users:[])
}
define struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* Isect_new(i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = alloca struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* // (self:0, users:[Id { idx: 2 }, Id { idx: 3 }, Id { idx: 6 }, Id { idx: 9 }, Id { idx: 12 }, Id { idx: 15 }, Id { idx: 18 }, Id { idx: 21 }])
    %1 = call i64* cilk.malloc.i32, i32 128 // (self:1, users:[Id { idx: 2 }])
    store i64* %1, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:2, users:[])
    %3 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:3, users:[Id { idx: 4 }])
    %4 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %3, i32 0, i32 0 // (self:4, users:[Id { idx: 5 }])
    store i32 %arg.0, i32* %4 // (self:5, users:[])
    %6 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:6, users:[Id { idx: 7 }])
    %7 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %6, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    store (ty:8)* %arg.1, struct {f64, f64, f64}** %7 // (self:8, users:[])
    %9 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:9, users:[Id { idx: 10 }])
    %10 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %9, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    store (ty:8)* %arg.2, struct {f64, f64, f64}** %10 // (self:11, users:[])
    %12 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:12, users:[Id { idx: 13 }])
    %13 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %12, i32 0, i32 3 // (self:13, users:[Id { idx: 14 }])
    store (ty:8)* %arg.3, struct {f64, f64, f64}** %13 // (self:14, users:[])
    %15 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:15, users:[Id { idx: 16 }])
    %16 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %15, i32 0, i32 4 // (self:16, users:[Id { idx: 17 }])
    store f64 %arg.4, f64* %16 // (self:17, users:[])
    %18 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:18, users:[Id { idx: 19 }])
    %19 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %18, i32 0, i32 5 // (self:19, users:[Id { idx: 20 }])
    store (ty:8)* %arg.5, struct {f64, f64, f64}** %19 // (self:20, users:[])
    %21 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %0 // (self:21, users:[Id { idx: 22 }])
    ret struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %21 // (self:22, users:[])
}
define struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Sphere_new(f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = alloca struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:0, users:[Id { idx: 2 }, Id { idx: 3 }, Id { idx: 6 }, Id { idx: 9 }, Id { idx: 12 }])
    %1 = call i64* cilk.malloc.i32, i32 128 // (self:1, users:[Id { idx: 2 }])
    store i64* %1, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:2, users:[])
    %3 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:3, users:[Id { idx: 4 }])
    %4 = getelementptr struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %3, i32 0, i32 0 // (self:4, users:[Id { idx: 5 }])
    store f64 %arg.0, f64* %4 // (self:5, users:[])
    %6 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:6, users:[Id { idx: 7 }])
    %7 = getelementptr struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %6, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    store (ty:8)* %arg.1, struct {f64, f64, f64}** %7 // (self:8, users:[])
    %9 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:9, users:[Id { idx: 10 }])
    %10 = getelementptr struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %9, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    store (ty:8)* %arg.2, struct {f64, f64, f64}** %10 // (self:11, users:[])
    %12 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:12, users:[Id { idx: 13 }])
    ret struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %12 // (self:13, users:[])
}
define i32 Sphere_intersect(struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, f64, f64}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}*) {
label.0:	// pred(), succ(1,2), def(), in(), out()
    %0 = alloca struct {f64, f64, f64}* // (self:0, users:[Id { idx: 10 }, Id { idx: 11 }, Id { idx: 16 }, Id { idx: 17 }])
    %5 = getelementptr (ty:23)* %arg.2, i32 0, i32 0 // (self:5, users:[Id { idx: 6 }])
    %6 = load struct {f64, f64, f64}** %5 // (self:6, users:[Id { idx: 9 }])
    %7 = getelementptr (ty:13)* %arg.0, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    %8 = load struct {f64, f64, f64}** %7 // (self:8, users:[Id { idx: 9 }])
    %9 = call struct {f64, f64, f64}* Vec_sub, struct {f64, f64, f64}* %6, struct {f64, f64, f64}* %8 // (self:9, users:[Id { idx: 10 }])
    store struct {f64, f64, f64}* %9, struct {f64, f64, f64}** %0 // (self:10, users:[])
    %11 = load struct {f64, f64, f64}** %0 // (self:11, users:[Id { idx: 14 }])
    %12 = getelementptr (ty:23)* %arg.2, i32 0, i32 1 // (self:12, users:[Id { idx: 13 }])
    %13 = load struct {f64, f64, f64}** %12 // (self:13, users:[Id { idx: 14 }])
    %14 = call f64 Vec_dot, struct {f64, f64, f64}* %11, struct {f64, f64, f64}* %13 // (self:14, users:[Id { idx: 28 }, Id { idx: 28 }, Id { idx: 33 }])
    %16 = load struct {f64, f64, f64}** %0 // (self:16, users:[Id { idx: 18 }])
    %17 = load struct {f64, f64, f64}** %0 // (self:17, users:[Id { idx: 18 }])
    %18 = call f64 Vec_dot, struct {f64, f64, f64}* %16, struct {f64, f64, f64}* %17 // (self:18, users:[Id { idx: 24 }])
    %19 = getelementptr (ty:13)* %arg.0, i32 0, i32 0 // (self:19, users:[Id { idx: 20 }, Id { idx: 22 }])
    %20 = load f64* %19 // (self:20, users:[Id { idx: 23 }])
    %22 = load f64* %19 // (self:22, users:[Id { idx: 23 }])
    %23 = mul f64 %20, f64 %22 // (self:23, users:[Id { idx: 24 }])
    %24 = sub f64 %18, f64 %23 // (self:24, users:[Id { idx: 30 }])
    %28 = mul f64 %14, f64 %14 // (self:28, users:[Id { idx: 30 }])
    %30 = sub f64 %28, f64 %24 // (self:30, users:[Id { idx: 35 }, Id { idx: 39 }])
    %33 = sub f64 0, f64 %14 // (self:33, users:[Id { idx: 36 }])
    %35 = call f64 cilk.sqrt.f64, f64 %30 // (self:35, users:[Id { idx: 36 }])
    %36 = sub f64 %33, f64 %35 // (self:36, users:[Id { idx: 43 }, Id { idx: 49 }, Id { idx: 58 }, Id { idx: 80 }])
    %39 = fcmp ule, f64 %30, f64 0 // (self:39, users:[Id { idx: 40 }])
    br i1 %39, %label.1, %label.2 // (self:40, users:[])
label.1:	// pred(0), succ(), def(), in(), out()
    ret i32 0 // (self:41, users:[])
label.2:	// pred(0), succ(3,4), def(), in(), out()
    %43 = fcmp ule, f64 %36, f64 0.0001 // (self:43, users:[Id { idx: 44 }])
    br i1 %43, %label.3, %label.4 // (self:44, users:[])
label.3:	// pred(2), succ(), def(), in(), out()
    ret i32 0 // (self:45, users:[])
label.4:	// pred(2), succ(5,6), def(), in(), out()
    %46 = getelementptr (ty:25)* %arg.3, i32 0, i32 4 // (self:46, users:[Id { idx: 47 }])
    %47 = load f64* %46 // (self:47, users:[Id { idx: 49 }])
    %49 = fcmp ule, f64 %47, f64 %36 // (self:49, users:[Id { idx: 50 }])
    br i1 %49, %label.5, %label.6 // (self:50, users:[])
label.5:	// pred(4), succ(), def(), in(), out()
    ret i32 0 // (self:51, users:[])
label.6:	// pred(4), succ(), def(), in(), out()
    %52 = getelementptr (ty:25)* %arg.3, i32 0, i32 1 // (self:52, users:[Id { idx: 60 }, Id { idx: 63 }])
    %53 = getelementptr (ty:23)* %arg.2, i32 0, i32 0 // (self:53, users:[Id { idx: 54 }])
    %54 = load struct {f64, f64, f64}** %53 // (self:54, users:[Id { idx: 59 }])
    %55 = getelementptr (ty:23)* %arg.2, i32 0, i32 1 // (self:55, users:[Id { idx: 56 }, Id { idx: 88 }])
    %56 = load struct {f64, f64, f64}** %55 // (self:56, users:[Id { idx: 58 }])
    %58 = call struct {f64, f64, f64}* Vec_mul, struct {f64, f64, f64}* %56, f64 %36 // (self:58, users:[Id { idx: 59 }])
    %59 = call struct {f64, f64, f64}* Vec_add, struct {f64, f64, f64}* %54, struct {f64, f64, f64}* %58 // (self:59, users:[Id { idx: 60 }])
    store struct {f64, f64, f64}* %59, struct {f64, f64, f64}** %52 // (self:60, users:[])
    %61 = getelementptr (ty:25)* %arg.3, i32 0, i32 2 // (self:61, users:[Id { idx: 68 }, Id { idx: 73 }])
    %63 = load struct {f64, f64, f64}** %52 // (self:63, users:[Id { idx: 66 }])
    %64 = getelementptr (ty:13)* %arg.0, i32 0, i32 1 // (self:64, users:[Id { idx: 65 }])
    %65 = load struct {f64, f64, f64}** %64 // (self:65, users:[Id { idx: 66 }])
    %66 = call struct {f64, f64, f64}* Vec_sub, struct {f64, f64, f64}* %63, struct {f64, f64, f64}* %65 // (self:66, users:[Id { idx: 67 }])
    %67 = call struct {f64, f64, f64}* Vec_normalize, struct {f64, f64, f64}* %66 // (self:67, users:[Id { idx: 68 }])
    store struct {f64, f64, f64}* %67, struct {f64, f64, f64}** %61 // (self:68, users:[])
    %69 = getelementptr (ty:25)* %arg.3, i32 0, i32 3 // (self:69, users:[Id { idx: 77 }])
    %70 = getelementptr (ty:13)* %arg.0, i32 0, i32 2 // (self:70, users:[Id { idx: 71 }])
    %71 = load struct {f64, f64, f64}** %70 // (self:71, users:[Id { idx: 76 }])
    %73 = load struct {f64, f64, f64}** %61 // (self:73, users:[Id { idx: 74 }])
    %74 = call f64 Vec_dot, (ty:8)* %arg.1, struct {f64, f64, f64}* %73 // (self:74, users:[Id { idx: 75 }])
    %75 = call f64 clamp, f64 %74, f64 0.1, f64 1 // (self:75, users:[Id { idx: 76 }])
    %76 = call struct {f64, f64, f64}* Vec_mul, struct {f64, f64, f64}* %71, f64 %75 // (self:76, users:[Id { idx: 77 }])
    store struct {f64, f64, f64}* %76, struct {f64, f64, f64}** %69 // (self:77, users:[])
    %78 = getelementptr (ty:25)* %arg.3, i32 0, i32 4 // (self:78, users:[Id { idx: 80 }])
    store f64 %36, f64* %78 // (self:80, users:[])
    %81 = getelementptr (ty:25)* %arg.3, i32 0, i32 0 // (self:81, users:[Id { idx: 85 }, Id { idx: 83 }])
    %83 = load i32* %81 // (self:83, users:[Id { idx: 84 }])
    %84 = add i32 %83, i32 1 // (self:84, users:[Id { idx: 85 }])
    store i32 %84, i32* %81 // (self:85, users:[])
    %86 = getelementptr (ty:25)* %arg.3, i32 0, i32 5 // (self:86, users:[Id { idx: 89 }])
    %88 = load struct {f64, f64, f64}** %55 // (self:88, users:[Id { idx: 89 }])
    store struct {f64, f64, f64}* %88, struct {f64, f64, f64}** %86 // (self:89, users:[])
    ret i32 0 // (self:90, users:[])
}
define struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Plane_new(struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = alloca struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:0, users:[Id { idx: 2 }, Id { idx: 3 }, Id { idx: 6 }, Id { idx: 9 }, Id { idx: 12 }])
    %1 = call i64* cilk.malloc.i32, i32 128 // (self:1, users:[Id { idx: 2 }])
    store i64* %1, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:2, users:[])
    %3 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:3, users:[Id { idx: 4 }])
    %4 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %3, i32 0, i32 0 // (self:4, users:[Id { idx: 5 }])
    store (ty:8)* %arg.0, struct {f64, f64, f64}** %4 // (self:5, users:[])
    %6 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:6, users:[Id { idx: 7 }])
    %7 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %6, i32 0, i32 1 // (self:7, users:[Id { idx: 8 }])
    store (ty:8)* %arg.1, struct {f64, f64, f64}** %7 // (self:8, users:[])
    %9 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:9, users:[Id { idx: 10 }])
    %10 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %9, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    store (ty:8)* %arg.2, struct {f64, f64, f64}** %10 // (self:11, users:[])
    %12 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:12, users:[Id { idx: 13 }])
    ret struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %12 // (self:13, users:[])
}
define i32 Plane_intersect(struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, f64, f64}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}*) {
label.0:	// pred(), succ(1,2), def(), in(), out()
    %9 = getelementptr (ty:14)* %arg.0, i32 0, i32 0 // (self:9, users:[Id { idx: 10 }])
    %10 = load struct {f64, f64, f64}** %9 // (self:10, users:[Id { idx: 13 }])
    %11 = getelementptr (ty:14)* %arg.0, i32 0, i32 1 // (self:11, users:[Id { idx: 12 }, Id { idx: 19 }, Id { idx: 25 }])
    %12 = load struct {f64, f64, f64}** %11 // (self:12, users:[Id { idx: 13 }])
    %13 = call f64 Vec_dot, struct {f64, f64, f64}* %10, struct {f64, f64, f64}* %12 // (self:13, users:[Id { idx: 14 }])
    %14 = sub f64 0, f64 %13 // (self:14, users:[Id { idx: 28 }])
    %16 = getelementptr (ty:23)* %arg.2, i32 0, i32 1 // (self:16, users:[Id { idx: 17 }])
    %17 = load struct {f64, f64, f64}** %16 // (self:17, users:[Id { idx: 20 }])
    %19 = load struct {f64, f64, f64}** %11 // (self:19, users:[Id { idx: 20 }])
    %20 = call f64 Vec_dot, struct {f64, f64, f64}* %17, struct {f64, f64, f64}* %19 // (self:20, users:[Id { idx: 30 }])
    %22 = getelementptr (ty:23)* %arg.2, i32 0, i32 0 // (self:22, users:[Id { idx: 23 }])
    %23 = load struct {f64, f64, f64}** %22 // (self:23, users:[Id { idx: 26 }])
    %25 = load struct {f64, f64, f64}** %11 // (self:25, users:[Id { idx: 26 }])
    %26 = call f64 Vec_dot, struct {f64, f64, f64}* %23, struct {f64, f64, f64}* %25 // (self:26, users:[Id { idx: 28 }])
    %28 = add f64 %26, f64 %14 // (self:28, users:[Id { idx: 30 }])
    %30 = div f64 %28, f64 %20 // (self:30, users:[Id { idx: 31 }])
    %31 = sub f64 0, f64 %30 // (self:31, users:[Id { idx: 34 }, Id { idx: 40 }, Id { idx: 49 }, Id { idx: 137 }])
    %34 = fcmp ule, f64 %31, f64 0.0001 // (self:34, users:[Id { idx: 35 }])
    br i1 %34, %label.1, %label.2 // (self:35, users:[])
label.1:	// pred(0), succ(), def(), in(), out()
    ret i32 0 // (self:36, users:[])
label.2:	// pred(0), succ(3,4), def(), in(), out()
    %37 = getelementptr (ty:25)* %arg.3, i32 0, i32 4 // (self:37, users:[Id { idx: 38 }])
    %38 = load f64* %37 // (self:38, users:[Id { idx: 40 }])
    %40 = fcmp ule, f64 %38, f64 %31 // (self:40, users:[Id { idx: 41 }])
    br i1 %40, %label.3, %label.4 // (self:41, users:[])
label.3:	// pred(2), succ(), def(), in(), out()
    ret i32 0 // (self:42, users:[])
label.4:	// pred(2), succ(5,6), def(), in(), out()
    %43 = getelementptr (ty:25)* %arg.3, i32 0, i32 1 // (self:43, users:[Id { idx: 51 }, Id { idx: 62 }, Id { idx: 66 }, Id { idx: 75 }, Id { idx: 79 }])
    %44 = getelementptr (ty:23)* %arg.2, i32 0, i32 0 // (self:44, users:[Id { idx: 45 }])
    %45 = load struct {f64, f64, f64}** %44 // (self:45, users:[Id { idx: 50 }])
    %46 = getelementptr (ty:23)* %arg.2, i32 0, i32 1 // (self:46, users:[Id { idx: 47 }])
    %47 = load struct {f64, f64, f64}** %46 // (self:47, users:[Id { idx: 49 }])
    %49 = call struct {f64, f64, f64}* Vec_mul, struct {f64, f64, f64}* %47, f64 %31 // (self:49, users:[Id { idx: 50 }])
    %50 = call struct {f64, f64, f64}* Vec_add, struct {f64, f64, f64}* %45, struct {f64, f64, f64}* %49 // (self:50, users:[Id { idx: 51 }])
    store struct {f64, f64, f64}* %50, struct {f64, f64, f64}** %43 // (self:51, users:[])
    %52 = getelementptr (ty:25)* %arg.3, i32 0, i32 2 // (self:52, users:[Id { idx: 55 }, Id { idx: 57 }])
    %53 = getelementptr (ty:14)* %arg.0, i32 0, i32 1 // (self:53, users:[Id { idx: 54 }])
    %54 = load struct {f64, f64, f64}** %53 // (self:54, users:[Id { idx: 55 }])
    store struct {f64, f64, f64}* %54, struct {f64, f64, f64}** %52 // (self:55, users:[])
    %57 = load struct {f64, f64, f64}** %52 // (self:57, users:[Id { idx: 58 }])
    %58 = call f64 Vec_dot, (ty:8)* %arg.1, struct {f64, f64, f64}* %57 // (self:58, users:[Id { idx: 59 }])
    %59 = call f64 clamp, f64 %58, f64 0.1, f64 1 // (self:59, users:[Id { idx: 96 }, Id { idx: 148 }, Id { idx: 107 }, Id { idx: 151 }, Id { idx: 152 }])
    %62 = load struct {f64, f64, f64}** %43 // (self:62, users:[Id { idx: 63 }])
    %63 = getelementptr struct {f64, f64, f64}* %62, i32 0, i32 0 // (self:63, users:[Id { idx: 64 }])
    %64 = load f64* %63 // (self:64, users:[Id { idx: 72 }])
    %66 = load struct {f64, f64, f64}** %43 // (self:66, users:[Id { idx: 67 }])
    %67 = getelementptr struct {f64, f64, f64}* %66, i32 0, i32 0 // (self:67, users:[Id { idx: 68 }])
    %68 = load f64* %67 // (self:68, users:[Id { idx: 69 }])
    %69 = div f64 %68, f64 2 // (self:69, users:[Id { idx: 70 }])
    %70 = call f64 cilk.floor.f64, f64 %69 // (self:70, users:[Id { idx: 71 }])
    %71 = mul f64 2, f64 %70 // (self:71, users:[Id { idx: 72 }])
    %72 = sub f64 %64, f64 %71 // (self:72, users:[Id { idx: 90 }, Id { idx: 101 }])
    %75 = load struct {f64, f64, f64}** %43 // (self:75, users:[Id { idx: 76 }])
    %76 = getelementptr struct {f64, f64, f64}* %75, i32 0, i32 2 // (self:76, users:[Id { idx: 77 }])
    %77 = load f64* %76 // (self:77, users:[Id { idx: 85 }])
    %79 = load struct {f64, f64, f64}** %43 // (self:79, users:[Id { idx: 80 }])
    %80 = getelementptr struct {f64, f64, f64}* %79, i32 0, i32 2 // (self:80, users:[Id { idx: 81 }])
    %81 = load f64* %80 // (self:81, users:[Id { idx: 82 }])
    %82 = div f64 %81, f64 2 // (self:82, users:[Id { idx: 83 }])
    %83 = call f64 cilk.floor.f64, f64 %82 // (self:83, users:[Id { idx: 84 }])
    %84 = mul f64 2, f64 %83 // (self:84, users:[Id { idx: 85 }])
    %85 = sub f64 %77, f64 %84 // (self:85, users:[Id { idx: 93 }, Id { idx: 104 }])
    %90 = fcmp ult, f64 1, f64 %72 // (self:90, users:[Id { idx: 91 }])
    br i1 %90, %label.5, %label.6 // (self:91, users:[])
label.5:	// pred(4), succ(8,9), def(), in(), out()
    %93 = fcmp ult, f64 1, f64 %85 // (self:93, users:[Id { idx: 94 }])
    br i1 %93, %label.8, %label.9 // (self:94, users:[])
label.6:	// pred(4), succ(10,11), def(), in(), out()
    %101 = fcmp ult, f64 %72, f64 1 // (self:101, users:[Id { idx: 102 }])
    br i1 %101, %label.10, %label.11 // (self:102, users:[])
label.7:	// pred(9,11), succ(14,15), def(), in(), out()
    %149 = phi f64 %148, %label.9, f64 %152, %label.11 // (self:149, users:[Id { idx: 132 }])
    %112 = getelementptr (ty:25)* %arg.3, i32 0, i32 1 // (self:112, users:[Id { idx: 113 }])
    %113 = load struct {f64, f64, f64}** %112 // (self:113, users:[Id { idx: 114 }])
    %114 = getelementptr struct {f64, f64, f64}* %113, i32 0, i32 2 // (self:114, users:[Id { idx: 115 }])
    %115 = load f64* %114 // (self:115, users:[Id { idx: 116 }])
    %116 = call f64 cilk.fabs.f64, f64 %115 // (self:116, users:[Id { idx: 120 }, Id { idx: 123 }])
    %120 = fcmp ult, f64 %116, f64 25 // (self:120, users:[Id { idx: 121 }])
    br i1 %120, %label.14, %label.15 // (self:121, users:[])
label.8:	// pred(5), succ(9), def(), in(), out()
    %96 = mul f64 %59, f64 0.5 // (self:96, users:[Id { idx: 148 }])
    br %label.9 // (self:98, users:[])
label.9:	// pred(5,8), succ(7), def(), in(), out()
    %148 = phi f64 %96, %label.8, f64 %59, %label.5 // (self:148, users:[Id { idx: 149 }])
    br %label.7 // (self:99, users:[])
label.10:	// pred(6), succ(12,13), def(), in(), out()
    %104 = fcmp ult, f64 %85, f64 1 // (self:104, users:[Id { idx: 105 }])
    br i1 %104, %label.12, %label.13 // (self:105, users:[])
label.11:	// pred(6,13), succ(7), def(), in(), out()
    %152 = phi f64 %151, %label.13, f64 %59, %label.6 // (self:152, users:[Id { idx: 149 }])
    br %label.7 // (self:111, users:[])
label.12:	// pred(10), succ(13), def(), in(), out()
    %107 = mul f64 %59, f64 0.5 // (self:107, users:[Id { idx: 151 }])
    br %label.13 // (self:109, users:[])
label.13:	// pred(10,12), succ(11), def(), in(), out()
    %151 = phi f64 %107, %label.12, f64 %59, %label.10 // (self:151, users:[Id { idx: 152 }])
    br %label.11 // (self:110, users:[])
label.14:	// pred(7), succ(15), def(), in(), out()
    %123 = mul f64 %116, f64 0.04 // (self:123, users:[Id { idx: 124 }])
    %124 = sub f64 1, f64 %123 // (self:124, users:[Id { idx: 150 }])
    br %label.15 // (self:126, users:[])
label.15:	// pred(7,14), succ(), def(), in(), out()
    %150 = phi f64 %124, %label.14, f64 0, %label.7 // (self:150, users:[Id { idx: 132 }])
    %127 = getelementptr (ty:25)* %arg.3, i32 0, i32 3 // (self:127, users:[Id { idx: 134 }])
    %128 = getelementptr (ty:14)* %arg.0, i32 0, i32 2 // (self:128, users:[Id { idx: 129 }])
    %129 = load struct {f64, f64, f64}** %128 // (self:129, users:[Id { idx: 133 }])
    %132 = mul f64 %149, f64 %150 // (self:132, users:[Id { idx: 133 }])
    %133 = call struct {f64, f64, f64}* Vec_mul, struct {f64, f64, f64}* %129, f64 %132 // (self:133, users:[Id { idx: 134 }])
    store struct {f64, f64, f64}* %133, struct {f64, f64, f64}** %127 // (self:134, users:[])
    %135 = getelementptr (ty:25)* %arg.3, i32 0, i32 4 // (self:135, users:[Id { idx: 137 }])
    store f64 %31, f64* %135 // (self:137, users:[])
    %138 = getelementptr (ty:25)* %arg.3, i32 0, i32 0 // (self:138, users:[Id { idx: 142 }, Id { idx: 140 }])
    %140 = load i32* %138 // (self:140, users:[Id { idx: 141 }])
    %141 = add i32 %140, i32 1 // (self:141, users:[Id { idx: 142 }])
    store i32 %141, i32* %138 // (self:142, users:[])
    %143 = getelementptr (ty:25)* %arg.3, i32 0, i32 5 // (self:143, users:[Id { idx: 146 }])
    %144 = getelementptr (ty:23)* %arg.2, i32 0, i32 1 // (self:144, users:[Id { idx: 145 }])
    %145 = load struct {f64, f64, f64}** %144 // (self:145, users:[Id { idx: 146 }])
    store struct {f64, f64, f64}* %145, struct {f64, f64, f64}** %143 // (self:146, users:[])
    ret i32 0 // (self:147, users:[])
}
define i32 Env_intersect(struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:31)* %arg.0, i32 0, i32 1 // (self:0, users:[Id { idx: 1 }])
    %1 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %0 // (self:1, users:[Id { idx: 4 }])
    %2 = getelementptr (ty:31)* %arg.0, i32 0, i32 0 // (self:2, users:[Id { idx: 3 }, Id { idx: 8 }, Id { idx: 13 }, Id { idx: 18 }])
    %3 = load struct {f64, f64, f64}** %2 // (self:3, users:[Id { idx: 4 }])
    %4 = call i32 Sphere_intersect, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %1, struct {f64, f64, f64}* %3, (ty:23)* %arg.1, (ty:25)* %arg.2 // (self:4, users:[])
    %5 = getelementptr (ty:31)* %arg.0, i32 0, i32 2 // (self:5, users:[Id { idx: 6 }])
    %6 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %5 // (self:6, users:[Id { idx: 9 }])
    %8 = load struct {f64, f64, f64}** %2 // (self:8, users:[Id { idx: 9 }])
    %9 = call i32 Sphere_intersect, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %6, struct {f64, f64, f64}* %8, (ty:23)* %arg.1, (ty:25)* %arg.2 // (self:9, users:[])
    %10 = getelementptr (ty:31)* %arg.0, i32 0, i32 3 // (self:10, users:[Id { idx: 11 }])
    %11 = load struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %10 // (self:11, users:[Id { idx: 14 }])
    %13 = load struct {f64, f64, f64}** %2 // (self:13, users:[Id { idx: 14 }])
    %14 = call i32 Sphere_intersect, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %11, struct {f64, f64, f64}* %13, (ty:23)* %arg.1, (ty:25)* %arg.2 // (self:14, users:[])
    %15 = getelementptr (ty:31)* %arg.0, i32 0, i32 4 // (self:15, users:[Id { idx: 16 }])
    %16 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %15 // (self:16, users:[Id { idx: 19 }])
    %18 = load struct {f64, f64, f64}** %2 // (self:18, users:[Id { idx: 19 }])
    %19 = call i32 Plane_intersect, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %16, struct {f64, f64, f64}* %18, (ty:23)* %arg.1, (ty:25)* %arg.2 // (self:19, users:[])
    ret i32 0 // (self:20, users:[])
}
define struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* Env_new() {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = alloca struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* // (self:0, users:[Id { idx: 2 }, Id { idx: 3 }, Id { idx: 7 }, Id { idx: 13 }, Id { idx: 20 }, Id { idx: 27 }, Id { idx: 34 }])
    %1 = call i64* cilk.malloc.i32, i32 128 // (self:1, users:[Id { idx: 2 }])
    store i64* %1, struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:2, users:[])
    %3 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:3, users:[Id { idx: 4 }])
    %4 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %3, i32 0, i32 0 // (self:4, users:[Id { idx: 6 }])
    %5 = call struct {f64, f64, f64}* Vec_new, f64 0.577, f64 0.577, f64 0.577 // (self:5, users:[Id { idx: 6 }])
    store struct {f64, f64, f64}* %5, struct {f64, f64, f64}** %4 // (self:6, users:[])
    %7 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:7, users:[Id { idx: 8 }])
    %8 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %7, i32 0, i32 1 // (self:8, users:[Id { idx: 12 }])
    %9 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 -0.5, f64 0 // (self:9, users:[Id { idx: 11 }])
    %10 = call struct {f64, f64, f64}* Vec_new, f64 1, f64 0, f64 0 // (self:10, users:[Id { idx: 11 }])
    %11 = call struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Sphere_new, f64 0.5, struct {f64, f64, f64}* %9, struct {f64, f64, f64}* %10 // (self:11, users:[Id { idx: 12 }])
    store struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %11, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %8 // (self:12, users:[])
    %13 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:13, users:[Id { idx: 14 }])
    %14 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %13, i32 0, i32 2 // (self:14, users:[Id { idx: 19 }])
    %15 = call f64 cilk.cos.f64, f64 6.66 // (self:15, users:[Id { idx: 16 }])
    %16 = call struct {f64, f64, f64}* Vec_new, f64 2, f64 0, f64 %15 // (self:16, users:[Id { idx: 18 }])
    %17 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 1, f64 0 // (self:17, users:[Id { idx: 18 }])
    %18 = call struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Sphere_new, f64 1, struct {f64, f64, f64}* %16, struct {f64, f64, f64}* %17 // (self:18, users:[Id { idx: 19 }])
    store struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %18, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %14 // (self:19, users:[])
    %20 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:20, users:[Id { idx: 21 }])
    %21 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %20, i32 0, i32 3 // (self:21, users:[Id { idx: 26 }])
    %22 = call f64 cilk.cos.f64, f64 3.33 // (self:22, users:[Id { idx: 23 }])
    %23 = call struct {f64, f64, f64}* Vec_new, f64 -2, f64 0.5, f64 %22 // (self:23, users:[Id { idx: 25 }])
    %24 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 0, f64 1 // (self:24, users:[Id { idx: 25 }])
    %25 = call struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Sphere_new, f64 1.5, struct {f64, f64, f64}* %23, struct {f64, f64, f64}* %24 // (self:25, users:[Id { idx: 26 }])
    store struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %25, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %21 // (self:26, users:[])
    %27 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:27, users:[Id { idx: 28 }])
    %28 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %27, i32 0, i32 4 // (self:28, users:[Id { idx: 33 }])
    %29 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 -1, f64 0 // (self:29, users:[Id { idx: 32 }])
    %30 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 1, f64 0 // (self:30, users:[Id { idx: 32 }])
    %31 = call struct {f64, f64, f64}* Vec_new, f64 1, f64 1, f64 1 // (self:31, users:[Id { idx: 32 }])
    %32 = call struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Plane_new, struct {f64, f64, f64}* %29, struct {f64, f64, f64}* %30, struct {f64, f64, f64}* %31 // (self:32, users:[Id { idx: 33 }])
    store struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %32, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %28 // (self:33, users:[])
    %34 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:34, users:[Id { idx: 35 }])
    ret struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %34 // (self:35, users:[])
}
define i32 color_of(f64) {
label.0:	// pred(), succ(1,2), def(), in(), out()
    %1 = call f64 cilk.i32_to_f64.i32, i32 256 // (self:1, users:[Id { idx: 3 }])
    %2 = call f64 clamp, f64 %arg.0, f64 0, f64 1 // (self:2, users:[Id { idx: 3 }])
    %3 = mul f64 %1, f64 %2 // (self:3, users:[Id { idx: 4 }])
    %4 = call i32 cilk.f64_to_i32.f64, f64 %3 // (self:4, users:[Id { idx: 7 }, Id { idx: 11 }])
    %7 = icmp eq, i32 %4, i32 256 // (self:7, users:[Id { idx: 8 }])
    br i1 %7, %label.1, %label.2 // (self:8, users:[])
label.1:	// pred(0), succ(), def(), in(), out()
    ret i32 255 // (self:9, users:[])
label.2:	// pred(0), succ(), def(), in(), out()
    ret i32 %4 // (self:11, users:[])
}
define i32 print_col(struct {f64, f64, f64}*) {
label.0:	// pred(), succ(), def(), in(), out()
    %0 = getelementptr (ty:8)* %arg.0, i32 0, i32 0 // (self:0, users:[Id { idx: 1 }])
    %1 = load f64* %0 // (self:1, users:[Id { idx: 2 }])
    %2 = call i32 color_of, f64 %1 // (self:2, users:[Id { idx: 3 }])
    call void cilk.print.i32, i32 %2 // (self:3, users:[])
    call void cilk.printch.i32, i32 32 // (self:4, users:[])
    %5 = getelementptr (ty:8)* %arg.0, i32 0, i32 1 // (self:5, users:[Id { idx: 6 }])
    %6 = load f64* %5 // (self:6, users:[Id { idx: 7 }])
    %7 = call i32 color_of, f64 %6 // (self:7, users:[Id { idx: 8 }])
    call void cilk.print.i32, i32 %7 // (self:8, users:[])
    call void cilk.printch.i32, i32 32 // (self:9, users:[])
    %10 = getelementptr (ty:8)* %arg.0, i32 0, i32 2 // (self:10, users:[Id { idx: 11 }])
    %11 = load f64* %10 // (self:11, users:[Id { idx: 12 }])
    %12 = call i32 color_of, f64 %11 // (self:12, users:[Id { idx: 13 }])
    call void cilk.print.i32, i32 %12 // (self:13, users:[])
    call void cilk.printch.i32, i32 10 // (self:14, users:[])
    ret i32 0 // (self:15, users:[])
}
define i32 main() {
label.0:	// pred(), succ(1), def(), in(), out()
    %0 = alloca struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* // (self:0, users:[Id { idx: 14 }, Id { idx: 49 }, Id { idx: 90 }])
    %5 = alloca struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:5, users:[Id { idx: 42 }, Id { idx: 50 }, Id { idx: 122 }, Id { idx: 127 }, Id { idx: 132 }])
    %6 = alloca struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* // (self:6, users:[Id { idx: 48 }, Id { idx: 51 }, Id { idx: 53 }, Id { idx: 58 }, Id { idx: 63 }, Id { idx: 73 }, Id { idx: 76 }, Id { idx: 81 }, Id { idx: 84 }, Id { idx: 92 }])
    %7 = alloca struct {f64, f64, f64}* // (self:7, users:[Id { idx: 61 }, Id { idx: 100 }, Id { idx: 107 }, Id { idx: 119 }])
    %8 = alloca struct {f64, f64, f64}* // (self:8, users:[Id { idx: 67 }, Id { idx: 101 }, Id { idx: 108 }, Id { idx: 113 }])
    %10 = alloca struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:10, users:[Id { idx: 89 }, Id { idx: 91 }])
    %11 = alloca struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:11, users:[])
    %12 = alloca struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* // (self:12, users:[])
    %13 = call struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* Env_new // (self:13, users:[Id { idx: 14 }])
    store struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %13, struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:14, users:[])
    br %label.1 // (self:16, users:[])
label.1:	// pred(0,6), succ(2,3), def(), in(), out()
    %149 = phi i32 0, %label.0, i32 %145, %label.6 // (self:149, users:[Id { idx: 18 }, Id { idx: 31 }, Id { idx: 145 }])
    %18 = icmp lt, i32 %149, i32 300 // (self:18, users:[Id { idx: 19 }])
    br i1 %18, %label.2, %label.3 // (self:19, users:[])
label.2:	// pred(1), succ(4), def(), in(), out()
    br %label.4 // (self:21, users:[])
label.3:	// pred(1), succ(), def(), in(), out()
    ret i32 0 // (self:148, users:[])
label.4:	// pred(2,9), succ(5,6), def(), in(), out()
    %150 = phi i32 0, %label.2, i32 %141, %label.9 // (self:150, users:[Id { idx: 23 }, Id { idx: 26 }, Id { idx: 141 }])
    %23 = icmp lt, i32 %150, i32 300 // (self:23, users:[Id { idx: 24 }])
    br i1 %23, %label.5, %label.6 // (self:24, users:[])
label.5:	// pred(4), succ(7,8), def(), in(), out()
    %26 = call f64 cilk.i32_to_f64.i32, i32 %150 // (self:26, users:[Id { idx: 27 }])
    %27 = div f64 %26, f64 150 // (self:27, users:[Id { idx: 28 }])
    %28 = sub f64 %27, f64 1 // (self:28, users:[Id { idx: 39 }])
    %31 = sub i32 300, i32 %149 // (self:31, users:[Id { idx: 32 }])
    %32 = call f64 cilk.i32_to_f64.i32, i32 %31 // (self:32, users:[Id { idx: 33 }])
    %33 = div f64 %32, f64 150 // (self:33, users:[Id { idx: 34 }])
    %34 = sub f64 %33, f64 1 // (self:34, users:[Id { idx: 39 }])
    %36 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 2, f64 6 // (self:36, users:[Id { idx: 41 }])
    %39 = call struct {f64, f64, f64}* Vec_new, f64 %28, f64 %34, f64 -1 // (self:39, users:[Id { idx: 40 }])
    %40 = call struct {f64, f64, f64}* Vec_normalize, struct {f64, f64, f64}* %39 // (self:40, users:[Id { idx: 41 }])
    %41 = call struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Ray_new, struct {f64, f64, f64}* %36, struct {f64, f64, f64}* %40 // (self:41, users:[Id { idx: 42 }])
    store struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %41, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %5 // (self:42, users:[])
    %43 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 0, f64 0 // (self:43, users:[Id { idx: 47 }])
    %44 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 0, f64 0 // (self:44, users:[Id { idx: 47 }])
    %45 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 0, f64 0 // (self:45, users:[Id { idx: 47 }])
    %46 = call struct {f64, f64, f64}* Vec_new, f64 0, f64 0, f64 0 // (self:46, users:[Id { idx: 47 }])
    %47 = call struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* Isect_new, i32 0, struct {f64, f64, f64}* %43, struct {f64, f64, f64}* %44, struct {f64, f64, f64}* %45, f64 10000000, struct {f64, f64, f64}* %46 // (self:47, users:[Id { idx: 48 }])
    store struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %47, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:48, users:[])
    %49 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:49, users:[Id { idx: 52 }])
    %50 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %5 // (self:50, users:[Id { idx: 52 }])
    %51 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:51, users:[Id { idx: 52 }])
    %52 = call i32 Env_intersect, struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %49, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %50, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %51 // (self:52, users:[])
    %53 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:53, users:[Id { idx: 54 }])
    %54 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %53, i32 0, i32 0 // (self:54, users:[Id { idx: 55 }])
    %55 = load i32* %54 // (self:55, users:[Id { idx: 56 }])
    %56 = icmp lt, i32 0, i32 %55 // (self:56, users:[Id { idx: 57 }])
    br i1 %56, %label.7, %label.8 // (self:57, users:[])
label.6:	// pred(4), succ(1), def(), in(), out()
    %145 = add i32 %149, i32 1 // (self:145, users:[Id { idx: 149 }])
    br %label.1 // (self:147, users:[])
label.7:	// pred(5), succ(10), def(), in(), out()
    %58 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:58, users:[Id { idx: 59 }])
    %59 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %58, i32 0, i32 3 // (self:59, users:[Id { idx: 60 }])
    %60 = load struct {f64, f64, f64}** %59 // (self:60, users:[Id { idx: 61 }])
    store struct {f64, f64, f64}* %60, struct {f64, f64, f64}** %7 // (self:61, users:[])
    %62 = call struct {f64, f64, f64}* Vec_new, f64 1, f64 1, f64 1 // (self:62, users:[Id { idx: 66 }])
    %63 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:63, users:[Id { idx: 64 }])
    %64 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %63, i32 0, i32 3 // (self:64, users:[Id { idx: 65 }])
    %65 = load struct {f64, f64, f64}** %64 // (self:65, users:[Id { idx: 66 }])
    %66 = call struct {f64, f64, f64}* Vec_multi, struct {f64, f64, f64}* %62, struct {f64, f64, f64}* %65 // (self:66, users:[Id { idx: 67 }])
    store struct {f64, f64, f64}* %66, struct {f64, f64, f64}** %8 // (self:67, users:[])
    br %label.10 // (self:69, users:[])
label.8:	// pred(5), succ(9), def(), in(), out()
    %122 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %5 // (self:122, users:[Id { idx: 123 }])
    %123 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %122, i32 0, i32 1 // (self:123, users:[Id { idx: 124 }])
    %124 = load struct {f64, f64, f64}** %123 // (self:124, users:[Id { idx: 125 }])
    %125 = getelementptr struct {f64, f64, f64}* %124, i32 0, i32 1 // (self:125, users:[Id { idx: 126 }])
    %126 = load f64* %125 // (self:126, users:[Id { idx: 137 }])
    %127 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %5 // (self:127, users:[Id { idx: 128 }])
    %128 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %127, i32 0, i32 1 // (self:128, users:[Id { idx: 129 }])
    %129 = load struct {f64, f64, f64}** %128 // (self:129, users:[Id { idx: 130 }])
    %130 = getelementptr struct {f64, f64, f64}* %129, i32 0, i32 1 // (self:130, users:[Id { idx: 131 }])
    %131 = load f64* %130 // (self:131, users:[Id { idx: 137 }])
    %132 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %5 // (self:132, users:[Id { idx: 133 }])
    %133 = getelementptr struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %132, i32 0, i32 1 // (self:133, users:[Id { idx: 134 }])
    %134 = load struct {f64, f64, f64}** %133 // (self:134, users:[Id { idx: 135 }])
    %135 = getelementptr struct {f64, f64, f64}* %134, i32 0, i32 1 // (self:135, users:[Id { idx: 136 }])
    %136 = load f64* %135 // (self:136, users:[Id { idx: 137 }])
    %137 = call struct {f64, f64, f64}* Vec_new, f64 %126, f64 %131, f64 %136 // (self:137, users:[Id { idx: 138 }])
    %138 = call i32 print_col, struct {f64, f64, f64}* %137 // (self:138, users:[])
    br %label.9 // (self:139, users:[])
label.9:	// pred(12,8), succ(4), def(), in(), out()
    %141 = add i32 %150, i32 1 // (self:141, users:[Id { idx: 150 }])
    br %label.4 // (self:143, users:[])
label.10:	// pred(7,14), succ(11,12), def(), in(), out()
    %151 = phi i32 1, %label.7, i32 %116, %label.14 // (self:151, users:[Id { idx: 71 }, Id { idx: 98 }, Id { idx: 116 }])
    %71 = icmp lt, i32 %151, i32 4 // (self:71, users:[Id { idx: 72 }])
    br i1 %71, %label.11, %label.12 // (self:72, users:[])
label.11:	// pred(10), succ(13,14), def(), in(), out()
    %73 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:73, users:[Id { idx: 74 }])
    %74 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %73, i32 0, i32 1 // (self:74, users:[Id { idx: 75 }])
    %75 = load struct {f64, f64, f64}** %74 // (self:75, users:[Id { idx: 80 }])
    %76 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:76, users:[Id { idx: 77 }])
    %77 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %76, i32 0, i32 2 // (self:77, users:[Id { idx: 78 }])
    %78 = load struct {f64, f64, f64}** %77 // (self:78, users:[Id { idx: 79 }])
    %79 = call struct {f64, f64, f64}* Vec_mul, struct {f64, f64, f64}* %78, f64 0.0001 // (self:79, users:[Id { idx: 80 }])
    %80 = call struct {f64, f64, f64}* Vec_add, struct {f64, f64, f64}* %75, struct {f64, f64, f64}* %79 // (self:80, users:[Id { idx: 88 }])
    %81 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:81, users:[Id { idx: 82 }])
    %82 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %81, i32 0, i32 5 // (self:82, users:[Id { idx: 83 }])
    %83 = load struct {f64, f64, f64}** %82 // (self:83, users:[Id { idx: 87 }])
    %84 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:84, users:[Id { idx: 85 }])
    %85 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %84, i32 0, i32 2 // (self:85, users:[Id { idx: 86 }])
    %86 = load struct {f64, f64, f64}** %85 // (self:86, users:[Id { idx: 87 }])
    %87 = call struct {f64, f64, f64}* Vec_reflect, struct {f64, f64, f64}* %83, struct {f64, f64, f64}* %86 // (self:87, users:[Id { idx: 88 }])
    %88 = call struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* Ray_new, struct {f64, f64, f64}* %80, struct {f64, f64, f64}* %87 // (self:88, users:[Id { idx: 89 }])
    store struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %88, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %10 // (self:89, users:[])
    %90 = load struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}** %0 // (self:90, users:[Id { idx: 93 }])
    %91 = load struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}** %10 // (self:91, users:[Id { idx: 93 }])
    %92 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:92, users:[Id { idx: 93 }])
    %93 = call i32 Env_intersect, struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* %90, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* %91, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %92 // (self:93, users:[])
    %95 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:95, users:[Id { idx: 96 }])
    %96 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %95, i32 0, i32 0 // (self:96, users:[Id { idx: 97 }])
    %97 = load i32* %96 // (self:97, users:[Id { idx: 98 }])
    %98 = icmp lt, i32 %151, i32 %97 // (self:98, users:[Id { idx: 99 }])
    br i1 %98, %label.13, %label.14 // (self:99, users:[])
label.12:	// pred(10), succ(9), def(), in(), out()
    %119 = load struct {f64, f64, f64}** %7 // (self:119, users:[Id { idx: 120 }])
    %120 = call i32 print_col, struct {f64, f64, f64}* %119 // (self:120, users:[])
    br %label.9 // (self:121, users:[])
label.13:	// pred(11), succ(14), def(), in(), out()
    %100 = load struct {f64, f64, f64}** %7 // (self:100, users:[Id { idx: 106 }])
    %101 = load struct {f64, f64, f64}** %8 // (self:101, users:[Id { idx: 105 }])
    %102 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:102, users:[Id { idx: 103 }])
    %103 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %102, i32 0, i32 3 // (self:103, users:[Id { idx: 104 }])
    %104 = load struct {f64, f64, f64}** %103 // (self:104, users:[Id { idx: 105 }])
    %105 = call struct {f64, f64, f64}* Vec_multi, struct {f64, f64, f64}* %101, struct {f64, f64, f64}* %104 // (self:105, users:[Id { idx: 106 }])
    %106 = call struct {f64, f64, f64}* Vec_add, struct {f64, f64, f64}* %100, struct {f64, f64, f64}* %105 // (self:106, users:[Id { idx: 107 }])
    store struct {f64, f64, f64}* %106, struct {f64, f64, f64}** %7 // (self:107, users:[])
    %108 = load struct {f64, f64, f64}** %8 // (self:108, users:[Id { idx: 112 }])
    %109 = load struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}** %6 // (self:109, users:[Id { idx: 110 }])
    %110 = getelementptr struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* %109, i32 0, i32 3 // (self:110, users:[Id { idx: 111 }])
    %111 = load struct {f64, f64, f64}** %110 // (self:111, users:[Id { idx: 112 }])
    %112 = call struct {f64, f64, f64}* Vec_multi, struct {f64, f64, f64}* %108, struct {f64, f64, f64}* %111 // (self:112, users:[Id { idx: 113 }])
    store struct {f64, f64, f64}* %112, struct {f64, f64, f64}** %8 // (self:113, users:[])
    br %label.14 // (self:114, users:[])
label.14:	// pred(11,13), succ(10), def(), in(), out()
    %116 = add i32 %151, i32 1 // (self:116, users:[Id { idx: 151 }])
    br %label.10 // (self:118, users:[])
}

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: clamp, ty: functy:16):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg0:48, %vreg1:49}, live_in: {}, live_out: {} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }] } })
 0  ( 0  ): %vreg0:48 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 2  ( 2  ): UCOMISDrr Register(%vreg0:48), Register(%vreg1:49)
 3  ( 3  ): JB Branch(Id { idx: 1 })
 4  ( 4  ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50, %xmm0:32}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }] } })
 5  ( 5  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 6  ( 6  ): %xmm0:32 = MOVSDrr Register(%vreg2:50)
 7  ( 7  ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg4:52, %vreg3:51}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }] } })
 8  ( 8  ): %vreg3:51 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(2)>))
 9  ( 9  ): %vreg4:52 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 10 ( 10 ): UCOMISDrr Register(%vreg3:51), Register(%vreg4:52)
 11 ( 11 ): JB Branch(Id { idx: 3 })
 12 ( 12 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%xmm0:32, %vreg5:53}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }] } })
 13 ( 13 ): %vreg5:53 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(2)>))
 14 ( 14 ): %xmm0:32 = MOVSDrr Register(%vreg5:53)
 15 ( 15 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %xmm0:32}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }] } })
 16 ( 16 ): %vreg6:54 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 17 ( 17 ): %xmm0:32 = MOVSDrr Register(%vreg6:54)
 18 ( 18 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: clamp, ty: functy:16):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg0:48, %vreg1:49}, live_in: {}, live_out: {} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }] } })
 0  ( 0  ): %vreg0:48 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 2  ( 2  ): UCOMISDrr Register(%vreg0:48), Register(%vreg1:49)
 3  ( 3  ): JB Branch(Id { idx: 1 })
 4  ( 4  ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50, %xmm0:32}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }] } })
 5  ( 5  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 6  ( 6  ): %xmm0:32 = MOVSDrr Register(%vreg2:50)
 7  ( 7  ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg4:52, %vreg3:51}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }] } })
 8  ( 8  ): %vreg3:51 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(2)>))
 9  ( 9  ): %vreg4:52 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 10 ( 10 ): UCOMISDrr Register(%vreg3:51), Register(%vreg4:52)
 11 ( 11 ): JB Branch(Id { idx: 3 })
 12 ( 12 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%xmm0:32, %vreg5:53}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }] } })
 13 ( 13 ): %vreg5:53 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(2)>))
 14 ( 14 ): %xmm0:32 = MOVSDrr Register(%vreg5:53)
 15 ( 15 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %xmm0:32}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }] } })
 16 ( 16 ): %vreg6:54 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 17 ( 17 ): %xmm0:32 = MOVSDrr Register(%vreg6:54)
 18 ( 18 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_new, ty: functy:17):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg9:57, %edi:7, %rax:16, %vreg7:55, %vreg8:56, %vreg2:50, %vreg3:51, %vreg0:48, %vreg1:49, %vreg5:53, %vreg4:52}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 8  ( 8  ): MOVSDmr Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 20 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 13 ( 12 ): MOVSDmr Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 21 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 16)
 17 ( 15 ): %vreg8:56 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(2)>))
 18 ( 16 ): MOVSDmr Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 20 ( 18 ): %rax:16 = MOVrr64 Register(%vreg9:57)
 21 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_new, ty: functy:17):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg9:57, %edi:7, %rax:16, %vreg7:55, %vreg8:56, %vreg2:50, %vreg3:51, %vreg0:48, %vreg1:49, %vreg5:53, %vreg4:52}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 8  ( 8  ): MOVSDmr Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 20 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 13 ( 12 ): MOVSDmr Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 21 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 16)
 17 ( 15 ): %vreg8:56 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(2)>))
 18 ( 16 ): MOVSDmr Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 20 ( 18 ): %rax:16 = MOVrr64 Register(%vreg9:57)
 21 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_add, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg10:58, %vreg11:59, %vreg13:61, %vreg14:62, %xmm0:32, %vreg3:51, %xmm2:34, %vreg6:54, %vreg0:48, %vreg1:49, %vreg5:53, %vreg7:55, %vreg17:65, %vreg12:60, %rax:16, %vreg9:57, %vreg8:56, %vreg19:67, %vreg2:50, %vreg4:52, %vreg15:63, %vreg16:64, %vreg18:66, %xmm1:33}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 28 ): %vreg4:52 = ADDSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 29 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 30 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 31 ): %vreg11:59 = ADDSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 17 ( 13 ): %vreg13:61 = Copy Register(%vreg12:60)
 18 ( 32 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 16)
 19 ( 14 ): %vreg14:62 = MOVSDrm Mem(Base(%vreg13:61))
 20 ( 15 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 21 ( 16 ): %vreg16:64 = Copy Register(%vreg15:63)
 22 ( 33 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 16)
 23 ( 17 ): %vreg17:65 = MOVSDrm Mem(Base(%vreg16:64))
 24 ( 18 ): %vreg18:66 = Copy Register(%vreg14:62)
 25 ( 34 ): %vreg18:66 = ADDSDrr Register(%vreg18:66), Register(%vreg17:65)
 26 ( 19 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 27 ( 20 ): %xmm1:33 = MOVSDrr Register(%vreg11:59)
 28 ( 21 ): %xmm2:34 = MOVSDrr Register(%vreg18:66)
 29 ( 22 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 23 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 31 ( 24 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 25 ): %vreg19:67 = Copy Register(%rax:16)
 33 ( 26 ): %rax:16 = MOVrr64 Register(%vreg19:67)
 34 ( 27 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_add, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg10:58, %vreg11:59, %vreg13:61, %vreg14:62, %xmm0:32, %vreg3:51, %xmm2:34, %vreg6:54, %vreg0:48, %vreg1:49, %vreg5:53, %vreg7:55, %vreg17:65, %vreg12:60, %rax:16, %vreg9:57, %vreg8:56, %vreg19:67, %vreg2:50, %vreg4:52, %vreg15:63, %vreg16:64, %vreg18:66, %xmm1:33}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 28 ): %vreg4:52 = ADDSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 29 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 30 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 31 ): %vreg11:59 = ADDSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 17 ( 13 ): %vreg13:61 = Copy Register(%vreg12:60)
 18 ( 32 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 16)
 19 ( 14 ): %vreg14:62 = MOVSDrm Mem(Base(%vreg13:61))
 20 ( 15 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 21 ( 16 ): %vreg16:64 = Copy Register(%vreg15:63)
 22 ( 33 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 16)
 23 ( 17 ): %vreg17:65 = MOVSDrm Mem(Base(%vreg16:64))
 24 ( 18 ): %vreg18:66 = Copy Register(%vreg14:62)
 25 ( 34 ): %vreg18:66 = ADDSDrr Register(%vreg18:66), Register(%vreg17:65)
 26 ( 19 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 27 ( 20 ): %xmm1:33 = MOVSDrr Register(%vreg11:59)
 28 ( 21 ): %xmm2:34 = MOVSDrr Register(%vreg18:66)
 29 ( 22 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 23 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 31 ( 24 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 25 ): %vreg19:67 = Copy Register(%rax:16)
 33 ( 26 ): %rax:16 = MOVrr64 Register(%vreg19:67)
 34 ( 27 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_sub, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg9:57, %vreg2:50, %vreg14:62, %vreg1:49, %vreg15:63, %xmm1:33, %xmm2:34, %vreg17:65, %vreg19:67, %vreg6:54, %vreg0:48, %vreg18:66, %vreg16:64, %vreg8:56, %xmm0:32, %vreg3:51, %vreg5:53, %vreg4:52, %vreg12:60, %vreg13:61, %vreg7:55, %rax:16, %vreg11:59, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 28 ): %vreg4:52 = SUBSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 29 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 30 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 31 ): %vreg11:59 = SUBSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 17 ( 13 ): %vreg13:61 = Copy Register(%vreg12:60)
 18 ( 32 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 16)
 19 ( 14 ): %vreg14:62 = MOVSDrm Mem(Base(%vreg13:61))
 20 ( 15 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 21 ( 16 ): %vreg16:64 = Copy Register(%vreg15:63)
 22 ( 33 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 16)
 23 ( 17 ): %vreg17:65 = MOVSDrm Mem(Base(%vreg16:64))
 24 ( 18 ): %vreg18:66 = Copy Register(%vreg14:62)
 25 ( 34 ): %vreg18:66 = SUBSDrr Register(%vreg18:66), Register(%vreg17:65)
 26 ( 19 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 27 ( 20 ): %xmm1:33 = MOVSDrr Register(%vreg11:59)
 28 ( 21 ): %xmm2:34 = MOVSDrr Register(%vreg18:66)
 29 ( 22 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 23 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 31 ( 24 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 25 ): %vreg19:67 = Copy Register(%rax:16)
 33 ( 26 ): %rax:16 = MOVrr64 Register(%vreg19:67)
 34 ( 27 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_sub, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg9:57, %vreg2:50, %vreg14:62, %vreg1:49, %vreg15:63, %xmm1:33, %xmm2:34, %vreg17:65, %vreg19:67, %vreg6:54, %vreg0:48, %vreg18:66, %vreg16:64, %vreg8:56, %xmm0:32, %vreg3:51, %vreg5:53, %vreg4:52, %vreg12:60, %vreg13:61, %vreg7:55, %rax:16, %vreg11:59, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 28 ): %vreg4:52 = SUBSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 29 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 30 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 31 ): %vreg11:59 = SUBSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 17 ( 13 ): %vreg13:61 = Copy Register(%vreg12:60)
 18 ( 32 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 16)
 19 ( 14 ): %vreg14:62 = MOVSDrm Mem(Base(%vreg13:61))
 20 ( 15 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 21 ( 16 ): %vreg16:64 = Copy Register(%vreg15:63)
 22 ( 33 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 16)
 23 ( 17 ): %vreg17:65 = MOVSDrm Mem(Base(%vreg16:64))
 24 ( 18 ): %vreg18:66 = Copy Register(%vreg14:62)
 25 ( 34 ): %vreg18:66 = SUBSDrr Register(%vreg18:66), Register(%vreg17:65)
 26 ( 19 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 27 ( 20 ): %xmm1:33 = MOVSDrr Register(%vreg11:59)
 28 ( 21 ): %xmm2:34 = MOVSDrr Register(%vreg18:66)
 29 ( 22 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 23 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 31 ( 24 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 25 ): %vreg19:67 = Copy Register(%rax:16)
 33 ( 26 ): %rax:16 = MOVrr64 Register(%vreg19:67)
 34 ( 27 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_mul, ty: functy:19):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg5:53, %vreg11:59, %vreg8:56, %vreg1:49, %vreg3:51, %xmm1:33, %vreg6:54, %vreg7:55, %xmm2:34, %rax:16, %vreg9:57, %vreg2:50, %vreg0:48, %vreg10:58, %xmm0:32, %vreg4:52}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 20 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 21 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 22 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 23 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 24 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = Copy Register(%vreg1:49)
 3  ( 20 ): %vreg2:50 = MULSDrm Register(%vreg2:50), Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 4  ( 3  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 5  ( 4  ): %vreg4:52 = Copy Register(%vreg3:51)
 6  ( 21 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 7  ( 5  ): %vreg5:53 = MOVSDrm Mem(Base(%vreg4:52))
 8  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 9  ( 22 ): %vreg6:54 = MULSDrm Register(%vreg6:54), Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 10 ( 7  ): %vreg7:55 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 11 ( 8  ): %vreg8:56 = Copy Register(%vreg7:55)
 12 ( 23 ): %vreg8:56 = ADDr64i32 Register(%vreg8:56), Constant(i32 16)
 13 ( 9  ): %vreg9:57 = MOVSDrm Mem(Base(%vreg8:56))
 14 ( 10 ): %vreg10:58 = Copy Register(%vreg9:57)
 15 ( 24 ): %vreg10:58 = MULSDrm Register(%vreg10:58), Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 16 ( 11 ): %xmm0:32 = MOVSDrr Register(%vreg2:50)
 17 ( 12 ): %xmm1:33 = MOVSDrr Register(%vreg6:54)
 18 ( 13 ): %xmm2:34 = MOVSDrr Register(%vreg10:58)
 19 ( 14 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 20 ( 15 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 21 ( 16 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 17 ): %vreg11:59 = Copy Register(%rax:16)
 23 ( 18 ): %rax:16 = MOVrr64 Register(%vreg11:59)
 24 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_mul, ty: functy:19):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg5:53, %vreg11:59, %vreg8:56, %vreg1:49, %vreg3:51, %xmm1:33, %vreg6:54, %vreg7:55, %xmm2:34, %rax:16, %vreg9:57, %vreg2:50, %vreg0:48, %vreg10:58, %xmm0:32, %vreg4:52}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 20 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 21 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 22 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 23 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 24 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = Copy Register(%vreg1:49)
 3  ( 20 ): %vreg2:50 = MULSDrm Register(%vreg2:50), Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 4  ( 3  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 5  ( 4  ): %vreg4:52 = Copy Register(%vreg3:51)
 6  ( 21 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 7  ( 5  ): %vreg5:53 = MOVSDrm Mem(Base(%vreg4:52))
 8  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 9  ( 22 ): %vreg6:54 = MULSDrm Register(%vreg6:54), Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 10 ( 7  ): %vreg7:55 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 11 ( 8  ): %vreg8:56 = Copy Register(%vreg7:55)
 12 ( 23 ): %vreg8:56 = ADDr64i32 Register(%vreg8:56), Constant(i32 16)
 13 ( 9  ): %vreg9:57 = MOVSDrm Mem(Base(%vreg8:56))
 14 ( 10 ): %vreg10:58 = Copy Register(%vreg9:57)
 15 ( 24 ): %vreg10:58 = MULSDrm Register(%vreg10:58), Mem(BaseFi(%rbp:21, FI<f64, Arg(1)>))
 16 ( 11 ): %xmm0:32 = MOVSDrr Register(%vreg2:50)
 17 ( 12 ): %xmm1:33 = MOVSDrr Register(%vreg6:54)
 18 ( 13 ): %xmm2:34 = MOVSDrr Register(%vreg10:58)
 19 ( 14 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 20 ( 15 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 21 ( 16 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 17 ): %vreg11:59 = Copy Register(%rax:16)
 23 ( 18 ): %rax:16 = MOVrr64 Register(%vreg11:59)
 24 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_multi, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg19:67, %vreg11:59, %vreg13:61, %vreg4:52, %xmm0:32, %vreg15:63, %vreg6:54, %vreg1:49, %vreg0:48, %vreg5:53, %xmm1:33, %vreg7:55, %vreg8:56, %vreg2:50, %vreg9:57, %vreg14:62, %vreg3:51, %rax:16, %vreg10:58, %vreg18:66, %vreg12:60, %vreg16:64, %vreg17:65, %xmm2:34}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 28 ): %vreg4:52 = MULSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 29 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 30 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 31 ): %vreg11:59 = MULSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 17 ( 13 ): %vreg13:61 = Copy Register(%vreg12:60)
 18 ( 32 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 16)
 19 ( 14 ): %vreg14:62 = MOVSDrm Mem(Base(%vreg13:61))
 20 ( 15 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 21 ( 16 ): %vreg16:64 = Copy Register(%vreg15:63)
 22 ( 33 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 16)
 23 ( 17 ): %vreg17:65 = MOVSDrm Mem(Base(%vreg16:64))
 24 ( 18 ): %vreg18:66 = Copy Register(%vreg14:62)
 25 ( 34 ): %vreg18:66 = MULSDrr Register(%vreg18:66), Register(%vreg17:65)
 26 ( 19 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 27 ( 20 ): %xmm1:33 = MOVSDrr Register(%vreg11:59)
 28 ( 21 ): %xmm2:34 = MOVSDrr Register(%vreg18:66)
 29 ( 22 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 23 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 31 ( 24 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 25 ): %vreg19:67 = Copy Register(%rax:16)
 33 ( 26 ): %rax:16 = MOVrr64 Register(%vreg19:67)
 34 ( 27 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_multi, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg19:67, %vreg11:59, %vreg13:61, %vreg4:52, %xmm0:32, %vreg15:63, %vreg6:54, %vreg1:49, %vreg0:48, %vreg5:53, %xmm1:33, %vreg7:55, %vreg8:56, %vreg2:50, %vreg9:57, %vreg14:62, %vreg3:51, %rax:16, %vreg10:58, %vreg18:66, %vreg12:60, %vreg16:64, %vreg17:65, %xmm2:34}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 28 ): %vreg4:52 = MULSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 29 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 30 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 31 ): %vreg11:59 = MULSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 17 ( 13 ): %vreg13:61 = Copy Register(%vreg12:60)
 18 ( 32 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 16)
 19 ( 14 ): %vreg14:62 = MOVSDrm Mem(Base(%vreg13:61))
 20 ( 15 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 21 ( 16 ): %vreg16:64 = Copy Register(%vreg15:63)
 22 ( 33 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 16)
 23 ( 17 ): %vreg17:65 = MOVSDrm Mem(Base(%vreg16:64))
 24 ( 18 ): %vreg18:66 = Copy Register(%vreg14:62)
 25 ( 34 ): %vreg18:66 = MULSDrr Register(%vreg18:66), Register(%vreg17:65)
 26 ( 19 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 27 ( 20 ): %xmm1:33 = MOVSDrr Register(%vreg11:59)
 28 ( 21 ): %xmm2:34 = MOVSDrr Register(%vreg18:66)
 29 ( 22 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 23 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 31 ( 24 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 25 ): %vreg19:67 = Copy Register(%rax:16)
 33 ( 26 ): %rax:16 = MOVrr64 Register(%vreg19:67)
 34 ( 27 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_dot, ty: functy:20):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50, %vreg16:64, %vreg17:65, %vreg18:66, %vreg3:51, %vreg20:68, %vreg11:59, %vreg13:61, %vreg12:60, %xmm0:32, %vreg1:49, %vreg0:48, %vreg19:67, %vreg5:53, %vreg6:54, %vreg7:55, %vreg4:52, %vreg8:56, %vreg10:58, %vreg9:57, %vreg14:62, %vreg15:63}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 23 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 24 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 25 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 26 }, Id { idx: 12 }, Id { idx: 27 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 28 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 29 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 30 }, Id { idx: 20 }, Id { idx: 31 }, Id { idx: 21 }, Id { idx: 22 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 23 ): %vreg4:52 = MULSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 24 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 25 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 26 ): %vreg11:59 = MULSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = Copy Register(%vreg4:52)
 17 ( 27 ): %vreg12:60 = ADDSDrr Register(%vreg12:60), Register(%vreg11:59)
 18 ( 13 ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 19 ( 14 ): %vreg14:62 = Copy Register(%vreg13:61)
 20 ( 28 ): %vreg14:62 = ADDr64i32 Register(%vreg14:62), Constant(i32 16)
 21 ( 15 ): %vreg15:63 = MOVSDrm Mem(Base(%vreg14:62))
 22 ( 16 ): %vreg16:64 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 23 ( 17 ): %vreg17:65 = Copy Register(%vreg16:64)
 24 ( 29 ): %vreg17:65 = ADDr64i32 Register(%vreg17:65), Constant(i32 16)
 25 ( 18 ): %vreg18:66 = MOVSDrm Mem(Base(%vreg17:65))
 26 ( 19 ): %vreg19:67 = Copy Register(%vreg15:63)
 27 ( 30 ): %vreg19:67 = MULSDrr Register(%vreg19:67), Register(%vreg18:66)
 28 ( 20 ): %vreg20:68 = Copy Register(%vreg12:60)
 29 ( 31 ): %vreg20:68 = ADDSDrr Register(%vreg20:68), Register(%vreg19:67)
 30 ( 21 ): %xmm0:32 = MOVSDrr Register(%vreg20:68)
 31 ( 22 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_dot, ty: functy:20):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50, %vreg16:64, %vreg17:65, %vreg18:66, %vreg3:51, %vreg20:68, %vreg11:59, %vreg13:61, %vreg12:60, %xmm0:32, %vreg1:49, %vreg0:48, %vreg19:67, %vreg5:53, %vreg6:54, %vreg7:55, %vreg4:52, %vreg8:56, %vreg10:58, %vreg9:57, %vreg14:62, %vreg15:63}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 23 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 24 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 25 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 26 }, Id { idx: 12 }, Id { idx: 27 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 28 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 29 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 30 }, Id { idx: 20 }, Id { idx: 31 }, Id { idx: 21 }, Id { idx: 22 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVSDrm Mem(Base(%vreg2:50))
 4  ( 4  ): %vreg4:52 = Copy Register(%vreg1:49)
 5  ( 23 ): %vreg4:52 = MULSDrr Register(%vreg4:52), Register(%vreg3:51)
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 7  ( 6  ): %vreg6:54 = Copy Register(%vreg5:53)
 8  ( 24 ): %vreg6:54 = ADDr64i32 Register(%vreg6:54), Constant(i32 8)
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg6:54))
 10 ( 8  ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 11 ( 9  ): %vreg9:57 = Copy Register(%vreg8:56)
 12 ( 25 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 8)
 13 ( 10 ): %vreg10:58 = MOVSDrm Mem(Base(%vreg9:57))
 14 ( 11 ): %vreg11:59 = Copy Register(%vreg7:55)
 15 ( 26 ): %vreg11:59 = MULSDrr Register(%vreg11:59), Register(%vreg10:58)
 16 ( 12 ): %vreg12:60 = Copy Register(%vreg4:52)
 17 ( 27 ): %vreg12:60 = ADDSDrr Register(%vreg12:60), Register(%vreg11:59)
 18 ( 13 ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 19 ( 14 ): %vreg14:62 = Copy Register(%vreg13:61)
 20 ( 28 ): %vreg14:62 = ADDr64i32 Register(%vreg14:62), Constant(i32 16)
 21 ( 15 ): %vreg15:63 = MOVSDrm Mem(Base(%vreg14:62))
 22 ( 16 ): %vreg16:64 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 23 ( 17 ): %vreg17:65 = Copy Register(%vreg16:64)
 24 ( 29 ): %vreg17:65 = ADDr64i32 Register(%vreg17:65), Constant(i32 16)
 25 ( 18 ): %vreg18:66 = MOVSDrm Mem(Base(%vreg17:65))
 26 ( 19 ): %vreg19:67 = Copy Register(%vreg15:63)
 27 ( 30 ): %vreg19:67 = MULSDrr Register(%vreg19:67), Register(%vreg18:66)
 28 ( 20 ): %vreg20:68 = Copy Register(%vreg12:60)
 29 ( 31 ): %vreg20:68 = ADDSDrr Register(%vreg20:68), Register(%vreg19:67)
 30 ( 21 ): %xmm0:32 = MOVSDrr Register(%vreg20:68)
 31 ( 22 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_reflect, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg1:49, %vreg0:48, %rdi:23, %xmm0:32, %vreg4:52, %rsi:22, %vreg3:51, %vreg5:53, %vreg6:54, %xmm1:33, %vreg2:50, %rax:16, %vreg7:55, %vreg8:56}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 26 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 4  ( 4  ): %rdi:23 = MOVrr64 Register(%vreg2:50)
 5  ( 5  ): %rsi:22 = MOVrr64 Register(%vreg3:51)
 6  ( 6  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 7  ( 7  ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 8  ( 8  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 9  ( 9  ): %vreg4:52 = Copy Register(%xmm0:32)
 10 ( 10 ): %vreg5:53 = MOVSDrm64 Constant(f64 -2)
 11 ( 11 ): %vreg6:54 = Copy Register(%vreg4:52)
 12 ( 26 ): %vreg6:54 = MULSDrr Register(%vreg6:54), Register(%vreg5:53)
 13 ( 12 ): %rdi:23 = MOVrr64 Register(%vreg1:49)
 14 ( 13 ): %xmm1:33 = MOVSDrr Register(%vreg6:54)
 15 ( 14 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 16 ( 15 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 17 ( 16 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 18 ( 17 ): %vreg7:55 = Copy Register(%rax:16)
 19 ( 18 ): %rdi:23 = MOVrr64 Register(%vreg0:48)
 20 ( 19 ): %rsi:22 = MOVrr64 Register(%vreg7:55)
 21 ( 20 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 21 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 23 ( 22 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 24 ( 23 ): %vreg8:56 = Copy Register(%rax:16)
 25 ( 24 ): %rax:16 = MOVrr64 Register(%vreg8:56)
 26 ( 25 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_reflect, ty: functy:18):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg1:49, %vreg0:48, %rdi:23, %xmm0:32, %vreg4:52, %rsi:22, %vreg3:51, %vreg5:53, %vreg6:54, %xmm1:33, %vreg2:50, %rax:16, %vreg7:55, %vreg8:56}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 26 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 2  ( 2  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 3  ( 3  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 4  ( 4  ): %rdi:23 = MOVrr64 Register(%vreg2:50)
 5  ( 5  ): %rsi:22 = MOVrr64 Register(%vreg3:51)
 6  ( 6  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 7  ( 7  ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 8  ( 8  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 9  ( 9  ): %vreg4:52 = Copy Register(%xmm0:32)
 10 ( 10 ): %vreg5:53 = MOVSDrm64 Constant(f64 -2)
 11 ( 11 ): %vreg6:54 = Copy Register(%vreg4:52)
 12 ( 26 ): %vreg6:54 = MULSDrr Register(%vreg6:54), Register(%vreg5:53)
 13 ( 12 ): %rdi:23 = MOVrr64 Register(%vreg1:49)
 14 ( 13 ): %xmm1:33 = MOVSDrr Register(%vreg6:54)
 15 ( 14 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 16 ( 15 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 17 ( 16 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 18 ( 17 ): %vreg7:55 = Copy Register(%rax:16)
 19 ( 18 ): %rdi:23 = MOVrr64 Register(%vreg0:48)
 20 ( 19 ): %rsi:22 = MOVrr64 Register(%vreg7:55)
 21 ( 20 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 21 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 23 ( 22 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 24 ( 23 ): %vreg8:56 = Copy Register(%rax:16)
 25 ( 24 ): %rax:16 = MOVrr64 Register(%vreg8:56)
 26 ( 25 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_length, ty: functy:21):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg13:61, %vreg12:60, %vreg0:48, %vreg1:49, %vreg5:53, %vreg2:50, %vreg4:52, %vreg15:63, %vreg9:57, %xmm0:32, %vreg8:56, %vreg11:59, %vreg3:51, %vreg14:62, %vreg7:55, %vreg16:64, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 19 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 20 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 21 }, Id { idx: 9 }, Id { idx: 22 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 23 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 24 }, Id { idx: 15 }, Id { idx: 25 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVSDrm Mem(Base(%vreg0:48))
 3  ( 3  ): %vreg3:51 = Copy Register(%vreg1:49)
 4  ( 19 ): %vreg3:51 = MULSDrr Register(%vreg3:51), Register(%vreg2:50)
 5  ( 4  ): %vreg4:52 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 6  ( 5  ): %vreg5:53 = Copy Register(%vreg4:52)
 7  ( 20 ): %vreg5:53 = ADDr64i32 Register(%vreg5:53), Constant(i32 8)
 8  ( 6  ): %vreg6:54 = MOVSDrm Mem(Base(%vreg5:53))
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg5:53))
 10 ( 8  ): %vreg8:56 = Copy Register(%vreg6:54)
 11 ( 21 ): %vreg8:56 = MULSDrr Register(%vreg8:56), Register(%vreg7:55)
 12 ( 9  ): %vreg9:57 = Copy Register(%vreg3:51)
 13 ( 22 ): %vreg9:57 = ADDSDrr Register(%vreg9:57), Register(%vreg8:56)
 14 ( 10 ): %vreg10:58 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 15 ( 11 ): %vreg11:59 = Copy Register(%vreg10:58)
 16 ( 23 ): %vreg11:59 = ADDr64i32 Register(%vreg11:59), Constant(i32 16)
 17 ( 12 ): %vreg12:60 = MOVSDrm Mem(Base(%vreg11:59))
 18 ( 13 ): %vreg13:61 = MOVSDrm Mem(Base(%vreg11:59))
 19 ( 14 ): %vreg14:62 = Copy Register(%vreg12:60)
 20 ( 24 ): %vreg14:62 = MULSDrr Register(%vreg14:62), Register(%vreg13:61)
 21 ( 15 ): %vreg15:63 = Copy Register(%vreg9:57)
 22 ( 25 ): %vreg15:63 = ADDSDrr Register(%vreg15:63), Register(%vreg14:62)
 23 ( 16 ): %vreg16:64 = SQRTSDrr Register(%vreg15:63)
 24 ( 17 ): %xmm0:32 = MOVSDrr Register(%vreg16:64)
 25 ( 18 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_length, ty: functy:21):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg13:61, %vreg12:60, %vreg0:48, %vreg1:49, %vreg5:53, %vreg2:50, %vreg4:52, %vreg15:63, %vreg9:57, %xmm0:32, %vreg8:56, %vreg11:59, %vreg3:51, %vreg14:62, %vreg7:55, %vreg16:64, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 19 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 20 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 21 }, Id { idx: 9 }, Id { idx: 22 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 23 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 24 }, Id { idx: 15 }, Id { idx: 25 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %vreg2:50 = MOVSDrm Mem(Base(%vreg0:48))
 3  ( 3  ): %vreg3:51 = Copy Register(%vreg1:49)
 4  ( 19 ): %vreg3:51 = MULSDrr Register(%vreg3:51), Register(%vreg2:50)
 5  ( 4  ): %vreg4:52 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 6  ( 5  ): %vreg5:53 = Copy Register(%vreg4:52)
 7  ( 20 ): %vreg5:53 = ADDr64i32 Register(%vreg5:53), Constant(i32 8)
 8  ( 6  ): %vreg6:54 = MOVSDrm Mem(Base(%vreg5:53))
 9  ( 7  ): %vreg7:55 = MOVSDrm Mem(Base(%vreg5:53))
 10 ( 8  ): %vreg8:56 = Copy Register(%vreg6:54)
 11 ( 21 ): %vreg8:56 = MULSDrr Register(%vreg8:56), Register(%vreg7:55)
 12 ( 9  ): %vreg9:57 = Copy Register(%vreg3:51)
 13 ( 22 ): %vreg9:57 = ADDSDrr Register(%vreg9:57), Register(%vreg8:56)
 14 ( 10 ): %vreg10:58 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 15 ( 11 ): %vreg11:59 = Copy Register(%vreg10:58)
 16 ( 23 ): %vreg11:59 = ADDr64i32 Register(%vreg11:59), Constant(i32 16)
 17 ( 12 ): %vreg12:60 = MOVSDrm Mem(Base(%vreg11:59))
 18 ( 13 ): %vreg13:61 = MOVSDrm Mem(Base(%vreg11:59))
 19 ( 14 ): %vreg14:62 = Copy Register(%vreg12:60)
 20 ( 24 ): %vreg14:62 = MULSDrr Register(%vreg14:62), Register(%vreg13:61)
 21 ( 15 ): %vreg15:63 = Copy Register(%vreg9:57)
 22 ( 25 ): %vreg15:63 = ADDSDrr Register(%vreg15:63), Register(%vreg14:62)
 23 ( 16 ): %vreg16:64 = SQRTSDrr Register(%vreg15:63)
 24 ( 17 ): %xmm0:32 = MOVSDrr Register(%vreg16:64)
 25 ( 18 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Vec_normalize, ty: functy:22):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg0:48, %vreg3:51, %vreg2:50, %xmm0:32, %vreg1:49}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }] } })
 0  ( 0  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %rdi:23 = MOVrr64 Register(%vreg1:49)
 2  ( 2  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 3  ( 3  ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_length>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
 4  ( 4  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 5  ( 5  ): %vreg2:50 = Copy Register(%xmm0:32)
 6  ( 6  ): %vreg0:48 = Copy Register(%vreg2:50)
 7  ( 7  ): %vreg3:51 = MOVSDrm64 Constant(f64 0.00000001)
 8  ( 8  ): UCOMISDrr Register(%vreg0:48), Register(%vreg3:51)
 9  ( 9  ): JA Branch(Id { idx: 1 })
 10 ( 10 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg7:55, %vreg8:56, %vreg5:53, %vreg4:52, %vreg11:59, %vreg13:61, %vreg10:58, %vreg9:57, %vreg12:60, %vreg14:62, %vreg15:63, %vreg16:64}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 31 }, Id { idx: 15 }, Id { idx: 32 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 33 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 34 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 35 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 36 }, Id { idx: 26 }, Id { idx: 27 }] } })
 11 ( 11 ): %vreg4:52 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 12 ( 12 ): %vreg5:53 = MOVSDrm Mem(Base(%vreg4:52))
 13 ( 13 ): %vreg6:54 = MOVSDrm64 Constant(f64 1)
 14 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 15 ( 31 ): %vreg7:55 = DIVSDrr Register(%vreg7:55), Register(%vreg0:48)
 16 ( 15 ): %vreg8:56 = Copy Register(%vreg5:53)
 17 ( 32 ): %vreg8:56 = MULSDrr Register(%vreg8:56), Register(%vreg7:55)
 18 ( 16 ): MOVSDmr Mem(Base(%vreg4:52)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 20 ( 18 ): %vreg10:58 = Copy Register(%vreg9:57)
 21 ( 33 ): %vreg10:58 = ADDr64i32 Register(%vreg10:58), Constant(i32 8)
 22 ( 19 ): %vreg11:59 = MOVSDrm Mem(Base(%vreg10:58))
 23 ( 20 ): %vreg12:60 = Copy Register(%vreg11:59)
 24 ( 34 ): %vreg12:60 = MULSDrr Register(%vreg12:60), Register(%vreg7:55)
 25 ( 21 ): MOVSDmr Mem(Base(%vreg10:58)), Register(%vreg12:60)
 26 ( 22 ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 27 ( 23 ): %vreg14:62 = Copy Register(%vreg13:61)
 28 ( 35 ): %vreg14:62 = ADDr64i32 Register(%vreg14:62), Constant(i32 16)
 29 ( 24 ): %vreg15:63 = MOVSDrm Mem(Base(%vreg14:62))
 30 ( 25 ): %vreg16:64 = Copy Register(%vreg15:63)
 31 ( 36 ): %vreg16:64 = MULSDrr Register(%vreg16:64), Register(%vreg7:55)
 32 ( 26 ): MOVSDmr Mem(Base(%vreg14:62)), Register(%vreg16:64)
 33 ( 27 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rax:16, %vreg17:65}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }, Id { idx: 1 }], succ: [], iseq: RefCell { value: [Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }] } })
 34 ( 28 ): %vreg17:65 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 35 ( 29 ): %rax:16 = MOVrr64 Register(%vreg17:65)
 36 ( 30 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Vec_normalize, ty: functy:22):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg0:48, %vreg3:51, %vreg2:50, %xmm0:32, %vreg1:49}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }] } })
 0  ( 0  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %rdi:23 = MOVrr64 Register(%vreg1:49)
 2  ( 2  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 3  ( 3  ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_length>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
 4  ( 4  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 5  ( 5  ): %vreg2:50 = Copy Register(%xmm0:32)
 6  ( 6  ): %vreg0:48 = Copy Register(%vreg2:50)
 7  ( 7  ): %vreg3:51 = MOVSDrm64 Constant(f64 0.00000001)
 8  ( 8  ): UCOMISDrr Register(%vreg0:48), Register(%vreg3:51)
 9  ( 9  ): JA Branch(Id { idx: 1 })
 10 ( 10 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg7:55, %vreg8:56, %vreg5:53, %vreg4:52, %vreg11:59, %vreg13:61, %vreg10:58, %vreg9:57, %vreg12:60, %vreg14:62, %vreg15:63, %vreg16:64}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 31 }, Id { idx: 15 }, Id { idx: 32 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 33 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 34 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 35 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 36 }, Id { idx: 26 }, Id { idx: 27 }] } })
 11 ( 11 ): %vreg4:52 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 12 ( 12 ): %vreg5:53 = MOVSDrm Mem(Base(%vreg4:52))
 13 ( 13 ): %vreg6:54 = MOVSDrm64 Constant(f64 1)
 14 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 15 ( 31 ): %vreg7:55 = DIVSDrr Register(%vreg7:55), Register(%vreg0:48)
 16 ( 15 ): %vreg8:56 = Copy Register(%vreg5:53)
 17 ( 32 ): %vreg8:56 = MULSDrr Register(%vreg8:56), Register(%vreg7:55)
 18 ( 16 ): MOVSDmr Mem(Base(%vreg4:52)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 20 ( 18 ): %vreg10:58 = Copy Register(%vreg9:57)
 21 ( 33 ): %vreg10:58 = ADDr64i32 Register(%vreg10:58), Constant(i32 8)
 22 ( 19 ): %vreg11:59 = MOVSDrm Mem(Base(%vreg10:58))
 23 ( 20 ): %vreg12:60 = Copy Register(%vreg11:59)
 24 ( 34 ): %vreg12:60 = MULSDrr Register(%vreg12:60), Register(%vreg7:55)
 25 ( 21 ): MOVSDmr Mem(Base(%vreg10:58)), Register(%vreg12:60)
 26 ( 22 ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 27 ( 23 ): %vreg14:62 = Copy Register(%vreg13:61)
 28 ( 35 ): %vreg14:62 = ADDr64i32 Register(%vreg14:62), Constant(i32 16)
 29 ( 24 ): %vreg15:63 = MOVSDrm Mem(Base(%vreg14:62))
 30 ( 25 ): %vreg16:64 = Copy Register(%vreg15:63)
 31 ( 36 ): %vreg16:64 = MULSDrr Register(%vreg16:64), Register(%vreg7:55)
 32 ( 26 ): MOVSDmr Mem(Base(%vreg14:62)), Register(%vreg16:64)
 33 ( 27 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rax:16, %vreg17:65}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }, Id { idx: 1 }], succ: [], iseq: RefCell { value: [Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }] } })
 34 ( 28 ): %vreg17:65 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 35 ( 29 ): %rax:16 = MOVrr64 Register(%vreg17:65)
 36 ( 30 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Ray_new, ty: functy:24):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg5:53, %vreg6:54, %vreg3:51, %vreg2:50, %vreg0:48, %vreg4:52, %rax:16, %vreg1:49, %edi:7}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 16 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 8  ( 8  ): MOVmr64 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 16 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>))
 15 ( 14 ): %rax:16 = MOVrr64 Register(%vreg6:54)
 16 ( 15 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Ray_new, ty: functy:24):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg5:53, %vreg6:54, %vreg3:51, %vreg2:50, %vreg0:48, %vreg4:52, %rax:16, %vreg1:49, %edi:7}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 16 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 8  ( 8  ): MOVmr64 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 16 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>))
 15 ( 14 ): %rax:16 = MOVrr64 Register(%vreg6:54)
 16 ( 15 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Isect_new, ty: functy:26):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg3:51, %vreg13:61, %vreg14:62, %vreg7:55, %vreg0:48, %vreg1:49, %vreg16:64, %vreg17:65, %vreg18:66, %vreg15:63, %edi:7, %vreg8:56, %vreg9:57, %vreg11:59, %vreg4:52, %vreg5:53, %rax:16, %vreg10:58, %vreg12:60, %vreg6:54, %vreg2:50}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 32 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 33 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 35 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 36 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVrm32 Mem(BaseFi(%rbp:21, FI<i32, Arg(0)>))
 8  ( 8  ): MOVmr32 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 32 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 4)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 33 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 12)
 17 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>))
 18 ( 16 ): MOVmr64 Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 20 ( 18 ): %vreg10:58 = Copy Register(%vreg9:57)
 21 ( 34 ): %vreg10:58 = ADDr64i32 Register(%vreg10:58), Constant(i32 20)
 22 ( 19 ): %vreg11:59 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(3)>))
 23 ( 20 ): MOVmr64 Mem(Base(%vreg10:58)), Register(%vreg11:59)
 24 ( 21 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 25 ( 22 ): %vreg13:61 = Copy Register(%vreg12:60)
 26 ( 35 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 28)
 27 ( 23 ): %vreg14:62 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(4)>))
 28 ( 24 ): MOVSDmr Mem(Base(%vreg13:61)), Register(%vreg14:62)
 29 ( 25 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 30 ( 26 ): %vreg16:64 = Copy Register(%vreg15:63)
 31 ( 36 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 36)
 32 ( 27 ): %vreg17:65 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(5)>))
 33 ( 28 ): MOVmr64 Mem(Base(%vreg16:64)), Register(%vreg17:65)
 34 ( 29 ): %vreg18:66 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 35 ( 30 ): %rax:16 = MOVrr64 Register(%vreg18:66)
 36 ( 31 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Isect_new, ty: functy:26):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg3:51, %vreg13:61, %vreg14:62, %vreg7:55, %vreg0:48, %vreg1:49, %vreg16:64, %vreg17:65, %vreg18:66, %vreg15:63, %edi:7, %vreg8:56, %vreg9:57, %vreg11:59, %vreg4:52, %vreg5:53, %rax:16, %vreg10:58, %vreg12:60, %vreg6:54, %vreg2:50}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 32 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 33 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 35 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 36 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVrm32 Mem(BaseFi(%rbp:21, FI<i32, Arg(0)>))
 8  ( 8  ): MOVmr32 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 32 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 4)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 33 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 12)
 17 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>))
 18 ( 16 ): MOVmr64 Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 20 ( 18 ): %vreg10:58 = Copy Register(%vreg9:57)
 21 ( 34 ): %vreg10:58 = ADDr64i32 Register(%vreg10:58), Constant(i32 20)
 22 ( 19 ): %vreg11:59 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(3)>))
 23 ( 20 ): MOVmr64 Mem(Base(%vreg10:58)), Register(%vreg11:59)
 24 ( 21 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 25 ( 22 ): %vreg13:61 = Copy Register(%vreg12:60)
 26 ( 35 ): %vreg13:61 = ADDr64i32 Register(%vreg13:61), Constant(i32 28)
 27 ( 23 ): %vreg14:62 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(4)>))
 28 ( 24 ): MOVSDmr Mem(Base(%vreg13:61)), Register(%vreg14:62)
 29 ( 25 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 30 ( 26 ): %vreg16:64 = Copy Register(%vreg15:63)
 31 ( 36 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 36)
 32 ( 27 ): %vreg17:65 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(5)>))
 33 ( 28 ): MOVmr64 Mem(Base(%vreg16:64)), Register(%vreg17:65)
 34 ( 29 ): %vreg18:66 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>))
 35 ( 30 ): %rax:16 = MOVrr64 Register(%vreg18:66)
 36 ( 31 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Sphere_new, ty: functy:27):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %rax:16, %vreg0:48, %vreg9:57, %vreg4:52, %vreg5:53, %vreg7:55, %vreg8:56, %vreg1:49, %vreg2:50, %edi:7, %vreg3:51}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 8  ( 8  ): MOVSDmr Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 20 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 21 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 16)
 17 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>))
 18 ( 16 ): MOVmr64 Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 20 ( 18 ): %rax:16 = MOVrr64 Register(%vreg9:57)
 21 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Sphere_new, ty: functy:27):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %rax:16, %vreg0:48, %vreg9:57, %vreg4:52, %vreg5:53, %vreg7:55, %vreg8:56, %vreg1:49, %vreg2:50, %edi:7, %vreg3:51}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 8  ( 8  ): MOVSDmr Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 20 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 21 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 16)
 17 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>))
 18 ( 16 ): MOVmr64 Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>))
 20 ( 18 ): %rax:16 = MOVrr64 Register(%vreg9:57)
 21 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Sphere_intersect, ty: functy:28):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg22:70, %rsi:22, %vreg16:64, %xmm0:32, %vreg15:63, %vreg14:62, %vreg9:57, %vreg11:59, %vreg0:48, %vreg25:73, %vreg3:51, %vreg19:67, %vreg17:65, %vreg5:53, %vreg23:71, %vreg10:58, %vreg13:61, %vreg1:49, %vreg2:50, %vreg21:69, %vreg12:60, %vreg20:68, %vreg24:72, %rdi:23, %vreg18:66, %rax:16, %vreg26:74, %vreg7:55, %vreg8:56, %vreg4:52, %vreg6:54}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 140 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 141 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 142 }, Id { idx: 24 }, Id { idx: 143 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 144 }, Id { idx: 37 }, Id { idx: 145 }, Id { idx: 38 }, Id { idx: 146 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 147 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }] } })
 0  ( 0  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 1  ( 1  ): %vreg2:50 = MOVrm64 Mem(Base(%vreg1:49))
 2  ( 2  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
 3  ( 3  ): %vreg4:52 = Copy Register(%vreg3:51)
 4  (140 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 5  ( 4  ): %vreg5:53 = MOVrm64 Mem(Base(%vreg4:52))
 6  ( 5  ): %rdi:23 = MOVrr64 Register(%vreg2:50)
 7  ( 6  ): %rsi:22 = MOVrr64 Register(%vreg5:53)
 8  ( 7  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 9  ( 8  ): %rax:16 = CALL Mem(Address(addr<fn:Vec_sub>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 10 ( 9  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 11 ( 10 ): %vreg6:54 = Copy Register(%rax:16)
 12 ( 11 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)), Register(%vreg6:54)
 13 ( 12 ): %vreg7:55 = MOVSDrm64 Constant(f64 0)
 14 ( 13 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 15 ( 14 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 16 ( 15 ): %vreg10:58 = Copy Register(%vreg9:57)
 17 (141 ): %vreg10:58 = ADDr64i32 Register(%vreg10:58), Constant(i32 8)
 18 ( 16 ): %vreg11:59 = MOVrm64 Mem(Base(%vreg10:58))
 19 ( 17 ): %rdi:23 = MOVrr64 Register(%vreg8:56)
 20 ( 18 ): %rsi:22 = MOVrr64 Register(%vreg11:59)
 21 ( 19 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 20 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 23 ( 21 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 24 ( 22 ): %vreg12:60 = Copy Register(%xmm0:32)
 25 ( 23 ): %vreg13:61 = Copy Register(%vreg7:55)
 26 (142 ): %vreg13:61 = SUBSDrr Register(%vreg13:61), Register(%vreg12:60)
 27 ( 24 ): %vreg14:62 = Copy Register(%vreg12:60)
 28 (143 ): %vreg14:62 = MULSDrr Register(%vreg14:62), Register(%vreg12:60)
 29 ( 25 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 30 ( 26 ): %vreg16:64 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 31 ( 27 ): %rdi:23 = MOVrr64 Register(%vreg15:63)
 32 ( 28 ): %rsi:22 = MOVrr64 Register(%vreg16:64)
 33 ( 29 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 34 ( 30 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 35 ( 31 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 36 ( 32 ): %vreg17:65 = Copy Register(%xmm0:32)
 37 ( 33 ): %vreg18:66 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
 38 ( 34 ): %vreg19:67 = MOVSDrm Mem(Base(%vreg18:66))
 39 ( 35 ): %vreg20:68 = MOVSDrm Mem(Base(%vreg18:66))
 40 ( 36 ): %vreg21:69 = Copy Register(%vreg19:67)
 41 (144 ): %vreg21:69 = MULSDrr Register(%vreg21:69), Register(%vreg20:68)
 42 ( 37 ): %vreg22:70 = Copy Register(%vreg17:65)
 43 (145 ): %vreg22:70 = SUBSDrr Register(%vreg22:70), Register(%vreg21:69)
 44 ( 38 ): %vreg23:71 = Copy Register(%vreg14:62)
 45 (146 ): %vreg23:71 = SUBSDrr Register(%vreg23:71), Register(%vreg22:70)
 46 ( 39 ): %vreg24:72 = SQRTSDrr Register(%vreg23:71)
 47 ( 40 ): %vreg25:73 = Copy Register(%vreg13:61)
 48 (147 ): %vreg25:73 = SUBSDrr Register(%vreg25:73), Register(%vreg24:72)
 49 ( 41 ): %vreg0:48 = Copy Register(%vreg25:73)
 50 ( 42 ): %vreg26:74 = MOVSDrm64 Constant(f64 0)
 51 ( 43 ): UCOMISDrr Register(%vreg23:71), Register(%vreg26:74)
 52 ( 44 ): JBE Branch(Id { idx: 1 })
 53 ( 45 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 46 }, Id { idx: 47 }] } })
 54 ( 46 ): %eax:0 = MOVri32 Constant(i32 0)
 55 ( 47 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg27:75}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }] } })
 56 ( 48 ): %vreg27:75 = MOVSDrm64 Constant(f64 0.0001)
 57 ( 49 ): UCOMISDrr Register(%vreg0:48), Register(%vreg27:75)
 58 ( 50 ): JBE Branch(Id { idx: 3 })
 59 ( 51 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 52 }, Id { idx: 53 }] } })
 60 ( 52 ): %eax:0 = MOVri32 Constant(i32 0)
 61 ( 53 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg30:78, %vreg28:76, %vreg29:77}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 2 }], succ: [Id { idx: 5 }, Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 54 }, Id { idx: 55 }, Id { idx: 148 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }] } })
 62 ( 54 ): %vreg28:76 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 63 ( 55 ): %vreg29:77 = Copy Register(%vreg28:76)
 64 (148 ): %vreg29:77 = ADDr64i32 Register(%vreg29:77), Constant(i32 28)
 65 ( 56 ): %vreg30:78 = MOVSDrm Mem(Base(%vreg29:77))
 66 ( 57 ): UCOMISDrr Register(%vreg30:78), Register(%vreg0:48)
 67 ( 58 ): JBE Branch(Id { idx: 5 })
 68 ( 59 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 60 }, Id { idx: 61 }] } })
 69 ( 60 ): %eax:0 = MOVri32 Constant(i32 0)
 70 ( 61 ): RET 
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg46:94, %vreg64:112, %vreg58:106, %vreg65:113, %vreg49:97, %vreg48:96, %rsi:22, %vreg60:108, %vreg62:110, %vreg52:100, %vreg57:105, %xmm0:32, %xmm1:33, %vreg32:80, %vreg54:102, %vreg33:81, %vreg34:82, %vreg35:83, %vreg36:84, %vreg38:86, %vreg40:88, %vreg41:89, %vreg31:79, %vreg55:103, %vreg42:90, %vreg53:101, %vreg63:111, %vreg39:87, %vreg61:109, %vreg45:93, %vreg59:107, %vreg50:98, %vreg47:95, %vreg51:99, %vreg37:85, %rdi:23, %rax:16, %vreg43:91, %xmm2:34, %eax:0, %vreg44:92, %vreg56:104}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 62 }, Id { idx: 63 }, Id { idx: 149 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 150 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 151 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 152 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 153 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 154 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }, Id { idx: 117 }, Id { idx: 118 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 155 }, Id { idx: 129 }, Id { idx: 130 }, Id { idx: 131 }, Id { idx: 132 }, Id { idx: 156 }, Id { idx: 133 }, Id { idx: 134 }, Id { idx: 135 }, Id { idx: 157 }, Id { idx: 136 }, Id { idx: 137 }, Id { idx: 138 }, Id { idx: 139 }] } })
 71 ( 62 ): %vreg31:79 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 72 ( 63 ): %vreg32:80 = Copy Register(%vreg31:79)
 73 (149 ): %vreg32:80 = ADDr64i32 Register(%vreg32:80), Constant(i32 4)
 74 ( 64 ): %vreg33:81 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 75 ( 65 ): %vreg34:82 = MOVrm64 Mem(Base(%vreg33:81))
 76 ( 66 ): %vreg35:83 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 77 ( 67 ): %vreg36:84 = Copy Register(%vreg35:83)
 78 (150 ): %vreg36:84 = ADDr64i32 Register(%vreg36:84), Constant(i32 8)
 79 ( 68 ): %vreg37:85 = MOVrm64 Mem(Base(%vreg36:84))
 80 ( 69 ): %rdi:23 = MOVrr64 Register(%vreg37:85)
 81 ( 70 ): %xmm1:33 = MOVSDrr Register(%vreg0:48)
 82 ( 71 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 83 ( 72 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 84 ( 73 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 85 ( 74 ): %vreg38:86 = Copy Register(%rax:16)
 86 ( 75 ): %rdi:23 = MOVrr64 Register(%vreg34:82)
 87 ( 76 ): %rsi:22 = MOVrr64 Register(%vreg38:86)
 88 ( 77 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 89 ( 78 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 90 ( 79 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 91 ( 80 ): %vreg39:87 = Copy Register(%rax:16)
 92 ( 81 ): MOVmr64 Mem(Base(%vreg32:80)), Register(%vreg39:87)
 93 ( 82 ): %vreg40:88 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 94 ( 83 ): %vreg41:89 = Copy Register(%vreg40:88)
 95 (151 ): %vreg41:89 = ADDr64i32 Register(%vreg41:89), Constant(i32 12)
 96 ( 84 ): %vreg42:90 = MOVrm64 Mem(Base(%vreg32:80))
 97 ( 85 ): %vreg43:91 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
 98 ( 86 ): %vreg44:92 = Copy Register(%vreg43:91)
 99 (152 ): %vreg44:92 = ADDr64i32 Register(%vreg44:92), Constant(i32 8)
100 ( 87 ): %vreg45:93 = MOVrm64 Mem(Base(%vreg44:92))
101 ( 88 ): %rdi:23 = MOVrr64 Register(%vreg42:90)
102 ( 89 ): %rsi:22 = MOVrr64 Register(%vreg45:93)
103 ( 90 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
104 ( 91 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_sub>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
105 ( 92 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
106 ( 93 ): %vreg46:94 = Copy Register(%rax:16)
107 ( 94 ): %rdi:23 = MOVrr64 Register(%vreg46:94)
108 ( 95 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
109 ( 96 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_normalize>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
110 ( 97 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
111 ( 98 ): %vreg47:95 = Copy Register(%rax:16)
112 ( 99 ): MOVmr64 Mem(Base(%vreg41:89)), Register(%vreg47:95)
113 (100 ): %vreg48:96 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
114 (101 ): %vreg49:97 = Copy Register(%vreg48:96)
115 (153 ): %vreg49:97 = ADDr64i32 Register(%vreg49:97), Constant(i32 20)
116 (102 ): %vreg50:98 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
117 (103 ): %vreg51:99 = Copy Register(%vreg50:98)
118 (154 ): %vreg51:99 = ADDr64i32 Register(%vreg51:99), Constant(i32 16)
119 (104 ): %vreg52:100 = MOVrm64 Mem(Base(%vreg51:99))
120 (105 ): %vreg53:101 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
121 (106 ): %vreg54:102 = MOVrm64 Mem(Base(%vreg41:89))
122 (107 ): %rdi:23 = MOVrr64 Register(%vreg53:101)
123 (108 ): %rsi:22 = MOVrr64 Register(%vreg54:102)
124 (109 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
125 (110 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
126 (111 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
127 (112 ): %vreg55:103 = Copy Register(%xmm0:32)
128 (113 ): %xmm0:32 = MOVSDrr Register(%vreg55:103)
129 (114 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.1)
130 (115 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
131 (116 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
132 (117 ): %xmm0:32 = CALL Mem(Address(addr<fn:clamp>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
133 (118 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
134 (119 ): %vreg56:104 = Copy Register(%xmm0:32)
135 (120 ): %rdi:23 = MOVrr64 Register(%vreg52:100)
136 (121 ): %xmm1:33 = MOVSDrr Register(%vreg56:104)
137 (122 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
138 (123 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
139 (124 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
140 (125 ): %vreg57:105 = Copy Register(%rax:16)
141 (126 ): MOVmr64 Mem(Base(%vreg49:97)), Register(%vreg57:105)
142 (127 ): %vreg58:106 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
143 (128 ): %vreg59:107 = Copy Register(%vreg58:106)
144 (155 ): %vreg59:107 = ADDr64i32 Register(%vreg59:107), Constant(i32 28)
145 (129 ): MOVSDmr Mem(Base(%vreg59:107)), Register(%vreg0:48)
146 (130 ): %vreg60:108 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
147 (131 ): %vreg61:109 = MOVrm32 Mem(Base(%vreg60:108))
148 (132 ): %vreg62:110 = Copy Register(%vreg61:109)
149 (156 ): %vreg62:110 = ADDri32 Register(%vreg62:110), Constant(i32 1)
150 (133 ): MOVmr32 Mem(Base(%vreg60:108)), Register(%vreg62:110)
151 (134 ): %vreg63:111 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
152 (135 ): %vreg64:112 = Copy Register(%vreg63:111)
153 (157 ): %vreg64:112 = ADDr64i32 Register(%vreg64:112), Constant(i32 36)
154 (136 ): %vreg65:113 = MOVrm64 Mem(Base(%vreg36:84))
155 (137 ): MOVmr64 Mem(Base(%vreg64:112)), Register(%vreg65:113)
156 (138 ): %eax:0 = MOVri32 Constant(i32 0)
157 (139 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Sphere_intersect, ty: functy:28):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg22:70, %rsi:22, %vreg16:64, %xmm0:32, %vreg15:63, %vreg14:62, %vreg9:57, %vreg11:59, %vreg0:48, %vreg25:73, %vreg3:51, %vreg19:67, %vreg17:65, %vreg5:53, %vreg23:71, %vreg10:58, %vreg13:61, %vreg1:49, %vreg2:50, %vreg21:69, %vreg12:60, %vreg20:68, %vreg24:72, %rdi:23, %vreg18:66, %rax:16, %vreg26:74, %vreg7:55, %vreg8:56, %vreg4:52, %vreg6:54}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 140 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 141 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 142 }, Id { idx: 24 }, Id { idx: 143 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 144 }, Id { idx: 37 }, Id { idx: 145 }, Id { idx: 38 }, Id { idx: 146 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 147 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }] } })
 0  ( 0  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 1  ( 1  ): %vreg2:50 = MOVrm64 Mem(Base(%vreg1:49))
 2  ( 2  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
 3  ( 3  ): %vreg4:52 = Copy Register(%vreg3:51)
 4  (140 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 5  ( 4  ): %vreg5:53 = MOVrm64 Mem(Base(%vreg4:52))
 6  ( 5  ): %rdi:23 = MOVrr64 Register(%vreg2:50)
 7  ( 6  ): %rsi:22 = MOVrr64 Register(%vreg5:53)
 8  ( 7  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 9  ( 8  ): %rax:16 = CALL Mem(Address(addr<fn:Vec_sub>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 10 ( 9  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 11 ( 10 ): %vreg6:54 = Copy Register(%rax:16)
 12 ( 11 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)), Register(%vreg6:54)
 13 ( 12 ): %vreg7:55 = MOVSDrm64 Constant(f64 0)
 14 ( 13 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 15 ( 14 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 16 ( 15 ): %vreg10:58 = Copy Register(%vreg9:57)
 17 (141 ): %vreg10:58 = ADDr64i32 Register(%vreg10:58), Constant(i32 8)
 18 ( 16 ): %vreg11:59 = MOVrm64 Mem(Base(%vreg10:58))
 19 ( 17 ): %rdi:23 = MOVrr64 Register(%vreg8:56)
 20 ( 18 ): %rsi:22 = MOVrr64 Register(%vreg11:59)
 21 ( 19 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 20 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 23 ( 21 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 24 ( 22 ): %vreg12:60 = Copy Register(%xmm0:32)
 25 ( 23 ): %vreg13:61 = Copy Register(%vreg7:55)
 26 (142 ): %vreg13:61 = SUBSDrr Register(%vreg13:61), Register(%vreg12:60)
 27 ( 24 ): %vreg14:62 = Copy Register(%vreg12:60)
 28 (143 ): %vreg14:62 = MULSDrr Register(%vreg14:62), Register(%vreg12:60)
 29 ( 25 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 30 ( 26 ): %vreg16:64 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>))
 31 ( 27 ): %rdi:23 = MOVrr64 Register(%vreg15:63)
 32 ( 28 ): %rsi:22 = MOVrr64 Register(%vreg16:64)
 33 ( 29 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 34 ( 30 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 35 ( 31 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 36 ( 32 ): %vreg17:65 = Copy Register(%xmm0:32)
 37 ( 33 ): %vreg18:66 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
 38 ( 34 ): %vreg19:67 = MOVSDrm Mem(Base(%vreg18:66))
 39 ( 35 ): %vreg20:68 = MOVSDrm Mem(Base(%vreg18:66))
 40 ( 36 ): %vreg21:69 = Copy Register(%vreg19:67)
 41 (144 ): %vreg21:69 = MULSDrr Register(%vreg21:69), Register(%vreg20:68)
 42 ( 37 ): %vreg22:70 = Copy Register(%vreg17:65)
 43 (145 ): %vreg22:70 = SUBSDrr Register(%vreg22:70), Register(%vreg21:69)
 44 ( 38 ): %vreg23:71 = Copy Register(%vreg14:62)
 45 (146 ): %vreg23:71 = SUBSDrr Register(%vreg23:71), Register(%vreg22:70)
 46 ( 39 ): %vreg24:72 = SQRTSDrr Register(%vreg23:71)
 47 ( 40 ): %vreg25:73 = Copy Register(%vreg13:61)
 48 (147 ): %vreg25:73 = SUBSDrr Register(%vreg25:73), Register(%vreg24:72)
 49 ( 41 ): %vreg0:48 = Copy Register(%vreg25:73)
 50 ( 42 ): %vreg26:74 = MOVSDrm64 Constant(f64 0)
 51 ( 43 ): UCOMISDrr Register(%vreg23:71), Register(%vreg26:74)
 52 ( 44 ): JBE Branch(Id { idx: 1 })
 53 ( 45 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 46 }, Id { idx: 47 }] } })
 54 ( 46 ): %eax:0 = MOVri32 Constant(i32 0)
 55 ( 47 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg27:75}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }] } })
 56 ( 48 ): %vreg27:75 = MOVSDrm64 Constant(f64 0.0001)
 57 ( 49 ): UCOMISDrr Register(%vreg0:48), Register(%vreg27:75)
 58 ( 50 ): JBE Branch(Id { idx: 3 })
 59 ( 51 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 52 }, Id { idx: 53 }] } })
 60 ( 52 ): %eax:0 = MOVri32 Constant(i32 0)
 61 ( 53 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg30:78, %vreg28:76, %vreg29:77}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 2 }], succ: [Id { idx: 5 }, Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 54 }, Id { idx: 55 }, Id { idx: 148 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }] } })
 62 ( 54 ): %vreg28:76 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 63 ( 55 ): %vreg29:77 = Copy Register(%vreg28:76)
 64 (148 ): %vreg29:77 = ADDr64i32 Register(%vreg29:77), Constant(i32 28)
 65 ( 56 ): %vreg30:78 = MOVSDrm Mem(Base(%vreg29:77))
 66 ( 57 ): UCOMISDrr Register(%vreg30:78), Register(%vreg0:48)
 67 ( 58 ): JBE Branch(Id { idx: 5 })
 68 ( 59 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 60 }, Id { idx: 61 }] } })
 69 ( 60 ): %eax:0 = MOVri32 Constant(i32 0)
 70 ( 61 ): RET 
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg46:94, %vreg64:112, %vreg58:106, %vreg65:113, %vreg49:97, %vreg48:96, %rsi:22, %vreg60:108, %vreg62:110, %vreg52:100, %vreg57:105, %xmm0:32, %xmm1:33, %vreg32:80, %vreg54:102, %vreg33:81, %vreg34:82, %vreg35:83, %vreg36:84, %vreg38:86, %vreg40:88, %vreg41:89, %vreg31:79, %vreg55:103, %vreg42:90, %vreg53:101, %vreg63:111, %vreg39:87, %vreg61:109, %vreg45:93, %vreg59:107, %vreg50:98, %vreg47:95, %vreg51:99, %vreg37:85, %rdi:23, %rax:16, %vreg43:91, %xmm2:34, %eax:0, %vreg44:92, %vreg56:104}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 62 }, Id { idx: 63 }, Id { idx: 149 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 150 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 151 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 152 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 153 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 154 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }, Id { idx: 117 }, Id { idx: 118 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 155 }, Id { idx: 129 }, Id { idx: 130 }, Id { idx: 131 }, Id { idx: 132 }, Id { idx: 156 }, Id { idx: 133 }, Id { idx: 134 }, Id { idx: 135 }, Id { idx: 157 }, Id { idx: 136 }, Id { idx: 137 }, Id { idx: 138 }, Id { idx: 139 }] } })
 71 ( 62 ): %vreg31:79 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 72 ( 63 ): %vreg32:80 = Copy Register(%vreg31:79)
 73 (149 ): %vreg32:80 = ADDr64i32 Register(%vreg32:80), Constant(i32 4)
 74 ( 64 ): %vreg33:81 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 75 ( 65 ): %vreg34:82 = MOVrm64 Mem(Base(%vreg33:81))
 76 ( 66 ): %vreg35:83 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 77 ( 67 ): %vreg36:84 = Copy Register(%vreg35:83)
 78 (150 ): %vreg36:84 = ADDr64i32 Register(%vreg36:84), Constant(i32 8)
 79 ( 68 ): %vreg37:85 = MOVrm64 Mem(Base(%vreg36:84))
 80 ( 69 ): %rdi:23 = MOVrr64 Register(%vreg37:85)
 81 ( 70 ): %xmm1:33 = MOVSDrr Register(%vreg0:48)
 82 ( 71 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 83 ( 72 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 84 ( 73 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 85 ( 74 ): %vreg38:86 = Copy Register(%rax:16)
 86 ( 75 ): %rdi:23 = MOVrr64 Register(%vreg34:82)
 87 ( 76 ): %rsi:22 = MOVrr64 Register(%vreg38:86)
 88 ( 77 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 89 ( 78 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 90 ( 79 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 91 ( 80 ): %vreg39:87 = Copy Register(%rax:16)
 92 ( 81 ): MOVmr64 Mem(Base(%vreg32:80)), Register(%vreg39:87)
 93 ( 82 ): %vreg40:88 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 94 ( 83 ): %vreg41:89 = Copy Register(%vreg40:88)
 95 (151 ): %vreg41:89 = ADDr64i32 Register(%vreg41:89), Constant(i32 12)
 96 ( 84 ): %vreg42:90 = MOVrm64 Mem(Base(%vreg32:80))
 97 ( 85 ): %vreg43:91 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
 98 ( 86 ): %vreg44:92 = Copy Register(%vreg43:91)
 99 (152 ): %vreg44:92 = ADDr64i32 Register(%vreg44:92), Constant(i32 8)
100 ( 87 ): %vreg45:93 = MOVrm64 Mem(Base(%vreg44:92))
101 ( 88 ): %rdi:23 = MOVrr64 Register(%vreg42:90)
102 ( 89 ): %rsi:22 = MOVrr64 Register(%vreg45:93)
103 ( 90 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
104 ( 91 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_sub>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
105 ( 92 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
106 ( 93 ): %vreg46:94 = Copy Register(%rax:16)
107 ( 94 ): %rdi:23 = MOVrr64 Register(%vreg46:94)
108 ( 95 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
109 ( 96 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_normalize>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
110 ( 97 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
111 ( 98 ): %vreg47:95 = Copy Register(%rax:16)
112 ( 99 ): MOVmr64 Mem(Base(%vreg41:89)), Register(%vreg47:95)
113 (100 ): %vreg48:96 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
114 (101 ): %vreg49:97 = Copy Register(%vreg48:96)
115 (153 ): %vreg49:97 = ADDr64i32 Register(%vreg49:97), Constant(i32 20)
116 (102 ): %vreg50:98 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>))
117 (103 ): %vreg51:99 = Copy Register(%vreg50:98)
118 (154 ): %vreg51:99 = ADDr64i32 Register(%vreg51:99), Constant(i32 16)
119 (104 ): %vreg52:100 = MOVrm64 Mem(Base(%vreg51:99))
120 (105 ): %vreg53:101 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
121 (106 ): %vreg54:102 = MOVrm64 Mem(Base(%vreg41:89))
122 (107 ): %rdi:23 = MOVrr64 Register(%vreg53:101)
123 (108 ): %rsi:22 = MOVrr64 Register(%vreg54:102)
124 (109 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
125 (110 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
126 (111 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
127 (112 ): %vreg55:103 = Copy Register(%xmm0:32)
128 (113 ): %xmm0:32 = MOVSDrr Register(%vreg55:103)
129 (114 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.1)
130 (115 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
131 (116 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
132 (117 ): %xmm0:32 = CALL Mem(Address(addr<fn:clamp>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
133 (118 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
134 (119 ): %vreg56:104 = Copy Register(%xmm0:32)
135 (120 ): %rdi:23 = MOVrr64 Register(%vreg52:100)
136 (121 ): %xmm1:33 = MOVSDrr Register(%vreg56:104)
137 (122 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
138 (123 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
139 (124 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
140 (125 ): %vreg57:105 = Copy Register(%rax:16)
141 (126 ): MOVmr64 Mem(Base(%vreg49:97)), Register(%vreg57:105)
142 (127 ): %vreg58:106 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
143 (128 ): %vreg59:107 = Copy Register(%vreg58:106)
144 (155 ): %vreg59:107 = ADDr64i32 Register(%vreg59:107), Constant(i32 28)
145 (129 ): MOVSDmr Mem(Base(%vreg59:107)), Register(%vreg0:48)
146 (130 ): %vreg60:108 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
147 (131 ): %vreg61:109 = MOVrm32 Mem(Base(%vreg60:108))
148 (132 ): %vreg62:110 = Copy Register(%vreg61:109)
149 (156 ): %vreg62:110 = ADDri32 Register(%vreg62:110), Constant(i32 1)
150 (133 ): MOVmr32 Mem(Base(%vreg60:108)), Register(%vreg62:110)
151 (134 ): %vreg63:111 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
152 (135 ): %vreg64:112 = Copy Register(%vreg63:111)
153 (157 ): %vreg64:112 = ADDr64i32 Register(%vreg64:112), Constant(i32 36)
154 (136 ): %vreg65:113 = MOVrm64 Mem(Base(%vreg36:84))
155 (137 ): MOVmr64 Mem(Base(%vreg64:112)), Register(%vreg65:113)
156 (138 ): %eax:0 = MOVri32 Constant(i32 0)
157 (139 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Plane_new, ty: functy:29):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg9:57, %vreg5:53, %rax:16, %vreg7:55, %edi:7, %vreg1:49, %vreg3:51, %vreg4:52, %vreg6:54, %vreg8:56, %vreg2:50, %vreg0:48}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 8  ( 8  ): MOVmr64 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 20 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 21 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 16)
 17 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>))
 18 ( 16 ): MOVmr64 Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 20 ( 18 ): %rax:16 = MOVrr64 Register(%vreg9:57)
 21 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Plane_new, ty: functy:29):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg9:57, %vreg5:53, %rax:16, %vreg7:55, %edi:7, %vreg1:49, %vreg3:51, %vreg4:52, %vreg6:54, %vreg8:56, %vreg2:50, %vreg0:48}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 7  ( 7  ): %vreg2:50 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 8  ( 8  ): MOVmr64 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 9  ( 9  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 10 ( 10 ): %vreg4:52 = Copy Register(%vreg3:51)
 11 ( 20 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 12 ( 11 ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 13 ( 12 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg5:53)
 14 ( 13 ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 15 ( 14 ): %vreg7:55 = Copy Register(%vreg6:54)
 16 ( 21 ): %vreg7:55 = ADDr64i32 Register(%vreg7:55), Constant(i32 16)
 17 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>))
 18 ( 16 ): MOVmr64 Mem(Base(%vreg7:55)), Register(%vreg8:56)
 19 ( 17 ): %vreg9:57 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>))
 20 ( 18 ): %rax:16 = MOVrr64 Register(%vreg9:57)
 21 ( 19 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Plane_intersect, ty: functy:30):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg12:60, %vreg32:80, %vreg25:73, %vreg16:64, %xmm0:32, %vreg27:75, %vreg23:71, %vreg28:76, %vreg13:61, %vreg24:72, %vreg14:62, %vreg18:66, %vreg19:67, %vreg20:68, %vreg21:69, %vreg26:74, %vreg22:70, %vreg31:79, %vreg0:48, %vreg15:63, %vreg29:77, %vreg33:81, %vreg30:78, %vreg17:65, %rsi:22}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 220 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 221 }, Id { idx: 23 }, Id { idx: 222 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 223 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 224 }, Id { idx: 35 }, Id { idx: 225 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }] } })
 0  ( 0  ): %vreg12:60 = MOVSDrm64 Constant(f64 0)
 1  ( 1  ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 2  ( 2  ): %vreg14:62 = MOVrm64 Mem(Base(%vreg13:61))
 3  ( 3  ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
 4  ( 4  ): %vreg16:64 = Copy Register(%vreg15:63)
 5  (220 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 8)
 6  ( 5  ): %vreg17:65 = MOVrm64 Mem(Base(%vreg16:64))
 7  ( 6  ): %rdi:23 = MOVrr64 Register(%vreg14:62)
 8  ( 7  ): %rsi:22 = MOVrr64 Register(%vreg17:65)
 9  ( 8  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 10 ( 9  ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 11 ( 10 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 12 ( 11 ): %vreg18:66 = Copy Register(%xmm0:32)
 13 ( 12 ): %vreg19:67 = MOVSDrm64 Constant(f64 0)
 14 ( 13 ): %vreg20:68 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
 15 ( 14 ): %vreg21:69 = MOVrm64 Mem(Base(%vreg20:68))
 16 ( 15 ): %vreg22:70 = MOVrm64 Mem(Base(%vreg16:64))
 17 ( 16 ): %rdi:23 = MOVrr64 Register(%vreg21:69)
 18 ( 17 ): %rsi:22 = MOVrr64 Register(%vreg22:70)
 19 ( 18 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 20 ( 19 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 21 ( 20 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 21 ): %vreg23:71 = Copy Register(%xmm0:32)
 23 ( 22 ): %vreg24:72 = Copy Register(%vreg19:67)
 24 (221 ): %vreg24:72 = SUBSDrr Register(%vreg24:72), Register(%vreg23:71)
 25 ( 23 ): %vreg25:73 = Copy Register(%vreg18:66)
 26 (222 ): %vreg25:73 = ADDSDrr Register(%vreg25:73), Register(%vreg24:72)
 27 ( 24 ): %vreg26:74 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 28 ( 25 ): %vreg27:75 = Copy Register(%vreg26:74)
 29 (223 ): %vreg27:75 = ADDr64i32 Register(%vreg27:75), Constant(i32 8)
 30 ( 26 ): %vreg28:76 = MOVrm64 Mem(Base(%vreg27:75))
 31 ( 27 ): %vreg29:77 = MOVrm64 Mem(Base(%vreg16:64))
 32 ( 28 ): %rdi:23 = MOVrr64 Register(%vreg28:76)
 33 ( 29 ): %rsi:22 = MOVrr64 Register(%vreg29:77)
 34 ( 30 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 35 ( 31 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 36 ( 32 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 37 ( 33 ): %vreg30:78 = Copy Register(%xmm0:32)
 38 ( 34 ): %vreg31:79 = Copy Register(%vreg25:73)
 39 (224 ): %vreg31:79 = DIVSDrr Register(%vreg31:79), Register(%vreg30:78)
 40 ( 35 ): %vreg32:80 = Copy Register(%vreg12:60)
 41 (225 ): %vreg32:80 = SUBSDrr Register(%vreg32:80), Register(%vreg31:79)
 42 ( 36 ): %vreg0:48 = Copy Register(%vreg32:80)
 43 ( 37 ): %vreg33:81 = MOVSDrm64 Constant(f64 0.0001)
 44 ( 38 ): UCOMISDrr Register(%vreg0:48), Register(%vreg33:81)
 45 ( 39 ): JBE Branch(Id { idx: 1 })
 46 ( 40 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 41 }, Id { idx: 42 }] } })
 47 ( 41 ): %eax:0 = MOVri32 Constant(i32 0)
 48 ( 42 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg35:83, %vreg36:84, %vreg34:82}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 43 }, Id { idx: 44 }, Id { idx: 226 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }] } })
 49 ( 43 ): %vreg34:82 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 50 ( 44 ): %vreg35:83 = Copy Register(%vreg34:82)
 51 (226 ): %vreg35:83 = ADDr64i32 Register(%vreg35:83), Constant(i32 28)
 52 ( 45 ): %vreg36:84 = MOVSDrm Mem(Base(%vreg35:83))
 53 ( 46 ): UCOMISDrr Register(%vreg36:84), Register(%vreg0:48)
 54 ( 47 ): JBE Branch(Id { idx: 3 })
 55 ( 48 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 49 }, Id { idx: 50 }] } })
 56 ( 49 ): %eax:0 = MOVri32 Constant(i32 0)
 57 ( 50 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg56:104, %rax:16, %vreg52:100, %vreg53:101, %vreg60:108, %vreg64:112, %xmm0:32, %vreg46:94, %vreg1:49, %vreg40:88, %vreg58:106, %vreg68:116, %vreg50:98, %vreg37:85, %vreg44:92, %vreg45:93, %vreg70:118, %vreg71:119, %vreg67:115, %vreg62:110, %vreg66:114, %xmm2:34, %vreg61:109, %vreg43:91, %vreg48:96, %vreg51:99, %vreg39:87, %vreg38:86, %vreg74:122, %vreg3:51, %vreg59:107, %vreg65:113, %vreg69:117, %vreg54:102, %vreg49:97, %vreg55:103, %vreg42:90, %vreg47:95, %vreg41:89, %vreg75:123, %vreg72:120, %xmm1:33, %vreg73:121, %vreg76:124, %vreg57:105, %vreg2:50, %vreg77:125, %vreg63:111, %rsi:22}, live_in: {%vreg0:48}, live_out: {%vreg0:48, %vreg1:49, %vreg2:50, %vreg3:51} } }, pred: [Id { idx: 2 }], succ: [Id { idx: 5 }, Id { idx: 8 }], iseq: RefCell { value: [Id { idx: 51 }, Id { idx: 52 }, Id { idx: 227 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 228 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 229 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 230 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 231 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 232 }, Id { idx: 106 }, Id { idx: 233 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 234 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 235 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 236 }, Id { idx: 116 }, Id { idx: 117 }, Id { idx: 118 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 237 }, Id { idx: 123 }, Id { idx: 238 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }] } })
 58 ( 51 ): %vreg37:85 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 59 ( 52 ): %vreg38:86 = Copy Register(%vreg37:85)
 60 (227 ): %vreg38:86 = ADDr64i32 Register(%vreg38:86), Constant(i32 4)
 61 ( 53 ): %vreg39:87 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 62 ( 54 ): %vreg40:88 = MOVrm64 Mem(Base(%vreg39:87))
 63 ( 55 ): %vreg41:89 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 64 ( 56 ): %vreg42:90 = Copy Register(%vreg41:89)
 65 (228 ): %vreg42:90 = ADDr64i32 Register(%vreg42:90), Constant(i32 8)
 66 ( 57 ): %vreg43:91 = MOVrm64 Mem(Base(%vreg42:90))
 67 ( 58 ): %rdi:23 = MOVrr64 Register(%vreg43:91)
 68 ( 59 ): %xmm1:33 = MOVSDrr Register(%vreg0:48)
 69 ( 60 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 70 ( 61 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 71 ( 62 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 72 ( 63 ): %vreg44:92 = Copy Register(%rax:16)
 73 ( 64 ): %rdi:23 = MOVrr64 Register(%vreg40:88)
 74 ( 65 ): %rsi:22 = MOVrr64 Register(%vreg44:92)
 75 ( 66 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 76 ( 67 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 77 ( 68 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 78 ( 69 ): %vreg45:93 = Copy Register(%rax:16)
 79 ( 70 ): MOVmr64 Mem(Base(%vreg38:86)), Register(%vreg45:93)
 80 ( 71 ): %vreg46:94 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 81 ( 72 ): %vreg47:95 = Copy Register(%vreg46:94)
 82 (229 ): %vreg47:95 = ADDr64i32 Register(%vreg47:95), Constant(i32 12)
 83 ( 73 ): %vreg48:96 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
 84 ( 74 ): %vreg49:97 = Copy Register(%vreg48:96)
 85 (230 ): %vreg49:97 = ADDr64i32 Register(%vreg49:97), Constant(i32 8)
 86 ( 75 ): %vreg50:98 = MOVrm64 Mem(Base(%vreg49:97))
 87 ( 76 ): MOVmr64 Mem(Base(%vreg47:95)), Register(%vreg50:98)
 88 ( 77 ): %vreg51:99 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 89 ( 78 ): %vreg52:100 = MOVrm64 Mem(Base(%vreg47:95))
 90 ( 79 ): %rdi:23 = MOVrr64 Register(%vreg51:99)
 91 ( 80 ): %rsi:22 = MOVrr64 Register(%vreg52:100)
 92 ( 81 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 93 ( 82 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 94 ( 83 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 95 ( 84 ): %vreg53:101 = Copy Register(%xmm0:32)
 96 ( 85 ): %xmm0:32 = MOVSDrr Register(%vreg53:101)
 97 ( 86 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.1)
 98 ( 87 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
 99 ( 88 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
100 ( 89 ): %xmm0:32 = CALL Mem(Address(addr<fn:clamp>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
101 ( 90 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
102 ( 91 ): %vreg54:102 = Copy Register(%xmm0:32)
103 ( 92 ): %vreg1:49 = Copy Register(%vreg54:102)
104 ( 93 ): %vreg55:103 = MOVrm64 Mem(Base(%vreg38:86))
105 ( 94 ): %vreg56:104 = MOVSDrm Mem(Base(%vreg55:103))
106 ( 95 ): %vreg57:105 = MOVrm64 Mem(Base(%vreg38:86))
107 ( 96 ): %vreg58:106 = MOVSDrm Mem(Base(%vreg57:105))
108 ( 97 ): %vreg59:107 = MOVSDrm64 Constant(f64 2)
109 ( 98 ): %vreg60:108 = Copy Register(%vreg58:106)
110 (231 ): %vreg60:108 = DIVSDrr Register(%vreg60:108), Register(%vreg59:107)
111 ( 99 ): %xmm0:32 = MOVSDrr Register(%vreg60:108)
112 (100 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
113 (101 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.floor.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
114 (102 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
115 (103 ): %vreg61:109 = Copy Register(%xmm0:32)
116 (104 ): %vreg62:110 = MOVSDrm64 Constant(f64 2)
117 (105 ): %vreg63:111 = Copy Register(%vreg61:109)
118 (232 ): %vreg63:111 = MULSDrr Register(%vreg63:111), Register(%vreg62:110)
119 (106 ): %vreg64:112 = Copy Register(%vreg56:104)
120 (233 ): %vreg64:112 = SUBSDrr Register(%vreg64:112), Register(%vreg63:111)
121 (107 ): %vreg2:50 = Copy Register(%vreg64:112)
122 (108 ): %vreg65:113 = MOVrm64 Mem(Base(%vreg38:86))
123 (109 ): %vreg66:114 = Copy Register(%vreg65:113)
124 (234 ): %vreg66:114 = ADDr64i32 Register(%vreg66:114), Constant(i32 16)
125 (110 ): %vreg67:115 = MOVSDrm Mem(Base(%vreg66:114))
126 (111 ): %vreg68:116 = MOVrm64 Mem(Base(%vreg38:86))
127 (112 ): %vreg69:117 = Copy Register(%vreg68:116)
128 (235 ): %vreg69:117 = ADDr64i32 Register(%vreg69:117), Constant(i32 16)
129 (113 ): %vreg70:118 = MOVSDrm Mem(Base(%vreg69:117))
130 (114 ): %vreg71:119 = MOVSDrm64 Constant(f64 2)
131 (115 ): %vreg72:120 = Copy Register(%vreg70:118)
132 (236 ): %vreg72:120 = DIVSDrr Register(%vreg72:120), Register(%vreg71:119)
133 (116 ): %xmm0:32 = MOVSDrr Register(%vreg72:120)
134 (117 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
135 (118 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.floor.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
136 (119 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
137 (120 ): %vreg73:121 = Copy Register(%xmm0:32)
138 (121 ): %vreg74:122 = MOVSDrm64 Constant(f64 2)
139 (122 ): %vreg75:123 = Copy Register(%vreg73:121)
140 (237 ): %vreg75:123 = MULSDrr Register(%vreg75:123), Register(%vreg74:122)
141 (123 ): %vreg76:124 = Copy Register(%vreg67:115)
142 (238 ): %vreg76:124 = SUBSDrr Register(%vreg76:124), Register(%vreg75:123)
143 (124 ): %vreg3:51 = Copy Register(%vreg76:124)
144 (125 ): %vreg77:125 = MOVSDrm64 Constant(f64 1)
145 (126 ): UCOMISDrr Register(%vreg2:50), Register(%vreg77:125)
146 (127 ): JA Branch(Id { idx: 5 })
147 (128 ): JMP Branch(Id { idx: 8 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg78:126, %vreg81:129}, live_in: {%vreg0:48, %vreg3:51, %vreg1:49}, live_out: {%vreg0:48, %vreg1:49, %vreg81:129} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }, Id { idx: 7 }], iseq: RefCell { value: [Id { idx: 129 }, Id { idx: 130 }, Id { idx: 211 }, Id { idx: 131 }, Id { idx: 132 }] } })
148 (129 ): %vreg78:126 = MOVSDrm64 Constant(f64 1)
149 (130 ): UCOMISDrr Register(%vreg3:51), Register(%vreg78:126)
150 (211 ): %vreg81:129 = Copy Register(%vreg1:49)
151 (131 ): JA Branch(Id { idx: 6 })
152 (132 ): JMP Branch(Id { idx: 7 })
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg81:129, %vreg4:52, %vreg80:128, %vreg79:127}, live_in: {%vreg0:48, %vreg1:49}, live_out: {%vreg0:48, %vreg81:129} } }, pred: [Id { idx: 5 }], succ: [Id { idx: 7 }], iseq: RefCell { value: [Id { idx: 133 }, Id { idx: 134 }, Id { idx: 239 }, Id { idx: 135 }, Id { idx: 210 }, Id { idx: 136 }] } })
153 (133 ): %vreg79:127 = MOVSDrm64 Constant(f64 0.5)
154 (134 ): %vreg80:128 = Copy Register(%vreg1:49)
155 (239 ): %vreg80:128 = MULSDrr Register(%vreg80:128), Register(%vreg79:127)
156 (135 ): %vreg4:52 = Copy Register(%vreg80:128)
157 (210 ): %vreg81:129 = Copy Register(%vreg4:52)
158 (136 ): JMP Branch(Id { idx: 7 })
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg88:136, %vreg5:53}, live_in: {%vreg0:48, %vreg81:129}, live_out: {%vreg0:48, %vreg88:136} } }, pred: [Id { idx: 5 }, Id { idx: 6 }], succ: [Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 138 }, Id { idx: 216 }, Id { idx: 139 }] } })
159 (138 ): %vreg5:53 = Copy Register(%vreg81:129)
160 (216 ): %vreg88:136 = Copy Register(%vreg5:53)
161 (139 ): JMP Branch(Id { idx: 13 })
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg87:135, %vreg82:130}, live_in: {%vreg0:48, %vreg1:49, %vreg2:50, %vreg3:51}, live_out: {%vreg87:135, %vreg1:49, %vreg0:48, %vreg3:51} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 9 }, Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 140 }, Id { idx: 141 }, Id { idx: 215 }, Id { idx: 142 }, Id { idx: 143 }] } })
162 (140 ): %vreg82:130 = MOVSDrm64 Constant(f64 1)
163 (141 ): UCOMISDrr Register(%vreg2:50), Register(%vreg82:130)
164 (215 ): %vreg87:135 = Copy Register(%vreg1:49)
165 (142 ): JB Branch(Id { idx: 9 })
166 (143 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg86:134, %vreg83:131}, live_in: {%vreg0:48, %vreg3:51, %vreg1:49}, live_out: {%vreg0:48, %vreg1:49, %vreg86:134} } }, pred: [Id { idx: 8 }], succ: [Id { idx: 10 }, Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 144 }, Id { idx: 145 }, Id { idx: 213 }, Id { idx: 146 }, Id { idx: 147 }] } })
167 (144 ): %vreg83:131 = MOVSDrm64 Constant(f64 1)
168 (145 ): UCOMISDrr Register(%vreg3:51), Register(%vreg83:131)
169 (213 ): %vreg86:134 = Copy Register(%vreg1:49)
170 (146 ): JB Branch(Id { idx: 10 })
171 (147 ): JMP Branch(Id { idx: 11 })
MachineBasicBlock #10 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg84:132, %vreg85:133, %vreg6:54, %vreg86:134}, live_in: {%vreg0:48, %vreg1:49}, live_out: {%vreg0:48, %vreg86:134} } }, pred: [Id { idx: 9 }], succ: [Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 148 }, Id { idx: 149 }, Id { idx: 240 }, Id { idx: 150 }, Id { idx: 212 }, Id { idx: 151 }] } })
172 (148 ): %vreg84:132 = MOVSDrm64 Constant(f64 0.5)
173 (149 ): %vreg85:133 = Copy Register(%vreg1:49)
174 (240 ): %vreg85:133 = MULSDrr Register(%vreg85:133), Register(%vreg84:132)
175 (150 ): %vreg6:54 = Copy Register(%vreg85:133)
176 (212 ): %vreg86:134 = Copy Register(%vreg6:54)
177 (151 ): JMP Branch(Id { idx: 11 })
MachineBasicBlock #11 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg7:55, %vreg87:135}, live_in: {%vreg0:48, %vreg86:134}, live_out: {%vreg87:135, %vreg0:48} } }, pred: [Id { idx: 9 }, Id { idx: 10 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 153 }, Id { idx: 214 }, Id { idx: 154 }] } })
178 (153 ): %vreg7:55 = Copy Register(%vreg86:134)
179 (214 ): %vreg87:135 = Copy Register(%vreg7:55)
180 (154 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #12 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg8:56, %vreg88:136}, live_in: {%vreg87:135, %vreg0:48}, live_out: {%vreg0:48, %vreg88:136} } }, pred: [Id { idx: 8 }, Id { idx: 11 }], succ: [Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 156 }, Id { idx: 217 }, Id { idx: 157 }] } })
181 (156 ): %vreg8:56 = Copy Register(%vreg87:135)
182 (217 ): %vreg88:136 = Copy Register(%vreg8:56)
183 (157 ): JMP Branch(Id { idx: 13 })
MachineBasicBlock #13 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg89:137, %vreg94:142, %vreg92:140, %vreg105:153, %vreg90:138, %vreg10:58, %xmm0:32, %vreg95:143, %vreg93:141, %vreg91:139, %vreg9:57}, live_in: {%vreg0:48, %vreg88:136}, live_out: {%vreg0:48, %vreg10:58, %vreg9:57, %vreg105:153} } }, pred: [Id { idx: 7 }, Id { idx: 12 }], succ: [Id { idx: 14 }, Id { idx: 15 }], iseq: RefCell { value: [Id { idx: 159 }, Id { idx: 160 }, Id { idx: 161 }, Id { idx: 241 }, Id { idx: 162 }, Id { idx: 163 }, Id { idx: 242 }, Id { idx: 164 }, Id { idx: 165 }, Id { idx: 166 }, Id { idx: 167 }, Id { idx: 168 }, Id { idx: 169 }, Id { idx: 170 }, Id { idx: 171 }, Id { idx: 172 }, Id { idx: 219 }, Id { idx: 173 }, Id { idx: 174 }] } })
184 (159 ): %vreg9:57 = Copy Register(%vreg88:136)
185 (160 ): %vreg89:137 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
186 (161 ): %vreg90:138 = Copy Register(%vreg89:137)
187 (241 ): %vreg90:138 = ADDr64i32 Register(%vreg90:138), Constant(i32 4)
188 (162 ): %vreg91:139 = MOVrm64 Mem(Base(%vreg90:138))
189 (163 ): %vreg92:140 = Copy Register(%vreg91:139)
190 (242 ): %vreg92:140 = ADDr64i32 Register(%vreg92:140), Constant(i32 16)
191 (164 ): %vreg93:141 = MOVSDrm Mem(Base(%vreg92:140))
192 (165 ): %xmm0:32 = MOVSDrr Register(%vreg93:141)
193 (166 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
194 (167 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.fabs.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
195 (168 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
196 (169 ): %vreg94:142 = Copy Register(%xmm0:32)
197 (170 ): %vreg10:58 = Copy Register(%vreg94:142)
198 (171 ): %vreg95:143 = MOVSDrm64 Constant(f64 25)
199 (172 ): UCOMISDrr Register(%vreg10:58), Register(%vreg95:143)
200 (219 ): %vreg105:153 = Copy Constant(f64 0)
201 (173 ): JB Branch(Id { idx: 14 })
202 (174 ): JMP Branch(Id { idx: 15 })
MachineBasicBlock #14 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg99:147, %vreg98:146, %vreg96:144, %vreg97:145, %vreg11:59, %vreg105:153}, live_in: {%vreg10:58, %vreg0:48, %vreg9:57}, live_out: {%vreg0:48, %vreg9:57, %vreg105:153} } }, pred: [Id { idx: 13 }], succ: [Id { idx: 15 }], iseq: RefCell { value: [Id { idx: 175 }, Id { idx: 176 }, Id { idx: 177 }, Id { idx: 243 }, Id { idx: 178 }, Id { idx: 244 }, Id { idx: 179 }, Id { idx: 218 }, Id { idx: 180 }] } })
203 (175 ): %vreg96:144 = MOVSDrm64 Constant(f64 1)
204 (176 ): %vreg97:145 = MOVSDrm64 Constant(f64 0.04)
205 (177 ): %vreg98:146 = Copy Register(%vreg10:58)
206 (243 ): %vreg98:146 = MULSDrr Register(%vreg98:146), Register(%vreg97:145)
207 (178 ): %vreg99:147 = Copy Register(%vreg96:144)
208 (244 ): %vreg99:147 = SUBSDrr Register(%vreg99:147), Register(%vreg98:146)
209 (179 ): %vreg11:59 = Copy Register(%vreg99:147)
210 (218 ): %vreg105:153 = Copy Register(%vreg11:59)
211 (180 ): JMP Branch(Id { idx: 15 })
MachineBasicBlock #15 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rax:16, %vreg107:155, %rdi:23, %vreg117:165, %vreg103:151, %vreg110:158, %vreg101:149, %vreg116:164, %eax:0, %vreg114:162, %vreg112:160, %vreg108:156, %vreg104:152, %xmm1:33, %vreg100:148, %vreg102:150, %vreg109:157, %vreg111:159, %vreg113:161, %vreg115:163, %vreg106:154}, live_in: {%vreg0:48, %vreg9:57, %vreg105:153}, live_out: {} } }, pred: [Id { idx: 13 }, Id { idx: 14 }], succ: [], iseq: RefCell { value: [Id { idx: 181 }, Id { idx: 182 }, Id { idx: 245 }, Id { idx: 183 }, Id { idx: 184 }, Id { idx: 246 }, Id { idx: 185 }, Id { idx: 187 }, Id { idx: 247 }, Id { idx: 188 }, Id { idx: 189 }, Id { idx: 190 }, Id { idx: 191 }, Id { idx: 192 }, Id { idx: 193 }, Id { idx: 194 }, Id { idx: 195 }, Id { idx: 196 }, Id { idx: 248 }, Id { idx: 197 }, Id { idx: 198 }, Id { idx: 199 }, Id { idx: 200 }, Id { idx: 249 }, Id { idx: 201 }, Id { idx: 202 }, Id { idx: 203 }, Id { idx: 250 }, Id { idx: 204 }, Id { idx: 205 }, Id { idx: 251 }, Id { idx: 206 }, Id { idx: 207 }, Id { idx: 208 }, Id { idx: 209 }] } })
212 (181 ): %vreg100:148 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
213 (182 ): %vreg101:149 = Copy Register(%vreg100:148)
214 (245 ): %vreg101:149 = ADDr64i32 Register(%vreg101:149), Constant(i32 20)
215 (183 ): %vreg102:150 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
216 (184 ): %vreg103:151 = Copy Register(%vreg102:150)
217 (246 ): %vreg103:151 = ADDr64i32 Register(%vreg103:151), Constant(i32 16)
218 (185 ): %vreg104:152 = MOVrm64 Mem(Base(%vreg103:151))
219 (187 ): %vreg106:154 = Copy Register(%vreg9:57)
220 (247 ): %vreg106:154 = MULSDrr Register(%vreg106:154), Register(%vreg105:153)
221 (188 ): %rdi:23 = MOVrr64 Register(%vreg104:152)
222 (189 ): %xmm1:33 = MOVSDrr Register(%vreg106:154)
223 (190 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
224 (191 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
225 (192 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
226 (193 ): %vreg107:155 = Copy Register(%rax:16)
227 (194 ): MOVmr64 Mem(Base(%vreg101:149)), Register(%vreg107:155)
228 (195 ): %vreg108:156 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
229 (196 ): %vreg109:157 = Copy Register(%vreg108:156)
230 (248 ): %vreg109:157 = ADDr64i32 Register(%vreg109:157), Constant(i32 28)
231 (197 ): MOVSDmr Mem(Base(%vreg109:157)), Register(%vreg0:48)
232 (198 ): %vreg110:158 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
233 (199 ): %vreg111:159 = MOVrm32 Mem(Base(%vreg110:158))
234 (200 ): %vreg112:160 = Copy Register(%vreg111:159)
235 (249 ): %vreg112:160 = ADDri32 Register(%vreg112:160), Constant(i32 1)
236 (201 ): MOVmr32 Mem(Base(%vreg110:158)), Register(%vreg112:160)
237 (202 ): %vreg113:161 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
238 (203 ): %vreg114:162 = Copy Register(%vreg113:161)
239 (250 ): %vreg114:162 = ADDr64i32 Register(%vreg114:162), Constant(i32 36)
240 (204 ): %vreg115:163 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
241 (205 ): %vreg116:164 = Copy Register(%vreg115:163)
242 (251 ): %vreg116:164 = ADDr64i32 Register(%vreg116:164), Constant(i32 8)
243 (206 ): %vreg117:165 = MOVrm64 Mem(Base(%vreg116:164))
244 (207 ): MOVmr64 Mem(Base(%vreg114:162)), Register(%vreg117:165)
245 (208 ): %eax:0 = MOVri32 Constant(i32 0)
246 (209 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Plane_intersect, ty: functy:30):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg12:60, %vreg32:80, %vreg25:73, %vreg16:64, %xmm0:32, %vreg27:75, %vreg23:71, %vreg28:76, %vreg13:61, %vreg24:72, %vreg14:62, %vreg18:66, %vreg19:67, %vreg20:68, %vreg21:69, %vreg26:74, %vreg22:70, %vreg31:79, %vreg0:48, %vreg15:63, %vreg29:77, %vreg33:81, %vreg30:78, %vreg17:65, %rsi:22}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 220 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 221 }, Id { idx: 23 }, Id { idx: 222 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 223 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 224 }, Id { idx: 35 }, Id { idx: 225 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }] } })
 0  ( 0  ): %vreg12:60 = MOVSDrm64 Constant(f64 0)
 1  ( 1  ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 2  ( 2  ): %vreg14:62 = MOVrm64 Mem(Base(%vreg13:61))
 3  ( 3  ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
 4  ( 4  ): %vreg16:64 = Copy Register(%vreg15:63)
 5  (220 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 8)
 6  ( 5  ): %vreg17:65 = MOVrm64 Mem(Base(%vreg16:64))
 7  ( 6  ): %rdi:23 = MOVrr64 Register(%vreg14:62)
 8  ( 7  ): %rsi:22 = MOVrr64 Register(%vreg17:65)
 9  ( 8  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 10 ( 9  ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 11 ( 10 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 12 ( 11 ): %vreg18:66 = Copy Register(%xmm0:32)
 13 ( 12 ): %vreg19:67 = MOVSDrm64 Constant(f64 0)
 14 ( 13 ): %vreg20:68 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
 15 ( 14 ): %vreg21:69 = MOVrm64 Mem(Base(%vreg20:68))
 16 ( 15 ): %vreg22:70 = MOVrm64 Mem(Base(%vreg16:64))
 17 ( 16 ): %rdi:23 = MOVrr64 Register(%vreg21:69)
 18 ( 17 ): %rsi:22 = MOVrr64 Register(%vreg22:70)
 19 ( 18 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 20 ( 19 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 21 ( 20 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 21 ): %vreg23:71 = Copy Register(%xmm0:32)
 23 ( 22 ): %vreg24:72 = Copy Register(%vreg19:67)
 24 (221 ): %vreg24:72 = SUBSDrr Register(%vreg24:72), Register(%vreg23:71)
 25 ( 23 ): %vreg25:73 = Copy Register(%vreg18:66)
 26 (222 ): %vreg25:73 = ADDSDrr Register(%vreg25:73), Register(%vreg24:72)
 27 ( 24 ): %vreg26:74 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 28 ( 25 ): %vreg27:75 = Copy Register(%vreg26:74)
 29 (223 ): %vreg27:75 = ADDr64i32 Register(%vreg27:75), Constant(i32 8)
 30 ( 26 ): %vreg28:76 = MOVrm64 Mem(Base(%vreg27:75))
 31 ( 27 ): %vreg29:77 = MOVrm64 Mem(Base(%vreg16:64))
 32 ( 28 ): %rdi:23 = MOVrr64 Register(%vreg28:76)
 33 ( 29 ): %rsi:22 = MOVrr64 Register(%vreg29:77)
 34 ( 30 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 35 ( 31 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 36 ( 32 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 37 ( 33 ): %vreg30:78 = Copy Register(%xmm0:32)
 38 ( 34 ): %vreg31:79 = Copy Register(%vreg25:73)
 39 (224 ): %vreg31:79 = DIVSDrr Register(%vreg31:79), Register(%vreg30:78)
 40 ( 35 ): %vreg32:80 = Copy Register(%vreg12:60)
 41 (225 ): %vreg32:80 = SUBSDrr Register(%vreg32:80), Register(%vreg31:79)
 42 ( 36 ): %vreg0:48 = Copy Register(%vreg32:80)
 43 ( 37 ): %vreg33:81 = MOVSDrm64 Constant(f64 0.0001)
 44 ( 38 ): UCOMISDrr Register(%vreg0:48), Register(%vreg33:81)
 45 ( 39 ): JBE Branch(Id { idx: 1 })
 46 ( 40 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 41 }, Id { idx: 42 }] } })
 47 ( 41 ): %eax:0 = MOVri32 Constant(i32 0)
 48 ( 42 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg35:83, %vreg36:84, %vreg34:82}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 43 }, Id { idx: 44 }, Id { idx: 226 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }] } })
 49 ( 43 ): %vreg34:82 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 50 ( 44 ): %vreg35:83 = Copy Register(%vreg34:82)
 51 (226 ): %vreg35:83 = ADDr64i32 Register(%vreg35:83), Constant(i32 28)
 52 ( 45 ): %vreg36:84 = MOVSDrm Mem(Base(%vreg35:83))
 53 ( 46 ): UCOMISDrr Register(%vreg36:84), Register(%vreg0:48)
 54 ( 47 ): JBE Branch(Id { idx: 3 })
 55 ( 48 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 49 }, Id { idx: 50 }] } })
 56 ( 49 ): %eax:0 = MOVri32 Constant(i32 0)
 57 ( 50 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg56:104, %rax:16, %vreg52:100, %vreg53:101, %vreg60:108, %vreg64:112, %xmm0:32, %vreg46:94, %vreg1:49, %vreg40:88, %vreg58:106, %vreg68:116, %vreg50:98, %vreg37:85, %vreg44:92, %vreg45:93, %vreg70:118, %vreg71:119, %vreg67:115, %vreg62:110, %vreg66:114, %xmm2:34, %vreg61:109, %vreg43:91, %vreg48:96, %vreg51:99, %vreg39:87, %vreg38:86, %vreg74:122, %vreg3:51, %vreg59:107, %vreg65:113, %vreg69:117, %vreg54:102, %vreg49:97, %vreg55:103, %vreg42:90, %vreg47:95, %vreg41:89, %vreg75:123, %vreg72:120, %xmm1:33, %vreg73:121, %vreg76:124, %vreg57:105, %vreg2:50, %vreg77:125, %vreg63:111, %rsi:22}, live_in: {%vreg0:48}, live_out: {%vreg0:48, %vreg1:49, %vreg2:50, %vreg3:51} } }, pred: [Id { idx: 2 }], succ: [Id { idx: 5 }, Id { idx: 8 }], iseq: RefCell { value: [Id { idx: 51 }, Id { idx: 52 }, Id { idx: 227 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 228 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 229 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 230 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 231 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 232 }, Id { idx: 106 }, Id { idx: 233 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 234 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 235 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 236 }, Id { idx: 116 }, Id { idx: 117 }, Id { idx: 118 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 237 }, Id { idx: 123 }, Id { idx: 238 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }] } })
 58 ( 51 ): %vreg37:85 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 59 ( 52 ): %vreg38:86 = Copy Register(%vreg37:85)
 60 (227 ): %vreg38:86 = ADDr64i32 Register(%vreg38:86), Constant(i32 4)
 61 ( 53 ): %vreg39:87 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 62 ( 54 ): %vreg40:88 = MOVrm64 Mem(Base(%vreg39:87))
 63 ( 55 ): %vreg41:89 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
 64 ( 56 ): %vreg42:90 = Copy Register(%vreg41:89)
 65 (228 ): %vreg42:90 = ADDr64i32 Register(%vreg42:90), Constant(i32 8)
 66 ( 57 ): %vreg43:91 = MOVrm64 Mem(Base(%vreg42:90))
 67 ( 58 ): %rdi:23 = MOVrr64 Register(%vreg43:91)
 68 ( 59 ): %xmm1:33 = MOVSDrr Register(%vreg0:48)
 69 ( 60 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 70 ( 61 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 71 ( 62 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 72 ( 63 ): %vreg44:92 = Copy Register(%rax:16)
 73 ( 64 ): %rdi:23 = MOVrr64 Register(%vreg40:88)
 74 ( 65 ): %rsi:22 = MOVrr64 Register(%vreg44:92)
 75 ( 66 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 76 ( 67 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 77 ( 68 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 78 ( 69 ): %vreg45:93 = Copy Register(%rax:16)
 79 ( 70 ): MOVmr64 Mem(Base(%vreg38:86)), Register(%vreg45:93)
 80 ( 71 ): %vreg46:94 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
 81 ( 72 ): %vreg47:95 = Copy Register(%vreg46:94)
 82 (229 ): %vreg47:95 = ADDr64i32 Register(%vreg47:95), Constant(i32 12)
 83 ( 73 ): %vreg48:96 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
 84 ( 74 ): %vreg49:97 = Copy Register(%vreg48:96)
 85 (230 ): %vreg49:97 = ADDr64i32 Register(%vreg49:97), Constant(i32 8)
 86 ( 75 ): %vreg50:98 = MOVrm64 Mem(Base(%vreg49:97))
 87 ( 76 ): MOVmr64 Mem(Base(%vreg47:95)), Register(%vreg50:98)
 88 ( 77 ): %vreg51:99 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>))
 89 ( 78 ): %vreg52:100 = MOVrm64 Mem(Base(%vreg47:95))
 90 ( 79 ): %rdi:23 = MOVrr64 Register(%vreg51:99)
 91 ( 80 ): %rsi:22 = MOVrr64 Register(%vreg52:100)
 92 ( 81 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 93 ( 82 ): %xmm0:32 = CALL Mem(Address(addr<fn:Vec_dot>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 94 ( 83 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 95 ( 84 ): %vreg53:101 = Copy Register(%xmm0:32)
 96 ( 85 ): %xmm0:32 = MOVSDrr Register(%vreg53:101)
 97 ( 86 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.1)
 98 ( 87 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
 99 ( 88 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
100 ( 89 ): %xmm0:32 = CALL Mem(Address(addr<fn:clamp>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
101 ( 90 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
102 ( 91 ): %vreg54:102 = Copy Register(%xmm0:32)
103 ( 92 ): %vreg1:49 = Copy Register(%vreg54:102)
104 ( 93 ): %vreg55:103 = MOVrm64 Mem(Base(%vreg38:86))
105 ( 94 ): %vreg56:104 = MOVSDrm Mem(Base(%vreg55:103))
106 ( 95 ): %vreg57:105 = MOVrm64 Mem(Base(%vreg38:86))
107 ( 96 ): %vreg58:106 = MOVSDrm Mem(Base(%vreg57:105))
108 ( 97 ): %vreg59:107 = MOVSDrm64 Constant(f64 2)
109 ( 98 ): %vreg60:108 = Copy Register(%vreg58:106)
110 (231 ): %vreg60:108 = DIVSDrr Register(%vreg60:108), Register(%vreg59:107)
111 ( 99 ): %xmm0:32 = MOVSDrr Register(%vreg60:108)
112 (100 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
113 (101 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.floor.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
114 (102 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
115 (103 ): %vreg61:109 = Copy Register(%xmm0:32)
116 (104 ): %vreg62:110 = MOVSDrm64 Constant(f64 2)
117 (105 ): %vreg63:111 = Copy Register(%vreg61:109)
118 (232 ): %vreg63:111 = MULSDrr Register(%vreg63:111), Register(%vreg62:110)
119 (106 ): %vreg64:112 = Copy Register(%vreg56:104)
120 (233 ): %vreg64:112 = SUBSDrr Register(%vreg64:112), Register(%vreg63:111)
121 (107 ): %vreg2:50 = Copy Register(%vreg64:112)
122 (108 ): %vreg65:113 = MOVrm64 Mem(Base(%vreg38:86))
123 (109 ): %vreg66:114 = Copy Register(%vreg65:113)
124 (234 ): %vreg66:114 = ADDr64i32 Register(%vreg66:114), Constant(i32 16)
125 (110 ): %vreg67:115 = MOVSDrm Mem(Base(%vreg66:114))
126 (111 ): %vreg68:116 = MOVrm64 Mem(Base(%vreg38:86))
127 (112 ): %vreg69:117 = Copy Register(%vreg68:116)
128 (235 ): %vreg69:117 = ADDr64i32 Register(%vreg69:117), Constant(i32 16)
129 (113 ): %vreg70:118 = MOVSDrm Mem(Base(%vreg69:117))
130 (114 ): %vreg71:119 = MOVSDrm64 Constant(f64 2)
131 (115 ): %vreg72:120 = Copy Register(%vreg70:118)
132 (236 ): %vreg72:120 = DIVSDrr Register(%vreg72:120), Register(%vreg71:119)
133 (116 ): %xmm0:32 = MOVSDrr Register(%vreg72:120)
134 (117 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
135 (118 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.floor.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
136 (119 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
137 (120 ): %vreg73:121 = Copy Register(%xmm0:32)
138 (121 ): %vreg74:122 = MOVSDrm64 Constant(f64 2)
139 (122 ): %vreg75:123 = Copy Register(%vreg73:121)
140 (237 ): %vreg75:123 = MULSDrr Register(%vreg75:123), Register(%vreg74:122)
141 (123 ): %vreg76:124 = Copy Register(%vreg67:115)
142 (238 ): %vreg76:124 = SUBSDrr Register(%vreg76:124), Register(%vreg75:123)
143 (124 ): %vreg3:51 = Copy Register(%vreg76:124)
144 (125 ): %vreg77:125 = MOVSDrm64 Constant(f64 1)
145 (126 ): UCOMISDrr Register(%vreg2:50), Register(%vreg77:125)
146 (127 ): JA Branch(Id { idx: 5 })
147 (128 ): JMP Branch(Id { idx: 8 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg78:126, %vreg81:129}, live_in: {%vreg0:48, %vreg3:51, %vreg1:49}, live_out: {%vreg0:48, %vreg1:49, %vreg81:129} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }, Id { idx: 7 }], iseq: RefCell { value: [Id { idx: 129 }, Id { idx: 130 }, Id { idx: 211 }, Id { idx: 131 }, Id { idx: 132 }] } })
148 (129 ): %vreg78:126 = MOVSDrm64 Constant(f64 1)
149 (130 ): UCOMISDrr Register(%vreg3:51), Register(%vreg78:126)
150 (211 ): %vreg81:129 = Copy Register(%vreg1:49)
151 (131 ): JA Branch(Id { idx: 6 })
152 (132 ): JMP Branch(Id { idx: 7 })
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg81:129, %vreg4:52, %vreg80:128, %vreg79:127}, live_in: {%vreg0:48, %vreg1:49}, live_out: {%vreg0:48, %vreg81:129} } }, pred: [Id { idx: 5 }], succ: [Id { idx: 7 }], iseq: RefCell { value: [Id { idx: 133 }, Id { idx: 134 }, Id { idx: 239 }, Id { idx: 135 }, Id { idx: 210 }, Id { idx: 136 }] } })
153 (133 ): %vreg79:127 = MOVSDrm64 Constant(f64 0.5)
154 (134 ): %vreg80:128 = Copy Register(%vreg1:49)
155 (239 ): %vreg80:128 = MULSDrr Register(%vreg80:128), Register(%vreg79:127)
156 (135 ): %vreg4:52 = Copy Register(%vreg80:128)
157 (210 ): %vreg81:129 = Copy Register(%vreg4:52)
158 (136 ): JMP Branch(Id { idx: 7 })
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg88:136, %vreg5:53}, live_in: {%vreg0:48, %vreg81:129}, live_out: {%vreg0:48, %vreg88:136} } }, pred: [Id { idx: 5 }, Id { idx: 6 }], succ: [Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 138 }, Id { idx: 216 }, Id { idx: 139 }] } })
159 (138 ): %vreg5:53 = Copy Register(%vreg81:129)
160 (216 ): %vreg88:136 = Copy Register(%vreg5:53)
161 (139 ): JMP Branch(Id { idx: 13 })
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg87:135, %vreg82:130}, live_in: {%vreg0:48, %vreg1:49, %vreg2:50, %vreg3:51}, live_out: {%vreg87:135, %vreg1:49, %vreg0:48, %vreg3:51} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 9 }, Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 140 }, Id { idx: 141 }, Id { idx: 215 }, Id { idx: 142 }, Id { idx: 143 }] } })
162 (140 ): %vreg82:130 = MOVSDrm64 Constant(f64 1)
163 (141 ): UCOMISDrr Register(%vreg2:50), Register(%vreg82:130)
164 (215 ): %vreg87:135 = Copy Register(%vreg1:49)
165 (142 ): JB Branch(Id { idx: 9 })
166 (143 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg86:134, %vreg83:131}, live_in: {%vreg0:48, %vreg3:51, %vreg1:49}, live_out: {%vreg0:48, %vreg1:49, %vreg86:134} } }, pred: [Id { idx: 8 }], succ: [Id { idx: 10 }, Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 144 }, Id { idx: 145 }, Id { idx: 213 }, Id { idx: 146 }, Id { idx: 147 }] } })
167 (144 ): %vreg83:131 = MOVSDrm64 Constant(f64 1)
168 (145 ): UCOMISDrr Register(%vreg3:51), Register(%vreg83:131)
169 (213 ): %vreg86:134 = Copy Register(%vreg1:49)
170 (146 ): JB Branch(Id { idx: 10 })
171 (147 ): JMP Branch(Id { idx: 11 })
MachineBasicBlock #10 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg84:132, %vreg85:133, %vreg6:54, %vreg86:134}, live_in: {%vreg0:48, %vreg1:49}, live_out: {%vreg0:48, %vreg86:134} } }, pred: [Id { idx: 9 }], succ: [Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 148 }, Id { idx: 149 }, Id { idx: 240 }, Id { idx: 150 }, Id { idx: 212 }, Id { idx: 151 }] } })
172 (148 ): %vreg84:132 = MOVSDrm64 Constant(f64 0.5)
173 (149 ): %vreg85:133 = Copy Register(%vreg1:49)
174 (240 ): %vreg85:133 = MULSDrr Register(%vreg85:133), Register(%vreg84:132)
175 (150 ): %vreg6:54 = Copy Register(%vreg85:133)
176 (212 ): %vreg86:134 = Copy Register(%vreg6:54)
177 (151 ): JMP Branch(Id { idx: 11 })
MachineBasicBlock #11 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg7:55, %vreg87:135}, live_in: {%vreg0:48, %vreg86:134}, live_out: {%vreg87:135, %vreg0:48} } }, pred: [Id { idx: 9 }, Id { idx: 10 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 153 }, Id { idx: 214 }, Id { idx: 154 }] } })
178 (153 ): %vreg7:55 = Copy Register(%vreg86:134)
179 (214 ): %vreg87:135 = Copy Register(%vreg7:55)
180 (154 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #12 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg8:56, %vreg88:136}, live_in: {%vreg87:135, %vreg0:48}, live_out: {%vreg0:48, %vreg88:136} } }, pred: [Id { idx: 8 }, Id { idx: 11 }], succ: [Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 156 }, Id { idx: 217 }, Id { idx: 157 }] } })
181 (156 ): %vreg8:56 = Copy Register(%vreg87:135)
182 (217 ): %vreg88:136 = Copy Register(%vreg8:56)
183 (157 ): JMP Branch(Id { idx: 13 })
MachineBasicBlock #13 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg89:137, %vreg94:142, %vreg92:140, %vreg105:153, %vreg90:138, %vreg10:58, %xmm0:32, %vreg95:143, %vreg93:141, %vreg91:139, %vreg9:57}, live_in: {%vreg0:48, %vreg88:136}, live_out: {%vreg0:48, %vreg10:58, %vreg9:57, %vreg105:153} } }, pred: [Id { idx: 7 }, Id { idx: 12 }], succ: [Id { idx: 14 }, Id { idx: 15 }], iseq: RefCell { value: [Id { idx: 159 }, Id { idx: 160 }, Id { idx: 161 }, Id { idx: 241 }, Id { idx: 162 }, Id { idx: 163 }, Id { idx: 242 }, Id { idx: 164 }, Id { idx: 165 }, Id { idx: 166 }, Id { idx: 167 }, Id { idx: 168 }, Id { idx: 169 }, Id { idx: 170 }, Id { idx: 171 }, Id { idx: 172 }, Id { idx: 219 }, Id { idx: 173 }, Id { idx: 174 }] } })
184 (159 ): %vreg9:57 = Copy Register(%vreg88:136)
185 (160 ): %vreg89:137 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
186 (161 ): %vreg90:138 = Copy Register(%vreg89:137)
187 (241 ): %vreg90:138 = ADDr64i32 Register(%vreg90:138), Constant(i32 4)
188 (162 ): %vreg91:139 = MOVrm64 Mem(Base(%vreg90:138))
189 (163 ): %vreg92:140 = Copy Register(%vreg91:139)
190 (242 ): %vreg92:140 = ADDr64i32 Register(%vreg92:140), Constant(i32 16)
191 (164 ): %vreg93:141 = MOVSDrm Mem(Base(%vreg92:140))
192 (165 ): %xmm0:32 = MOVSDrr Register(%vreg93:141)
193 (166 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
194 (167 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.fabs.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
195 (168 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
196 (169 ): %vreg94:142 = Copy Register(%xmm0:32)
197 (170 ): %vreg10:58 = Copy Register(%vreg94:142)
198 (171 ): %vreg95:143 = MOVSDrm64 Constant(f64 25)
199 (172 ): UCOMISDrr Register(%vreg10:58), Register(%vreg95:143)
200 (219 ): %vreg105:153 = Copy Constant(f64 0)
201 (173 ): JB Branch(Id { idx: 14 })
202 (174 ): JMP Branch(Id { idx: 15 })
MachineBasicBlock #14 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg99:147, %vreg98:146, %vreg96:144, %vreg97:145, %vreg11:59, %vreg105:153}, live_in: {%vreg10:58, %vreg0:48, %vreg9:57}, live_out: {%vreg0:48, %vreg9:57, %vreg105:153} } }, pred: [Id { idx: 13 }], succ: [Id { idx: 15 }], iseq: RefCell { value: [Id { idx: 175 }, Id { idx: 176 }, Id { idx: 177 }, Id { idx: 243 }, Id { idx: 178 }, Id { idx: 244 }, Id { idx: 179 }, Id { idx: 218 }, Id { idx: 180 }] } })
203 (175 ): %vreg96:144 = MOVSDrm64 Constant(f64 1)
204 (176 ): %vreg97:145 = MOVSDrm64 Constant(f64 0.04)
205 (177 ): %vreg98:146 = Copy Register(%vreg10:58)
206 (243 ): %vreg98:146 = MULSDrr Register(%vreg98:146), Register(%vreg97:145)
207 (178 ): %vreg99:147 = Copy Register(%vreg96:144)
208 (244 ): %vreg99:147 = SUBSDrr Register(%vreg99:147), Register(%vreg98:146)
209 (179 ): %vreg11:59 = Copy Register(%vreg99:147)
210 (218 ): %vreg105:153 = Copy Register(%vreg11:59)
211 (180 ): JMP Branch(Id { idx: 15 })
MachineBasicBlock #15 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rax:16, %vreg107:155, %rdi:23, %vreg117:165, %vreg103:151, %vreg110:158, %vreg101:149, %vreg116:164, %eax:0, %vreg114:162, %vreg112:160, %vreg108:156, %vreg104:152, %xmm1:33, %vreg100:148, %vreg102:150, %vreg109:157, %vreg111:159, %vreg113:161, %vreg115:163, %vreg106:154}, live_in: {%vreg0:48, %vreg9:57, %vreg105:153}, live_out: {} } }, pred: [Id { idx: 13 }, Id { idx: 14 }], succ: [], iseq: RefCell { value: [Id { idx: 181 }, Id { idx: 182 }, Id { idx: 245 }, Id { idx: 183 }, Id { idx: 184 }, Id { idx: 246 }, Id { idx: 185 }, Id { idx: 187 }, Id { idx: 247 }, Id { idx: 188 }, Id { idx: 189 }, Id { idx: 190 }, Id { idx: 191 }, Id { idx: 192 }, Id { idx: 193 }, Id { idx: 194 }, Id { idx: 195 }, Id { idx: 196 }, Id { idx: 248 }, Id { idx: 197 }, Id { idx: 198 }, Id { idx: 199 }, Id { idx: 200 }, Id { idx: 249 }, Id { idx: 201 }, Id { idx: 202 }, Id { idx: 203 }, Id { idx: 250 }, Id { idx: 204 }, Id { idx: 205 }, Id { idx: 251 }, Id { idx: 206 }, Id { idx: 207 }, Id { idx: 208 }, Id { idx: 209 }] } })
212 (181 ): %vreg100:148 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
213 (182 ): %vreg101:149 = Copy Register(%vreg100:148)
214 (245 ): %vreg101:149 = ADDr64i32 Register(%vreg101:149), Constant(i32 20)
215 (183 ): %vreg102:150 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>))
216 (184 ): %vreg103:151 = Copy Register(%vreg102:150)
217 (246 ): %vreg103:151 = ADDr64i32 Register(%vreg103:151), Constant(i32 16)
218 (185 ): %vreg104:152 = MOVrm64 Mem(Base(%vreg103:151))
219 (187 ): %vreg106:154 = Copy Register(%vreg9:57)
220 (247 ): %vreg106:154 = MULSDrr Register(%vreg106:154), Register(%vreg105:153)
221 (188 ): %rdi:23 = MOVrr64 Register(%vreg104:152)
222 (189 ): %xmm1:33 = MOVSDrr Register(%vreg106:154)
223 (190 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
224 (191 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
225 (192 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
226 (193 ): %vreg107:155 = Copy Register(%rax:16)
227 (194 ): MOVmr64 Mem(Base(%vreg101:149)), Register(%vreg107:155)
228 (195 ): %vreg108:156 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
229 (196 ): %vreg109:157 = Copy Register(%vreg108:156)
230 (248 ): %vreg109:157 = ADDr64i32 Register(%vreg109:157), Constant(i32 28)
231 (197 ): MOVSDmr Mem(Base(%vreg109:157)), Register(%vreg0:48)
232 (198 ): %vreg110:158 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
233 (199 ): %vreg111:159 = MOVrm32 Mem(Base(%vreg110:158))
234 (200 ): %vreg112:160 = Copy Register(%vreg111:159)
235 (249 ): %vreg112:160 = ADDri32 Register(%vreg112:160), Constant(i32 1)
236 (201 ): MOVmr32 Mem(Base(%vreg110:158)), Register(%vreg112:160)
237 (202 ): %vreg113:161 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>))
238 (203 ): %vreg114:162 = Copy Register(%vreg113:161)
239 (250 ): %vreg114:162 = ADDr64i32 Register(%vreg114:162), Constant(i32 36)
240 (204 ): %vreg115:163 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>))
241 (205 ): %vreg116:164 = Copy Register(%vreg115:163)
242 (251 ): %vreg116:164 = ADDr64i32 Register(%vreg116:164), Constant(i32 8)
243 (206 ): %vreg117:165 = MOVrm64 Mem(Base(%vreg116:164))
244 (207 ): MOVmr64 Mem(Base(%vreg114:162)), Register(%vreg117:165)
245 (208 ): %eax:0 = MOVri32 Constant(i32 0)
246 (209 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Env_intersect, ty: functy:32):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg17:65, %vreg10:58, %vreg23:71, %vreg3:51, %rsi:22, %vreg25:73, %vreg26:74, %vreg28:76, %vreg20:68, %vreg4:52, %vreg21:69, %rdx:18, %vreg2:50, %vreg1:49, %vreg5:53, %rdi:23, %eax:0, %vreg24:72, %vreg8:56, %vreg9:57, %vreg19:67, %vreg6:54, %vreg7:55, %rcx:17, %vreg16:64, %vreg18:66, %vreg12:60, %vreg13:61, %vreg11:59, %vreg14:62, %vreg0:48, %vreg15:63, %vreg22:70, %vreg27:75}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 59 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 60 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 61 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 62 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = Copy Register(%vreg0:48)
 2  ( 59 ): %vreg1:49 = ADDr64i32 Register(%vreg1:49), Constant(i32 8)
 3  ( 2  ): %vreg2:50 = MOVrm64 Mem(Base(%vreg1:49))
 4  ( 3  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 5  ( 4  ): %vreg4:52 = MOVrm64 Mem(Base(%vreg3:51))
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 7  ( 6  ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 8  ( 7  ): %rdi:23 = MOVrr64 Register(%vreg2:50)
 9  ( 8  ): %rsi:22 = MOVrr64 Register(%vreg4:52)
 10 ( 9  ): %rdx:18 = MOVrr64 Register(%vreg5:53)
 11 ( 10 ): %rcx:17 = MOVrr64 Register(%vreg6:54)
 12 ( 11 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 13 ( 12 ): %eax:0 = CALL Mem(Address(addr<fn:Sphere_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 14 ( 13 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 15 ( 14 ): %vreg7:55 = Copy Register(%eax:0)
 16 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 17 ( 16 ): %vreg9:57 = Copy Register(%vreg8:56)
 18 ( 60 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 16)
 19 ( 17 ): %vreg10:58 = MOVrm64 Mem(Base(%vreg9:57))
 20 ( 18 ): %vreg11:59 = MOVrm64 Mem(Base(%vreg3:51))
 21 ( 19 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 22 ( 20 ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 23 ( 21 ): %rdi:23 = MOVrr64 Register(%vreg10:58)
 24 ( 22 ): %rsi:22 = MOVrr64 Register(%vreg11:59)
 25 ( 23 ): %rdx:18 = MOVrr64 Register(%vreg12:60)
 26 ( 24 ): %rcx:17 = MOVrr64 Register(%vreg13:61)
 27 ( 25 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 28 ( 26 ): %eax:0 = CALL Mem(Address(addr<fn:Sphere_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 29 ( 27 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 28 ): %vreg14:62 = Copy Register(%eax:0)
 31 ( 29 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 32 ( 30 ): %vreg16:64 = Copy Register(%vreg15:63)
 33 ( 61 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 24)
 34 ( 31 ): %vreg17:65 = MOVrm64 Mem(Base(%vreg16:64))
 35 ( 32 ): %vreg18:66 = MOVrm64 Mem(Base(%vreg3:51))
 36 ( 33 ): %vreg19:67 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 37 ( 34 ): %vreg20:68 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 38 ( 35 ): %rdi:23 = MOVrr64 Register(%vreg17:65)
 39 ( 36 ): %rsi:22 = MOVrr64 Register(%vreg18:66)
 40 ( 37 ): %rdx:18 = MOVrr64 Register(%vreg19:67)
 41 ( 38 ): %rcx:17 = MOVrr64 Register(%vreg20:68)
 42 ( 39 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 43 ( 40 ): %eax:0 = CALL Mem(Address(addr<fn:Sphere_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 44 ( 41 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 45 ( 42 ): %vreg21:69 = Copy Register(%eax:0)
 46 ( 43 ): %vreg22:70 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 47 ( 44 ): %vreg23:71 = Copy Register(%vreg22:70)
 48 ( 62 ): %vreg23:71 = ADDr64i32 Register(%vreg23:71), Constant(i32 32)
 49 ( 45 ): %vreg24:72 = MOVrm64 Mem(Base(%vreg23:71))
 50 ( 46 ): %vreg25:73 = MOVrm64 Mem(Base(%vreg3:51))
 51 ( 47 ): %vreg26:74 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 52 ( 48 ): %vreg27:75 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 53 ( 49 ): %rdi:23 = MOVrr64 Register(%vreg24:72)
 54 ( 50 ): %rsi:22 = MOVrr64 Register(%vreg25:73)
 55 ( 51 ): %rdx:18 = MOVrr64 Register(%vreg26:74)
 56 ( 52 ): %rcx:17 = MOVrr64 Register(%vreg27:75)
 57 ( 53 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 58 ( 54 ): %eax:0 = CALL Mem(Address(addr<fn:Plane_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 59 ( 55 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 60 ( 56 ): %vreg28:76 = Copy Register(%eax:0)
 61 ( 57 ): %eax:0 = MOVri32 Constant(i32 0)
 62 ( 58 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Env_intersect, ty: functy:32):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg17:65, %vreg10:58, %vreg23:71, %vreg3:51, %rsi:22, %vreg25:73, %vreg26:74, %vreg28:76, %vreg20:68, %vreg4:52, %vreg21:69, %rdx:18, %vreg2:50, %vreg1:49, %vreg5:53, %rdi:23, %eax:0, %vreg24:72, %vreg8:56, %vreg9:57, %vreg19:67, %vreg6:54, %vreg7:55, %rcx:17, %vreg16:64, %vreg18:66, %vreg12:60, %vreg13:61, %vreg11:59, %vreg14:62, %vreg0:48, %vreg15:63, %vreg22:70, %vreg27:75}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 59 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 60 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 61 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 62 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = Copy Register(%vreg0:48)
 2  ( 59 ): %vreg1:49 = ADDr64i32 Register(%vreg1:49), Constant(i32 8)
 3  ( 2  ): %vreg2:50 = MOVrm64 Mem(Base(%vreg1:49))
 4  ( 3  ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 5  ( 4  ): %vreg4:52 = MOVrm64 Mem(Base(%vreg3:51))
 6  ( 5  ): %vreg5:53 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 7  ( 6  ): %vreg6:54 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 8  ( 7  ): %rdi:23 = MOVrr64 Register(%vreg2:50)
 9  ( 8  ): %rsi:22 = MOVrr64 Register(%vreg4:52)
 10 ( 9  ): %rdx:18 = MOVrr64 Register(%vreg5:53)
 11 ( 10 ): %rcx:17 = MOVrr64 Register(%vreg6:54)
 12 ( 11 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 13 ( 12 ): %eax:0 = CALL Mem(Address(addr<fn:Sphere_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 14 ( 13 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 15 ( 14 ): %vreg7:55 = Copy Register(%eax:0)
 16 ( 15 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 17 ( 16 ): %vreg9:57 = Copy Register(%vreg8:56)
 18 ( 60 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 16)
 19 ( 17 ): %vreg10:58 = MOVrm64 Mem(Base(%vreg9:57))
 20 ( 18 ): %vreg11:59 = MOVrm64 Mem(Base(%vreg3:51))
 21 ( 19 ): %vreg12:60 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 22 ( 20 ): %vreg13:61 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 23 ( 21 ): %rdi:23 = MOVrr64 Register(%vreg10:58)
 24 ( 22 ): %rsi:22 = MOVrr64 Register(%vreg11:59)
 25 ( 23 ): %rdx:18 = MOVrr64 Register(%vreg12:60)
 26 ( 24 ): %rcx:17 = MOVrr64 Register(%vreg13:61)
 27 ( 25 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 28 ( 26 ): %eax:0 = CALL Mem(Address(addr<fn:Sphere_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 29 ( 27 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 28 ): %vreg14:62 = Copy Register(%eax:0)
 31 ( 29 ): %vreg15:63 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 32 ( 30 ): %vreg16:64 = Copy Register(%vreg15:63)
 33 ( 61 ): %vreg16:64 = ADDr64i32 Register(%vreg16:64), Constant(i32 24)
 34 ( 31 ): %vreg17:65 = MOVrm64 Mem(Base(%vreg16:64))
 35 ( 32 ): %vreg18:66 = MOVrm64 Mem(Base(%vreg3:51))
 36 ( 33 ): %vreg19:67 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 37 ( 34 ): %vreg20:68 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 38 ( 35 ): %rdi:23 = MOVrr64 Register(%vreg17:65)
 39 ( 36 ): %rsi:22 = MOVrr64 Register(%vreg18:66)
 40 ( 37 ): %rdx:18 = MOVrr64 Register(%vreg19:67)
 41 ( 38 ): %rcx:17 = MOVrr64 Register(%vreg20:68)
 42 ( 39 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 43 ( 40 ): %eax:0 = CALL Mem(Address(addr<fn:Sphere_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 44 ( 41 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 45 ( 42 ): %vreg21:69 = Copy Register(%eax:0)
 46 ( 43 ): %vreg22:70 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>))
 47 ( 44 ): %vreg23:71 = Copy Register(%vreg22:70)
 48 ( 62 ): %vreg23:71 = ADDr64i32 Register(%vreg23:71), Constant(i32 32)
 49 ( 45 ): %vreg24:72 = MOVrm64 Mem(Base(%vreg23:71))
 50 ( 46 ): %vreg25:73 = MOVrm64 Mem(Base(%vreg3:51))
 51 ( 47 ): %vreg26:74 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>))
 52 ( 48 ): %vreg27:75 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>))
 53 ( 49 ): %rdi:23 = MOVrr64 Register(%vreg24:72)
 54 ( 50 ): %rsi:22 = MOVrr64 Register(%vreg25:73)
 55 ( 51 ): %rdx:18 = MOVrr64 Register(%vreg26:74)
 56 ( 52 ): %rcx:17 = MOVrr64 Register(%vreg27:75)
 57 ( 53 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 58 ( 54 ): %eax:0 = CALL Mem(Address(addr<fn:Plane_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 59 ( 55 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 60 ( 56 ): %vreg28:76 = Copy Register(%eax:0)
 61 ( 57 ): %eax:0 = MOVri32 Constant(i32 0)
 62 ( 58 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: Env_new, ty: functy:33):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg3:51, %vreg4:52, %xmm2:34, %vreg5:53, %vreg6:54, %vreg1:49, %vreg19:67, %vreg23:71, %vreg14:62, %rsi:22, %vreg8:56, %vreg9:57, %vreg25:73, %rdi:23, %vreg0:48, %vreg17:65, %vreg18:66, %rax:16, %vreg13:61, %vreg12:60, %vreg26:74, %vreg10:58, %xmm1:33, %vreg22:70, %vreg2:50, %vreg21:69, %vreg20:68, %vreg16:64, %xmm0:32, %edi:7, %rdx:18, %vreg24:72, %vreg15:63, %vreg11:59, %vreg7:55}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 131 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 132 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 133 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 134 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }, Id { idx: 117 }, Id { idx: 118 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 129 }, Id { idx: 130 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 7  ( 7  ): %xmm0:32 = MOVSDrm64 Constant(f64 0.577)
 8  ( 8  ): %xmm1:33 = MOVSDrm64 Constant(f64 0.577)
 9  ( 9  ): %xmm2:34 = MOVSDrm64 Constant(f64 0.577)
 10 ( 10 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 11 ( 11 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 12 ( 12 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 13 ( 13 ): %vreg2:50 = Copy Register(%rax:16)
 14 ( 14 ): MOVmr64 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 15 ( 15 ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 16 ( 16 ): %vreg4:52 = Copy Register(%vreg3:51)
 17 (131 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 18 ( 17 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 19 ( 18 ): %xmm1:33 = MOVSDrm64 Constant(f64 -0.5)
 20 ( 19 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 21 ( 20 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 21 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 23 ( 22 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 24 ( 23 ): %vreg5:53 = Copy Register(%rax:16)
 25 ( 24 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
 26 ( 25 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 27 ( 26 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 28 ( 27 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 29 ( 28 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 30 ( 29 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 31 ( 30 ): %vreg6:54 = Copy Register(%rax:16)
 32 ( 31 ): %xmm0:32 = MOVSDrm64 Constant(f64 0.5)
 33 ( 32 ): %rsi:22 = MOVrr64 Register(%vreg5:53)
 34 ( 33 ): %rdx:18 = MOVrr64 Register(%vreg6:54)
 35 ( 34 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 36 ( 35 ): %rax:16 = CALL Mem(Address(addr<fn:Sphere_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 37 ( 36 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 38 ( 37 ): %vreg7:55 = Copy Register(%rax:16)
 39 ( 38 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg7:55)
 40 ( 39 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 41 ( 40 ): %vreg9:57 = Copy Register(%vreg8:56)
 42 (132 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 16)
 43 ( 41 ): %xmm0:32 = MOVSDrm64 Constant(f64 6.66)
 44 ( 42 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 45 ( 43 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.cos.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 46 ( 44 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 47 ( 45 ): %vreg10:58 = Copy Register(%xmm0:32)
 48 ( 46 ): %xmm0:32 = MOVSDrm64 Constant(f64 2)
 49 ( 47 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 50 ( 48 ): %xmm2:34 = MOVSDrr Register(%vreg10:58)
 51 ( 49 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 52 ( 50 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 53 ( 51 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 54 ( 52 ): %vreg11:59 = Copy Register(%rax:16)
 55 ( 53 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 56 ( 54 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
 57 ( 55 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 58 ( 56 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 59 ( 57 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 60 ( 58 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 61 ( 59 ): %vreg12:60 = Copy Register(%rax:16)
 62 ( 60 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
 63 ( 61 ): %rsi:22 = MOVrr64 Register(%vreg11:59)
 64 ( 62 ): %rdx:18 = MOVrr64 Register(%vreg12:60)
 65 ( 63 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 66 ( 64 ): %rax:16 = CALL Mem(Address(addr<fn:Sphere_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 67 ( 65 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 68 ( 66 ): %vreg13:61 = Copy Register(%rax:16)
 69 ( 67 ): MOVmr64 Mem(Base(%vreg9:57)), Register(%vreg13:61)
 70 ( 68 ): %vreg14:62 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 71 ( 69 ): %vreg15:63 = Copy Register(%vreg14:62)
 72 (133 ): %vreg15:63 = ADDr64i32 Register(%vreg15:63), Constant(i32 24)
 73 ( 70 ): %xmm0:32 = MOVSDrm64 Constant(f64 3.33)
 74 ( 71 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 75 ( 72 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.cos.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 76 ( 73 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 77 ( 74 ): %vreg16:64 = Copy Register(%xmm0:32)
 78 ( 75 ): %xmm0:32 = MOVSDrm64 Constant(f64 -2)
 79 ( 76 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.5)
 80 ( 77 ): %xmm2:34 = MOVSDrr Register(%vreg16:64)
 81 ( 78 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 82 ( 79 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 83 ( 80 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 84 ( 81 ): %vreg17:65 = Copy Register(%rax:16)
 85 ( 82 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 86 ( 83 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 87 ( 84 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
 88 ( 85 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 89 ( 86 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 90 ( 87 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 91 ( 88 ): %vreg18:66 = Copy Register(%rax:16)
 92 ( 89 ): %xmm0:32 = MOVSDrm64 Constant(f64 1.5)
 93 ( 90 ): %rsi:22 = MOVrr64 Register(%vreg17:65)
 94 ( 91 ): %rdx:18 = MOVrr64 Register(%vreg18:66)
 95 ( 92 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 96 ( 93 ): %rax:16 = CALL Mem(Address(addr<fn:Sphere_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 97 ( 94 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 98 ( 95 ): %vreg19:67 = Copy Register(%rax:16)
 99 ( 96 ): MOVmr64 Mem(Base(%vreg15:63)), Register(%vreg19:67)
100 ( 97 ): %vreg20:68 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
101 ( 98 ): %vreg21:69 = Copy Register(%vreg20:68)
102 (134 ): %vreg21:69 = ADDr64i32 Register(%vreg21:69), Constant(i32 32)
103 ( 99 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
104 (100 ): %xmm1:33 = MOVSDrm64 Constant(f64 -1)
105 (101 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
106 (102 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
107 (103 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
108 (104 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
109 (105 ): %vreg22:70 = Copy Register(%rax:16)
110 (106 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
111 (107 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
112 (108 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
113 (109 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
114 (110 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
115 (111 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
116 (112 ): %vreg23:71 = Copy Register(%rax:16)
117 (113 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
118 (114 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
119 (115 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
120 (116 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
121 (117 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
122 (118 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
123 (119 ): %vreg24:72 = Copy Register(%rax:16)
124 (120 ): %rdi:23 = MOVrr64 Register(%vreg22:70)
125 (121 ): %rsi:22 = MOVrr64 Register(%vreg23:71)
126 (122 ): %rdx:18 = MOVrr64 Register(%vreg24:72)
127 (123 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
128 (124 ): %rax:16 = CALL Mem(Address(addr<fn:Plane_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
129 (125 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
130 (126 ): %vreg25:73 = Copy Register(%rax:16)
131 (127 ): MOVmr64 Mem(Base(%vreg21:69)), Register(%vreg25:73)
132 (128 ): %vreg26:74 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
133 (129 ): %rax:16 = MOVrr64 Register(%vreg26:74)
134 (130 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: Env_new, ty: functy:33):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg3:51, %vreg4:52, %xmm2:34, %vreg5:53, %vreg6:54, %vreg1:49, %vreg19:67, %vreg23:71, %vreg14:62, %rsi:22, %vreg8:56, %vreg9:57, %vreg25:73, %rdi:23, %vreg0:48, %vreg17:65, %vreg18:66, %rax:16, %vreg13:61, %vreg12:60, %vreg26:74, %vreg10:58, %xmm1:33, %vreg22:70, %vreg2:50, %vreg21:69, %vreg20:68, %vreg16:64, %xmm0:32, %edi:7, %rdx:18, %vreg24:72, %vreg15:63, %vreg11:59, %vreg7:55}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 131 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 132 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 133 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 134 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }, Id { idx: 117 }, Id { idx: 118 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 129 }, Id { idx: 130 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 128)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %rax:16 = CALL Mem(Address(addr<fn:cilk.malloc.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg0:48 = Copy Register(%rax:16)
 5  ( 5  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)), Register(%vreg0:48)
 6  ( 6  ): %vreg1:49 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 7  ( 7  ): %xmm0:32 = MOVSDrm64 Constant(f64 0.577)
 8  ( 8  ): %xmm1:33 = MOVSDrm64 Constant(f64 0.577)
 9  ( 9  ): %xmm2:34 = MOVSDrm64 Constant(f64 0.577)
 10 ( 10 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 11 ( 11 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 12 ( 12 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 13 ( 13 ): %vreg2:50 = Copy Register(%rax:16)
 14 ( 14 ): MOVmr64 Mem(Base(%vreg1:49)), Register(%vreg2:50)
 15 ( 15 ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 16 ( 16 ): %vreg4:52 = Copy Register(%vreg3:51)
 17 (131 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 18 ( 17 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 19 ( 18 ): %xmm1:33 = MOVSDrm64 Constant(f64 -0.5)
 20 ( 19 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 21 ( 20 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 22 ( 21 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 23 ( 22 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 24 ( 23 ): %vreg5:53 = Copy Register(%rax:16)
 25 ( 24 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
 26 ( 25 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 27 ( 26 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 28 ( 27 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 29 ( 28 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 30 ( 29 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 31 ( 30 ): %vreg6:54 = Copy Register(%rax:16)
 32 ( 31 ): %xmm0:32 = MOVSDrm64 Constant(f64 0.5)
 33 ( 32 ): %rsi:22 = MOVrr64 Register(%vreg5:53)
 34 ( 33 ): %rdx:18 = MOVrr64 Register(%vreg6:54)
 35 ( 34 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 36 ( 35 ): %rax:16 = CALL Mem(Address(addr<fn:Sphere_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 37 ( 36 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 38 ( 37 ): %vreg7:55 = Copy Register(%rax:16)
 39 ( 38 ): MOVmr64 Mem(Base(%vreg4:52)), Register(%vreg7:55)
 40 ( 39 ): %vreg8:56 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 41 ( 40 ): %vreg9:57 = Copy Register(%vreg8:56)
 42 (132 ): %vreg9:57 = ADDr64i32 Register(%vreg9:57), Constant(i32 16)
 43 ( 41 ): %xmm0:32 = MOVSDrm64 Constant(f64 6.66)
 44 ( 42 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 45 ( 43 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.cos.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 46 ( 44 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 47 ( 45 ): %vreg10:58 = Copy Register(%xmm0:32)
 48 ( 46 ): %xmm0:32 = MOVSDrm64 Constant(f64 2)
 49 ( 47 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 50 ( 48 ): %xmm2:34 = MOVSDrr Register(%vreg10:58)
 51 ( 49 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 52 ( 50 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 53 ( 51 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 54 ( 52 ): %vreg11:59 = Copy Register(%rax:16)
 55 ( 53 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 56 ( 54 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
 57 ( 55 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 58 ( 56 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 59 ( 57 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 60 ( 58 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 61 ( 59 ): %vreg12:60 = Copy Register(%rax:16)
 62 ( 60 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
 63 ( 61 ): %rsi:22 = MOVrr64 Register(%vreg11:59)
 64 ( 62 ): %rdx:18 = MOVrr64 Register(%vreg12:60)
 65 ( 63 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 66 ( 64 ): %rax:16 = CALL Mem(Address(addr<fn:Sphere_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 67 ( 65 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 68 ( 66 ): %vreg13:61 = Copy Register(%rax:16)
 69 ( 67 ): MOVmr64 Mem(Base(%vreg9:57)), Register(%vreg13:61)
 70 ( 68 ): %vreg14:62 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
 71 ( 69 ): %vreg15:63 = Copy Register(%vreg14:62)
 72 (133 ): %vreg15:63 = ADDr64i32 Register(%vreg15:63), Constant(i32 24)
 73 ( 70 ): %xmm0:32 = MOVSDrm64 Constant(f64 3.33)
 74 ( 71 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 75 ( 72 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.cos.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 76 ( 73 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 77 ( 74 ): %vreg16:64 = Copy Register(%xmm0:32)
 78 ( 75 ): %xmm0:32 = MOVSDrm64 Constant(f64 -2)
 79 ( 76 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.5)
 80 ( 77 ): %xmm2:34 = MOVSDrr Register(%vreg16:64)
 81 ( 78 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 82 ( 79 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 83 ( 80 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 84 ( 81 ): %vreg17:65 = Copy Register(%rax:16)
 85 ( 82 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 86 ( 83 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 87 ( 84 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
 88 ( 85 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 89 ( 86 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 90 ( 87 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 91 ( 88 ): %vreg18:66 = Copy Register(%rax:16)
 92 ( 89 ): %xmm0:32 = MOVSDrm64 Constant(f64 1.5)
 93 ( 90 ): %rsi:22 = MOVrr64 Register(%vreg17:65)
 94 ( 91 ): %rdx:18 = MOVrr64 Register(%vreg18:66)
 95 ( 92 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 96 ( 93 ): %rax:16 = CALL Mem(Address(addr<fn:Sphere_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 97 ( 94 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 98 ( 95 ): %vreg19:67 = Copy Register(%rax:16)
 99 ( 96 ): MOVmr64 Mem(Base(%vreg15:63)), Register(%vreg19:67)
100 ( 97 ): %vreg20:68 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
101 ( 98 ): %vreg21:69 = Copy Register(%vreg20:68)
102 (134 ): %vreg21:69 = ADDr64i32 Register(%vreg21:69), Constant(i32 32)
103 ( 99 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
104 (100 ): %xmm1:33 = MOVSDrm64 Constant(f64 -1)
105 (101 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
106 (102 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
107 (103 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
108 (104 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
109 (105 ): %vreg22:70 = Copy Register(%rax:16)
110 (106 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
111 (107 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
112 (108 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
113 (109 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
114 (110 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
115 (111 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
116 (112 ): %vreg23:71 = Copy Register(%rax:16)
117 (113 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
118 (114 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
119 (115 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
120 (116 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
121 (117 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
122 (118 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
123 (119 ): %vreg24:72 = Copy Register(%rax:16)
124 (120 ): %rdi:23 = MOVrr64 Register(%vreg22:70)
125 (121 ): %rsi:22 = MOVrr64 Register(%vreg23:71)
126 (122 ): %rdx:18 = MOVrr64 Register(%vreg24:72)
127 (123 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
128 (124 ): %rax:16 = CALL Mem(Address(addr<fn:Plane_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
129 (125 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
130 (126 ): %vreg25:73 = Copy Register(%rax:16)
131 (127 ): MOVmr64 Mem(Base(%vreg21:69)), Register(%vreg25:73)
132 (128 ): %vreg26:74 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
133 (129 ): %rax:16 = MOVrr64 Register(%vreg26:74)
134 (130 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: color_of, ty: functy:4):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0, %vreg5:53, %xmm1:33, %xmm2:34, %vreg1:49, %vreg3:51, %vreg4:52, %edi:7, %vreg2:50, %vreg0:48, %xmm0:32}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 27 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 256)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.i32_to_f64.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg1:49 = Copy Register(%xmm0:32)
 5  ( 5  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 6  ( 6  ): %xmm0:32 = MOVSDrr Register(%vreg2:50)
 7  ( 7  ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 8  ( 8  ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
 9  ( 9  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 10 ( 10 ): %xmm0:32 = CALL Mem(Address(addr<fn:clamp>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 11 ( 11 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 12 ( 12 ): %vreg3:51 = Copy Register(%xmm0:32)
 13 ( 13 ): %vreg4:52 = Copy Register(%vreg1:49)
 14 ( 27 ): %vreg4:52 = MULSDrr Register(%vreg4:52), Register(%vreg3:51)
 15 ( 14 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 16 ( 15 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 17 ( 16 ): %eax:0 = CALL Mem(Address(addr<fn:cilk.f64_to_i32.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 18 ( 17 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 19 ( 18 ): %vreg5:53 = Copy Register(%eax:0)
 20 ( 19 ): %vreg0:48 = Copy Register(%vreg5:53)
 21 ( 20 ): CMPri Register(%vreg0:48), Constant(i32 256)
 22 ( 21 ): JE Branch(Id { idx: 1 })
 23 ( 22 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 23 }, Id { idx: 24 }] } })
 24 ( 23 ): %eax:0 = MOVri32 Constant(i32 255)
 25 ( 24 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 25 }, Id { idx: 26 }] } })
 26 ( 25 ): %eax:0 = MOVrr32 Register(%vreg0:48)
 27 ( 26 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: color_of, ty: functy:4):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0, %vreg5:53, %xmm1:33, %xmm2:34, %vreg1:49, %vreg3:51, %vreg4:52, %edi:7, %vreg2:50, %vreg0:48, %xmm0:32}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 27 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }] } })
 0  ( 0  ): %edi:7 = MOVri32 Constant(i32 256)
 1  ( 1  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.i32_to_f64.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 3  ( 3  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %vreg1:49 = Copy Register(%xmm0:32)
 5  ( 5  ): %vreg2:50 = MOVSDrm Mem(BaseFi(%rbp:21, FI<f64, Arg(0)>))
 6  ( 6  ): %xmm0:32 = MOVSDrr Register(%vreg2:50)
 7  ( 7  ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 8  ( 8  ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
 9  ( 9  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 10 ( 10 ): %xmm0:32 = CALL Mem(Address(addr<fn:clamp>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 11 ( 11 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 12 ( 12 ): %vreg3:51 = Copy Register(%xmm0:32)
 13 ( 13 ): %vreg4:52 = Copy Register(%vreg1:49)
 14 ( 27 ): %vreg4:52 = MULSDrr Register(%vreg4:52), Register(%vreg3:51)
 15 ( 14 ): %xmm0:32 = MOVSDrr Register(%vreg4:52)
 16 ( 15 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 17 ( 16 ): %eax:0 = CALL Mem(Address(addr<fn:cilk.f64_to_i32.f64>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 18 ( 17 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 19 ( 18 ): %vreg5:53 = Copy Register(%eax:0)
 20 ( 19 ): %vreg0:48 = Copy Register(%vreg5:53)
 21 ( 20 ): CMPri Register(%vreg0:48), Constant(i32 256)
 22 ( 21 ): JE Branch(Id { idx: 1 })
 23 ( 22 ): JMP Branch(Id { idx: 2 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 23 }, Id { idx: 24 }] } })
 24 ( 23 ): %eax:0 = MOVri32 Constant(i32 255)
 25 ( 24 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 25 }, Id { idx: 26 }] } })
 26 ( 25 ): %eax:0 = MOVrr32 Register(%vreg0:48)
 27 ( 26 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: print_col, ty: functy:34):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0, %vreg4:52, %vreg0:48, %vreg6:54, %vreg2:50, %vreg7:55, %vreg3:51, %vreg5:53, %vreg9:57, %xmm0:32, %edi:7, %vreg1:49, %vreg8:56, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 49 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 50 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %xmm0:32 = MOVSDrr Register(%vreg1:49)
 3  ( 3  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %eax:0 = CALL Mem(Address(addr<fn:color_of>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 5  ( 5  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 6  ( 6  ): %vreg2:50 = Copy Register(%eax:0)
 7  ( 7  ): %edi:7 = MOVrr32 Register(%vreg2:50)
 8  ( 8  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 9  ( 9  ): CALL Mem(Address(addr<fn:cilk.print.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 10 ( 10 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 11 ( 11 ): %edi:7 = MOVri32 Constant(i32 32)
 12 ( 12 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 13 ( 13 ): CALL Mem(Address(addr<fn:cilk.printch.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 14 ( 14 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 15 ( 15 ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 16 ( 16 ): %vreg4:52 = Copy Register(%vreg3:51)
 17 ( 49 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 18 ( 17 ): %vreg5:53 = MOVSDrm Mem(Base(%vreg4:52))
 19 ( 18 ): %xmm0:32 = MOVSDrr Register(%vreg5:53)
 20 ( 19 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 21 ( 20 ): %eax:0 = CALL Mem(Address(addr<fn:color_of>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 22 ( 21 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 23 ( 22 ): %vreg6:54 = Copy Register(%eax:0)
 24 ( 23 ): %edi:7 = MOVrr32 Register(%vreg6:54)
 25 ( 24 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 26 ( 25 ): CALL Mem(Address(addr<fn:cilk.print.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 27 ( 26 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 28 ( 27 ): %edi:7 = MOVri32 Constant(i32 32)
 29 ( 28 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 29 ): CALL Mem(Address(addr<fn:cilk.printch.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 31 ( 30 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 31 ): %vreg7:55 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 33 ( 32 ): %vreg8:56 = Copy Register(%vreg7:55)
 34 ( 50 ): %vreg8:56 = ADDr64i32 Register(%vreg8:56), Constant(i32 16)
 35 ( 33 ): %vreg9:57 = MOVSDrm Mem(Base(%vreg8:56))
 36 ( 34 ): %xmm0:32 = MOVSDrr Register(%vreg9:57)
 37 ( 35 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 38 ( 36 ): %eax:0 = CALL Mem(Address(addr<fn:color_of>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 39 ( 37 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 40 ( 38 ): %vreg10:58 = Copy Register(%eax:0)
 41 ( 39 ): %edi:7 = MOVrr32 Register(%vreg10:58)
 42 ( 40 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 43 ( 41 ): CALL Mem(Address(addr<fn:cilk.print.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 44 ( 42 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 45 ( 43 ): %edi:7 = MOVri32 Constant(i32 10)
 46 ( 44 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 47 ( 45 ): CALL Mem(Address(addr<fn:cilk.printch.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 48 ( 46 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 49 ( 47 ): %eax:0 = MOVri32 Constant(i32 0)
 50 ( 48 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: print_col, ty: functy:34):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0, %vreg4:52, %vreg0:48, %vreg6:54, %vreg2:50, %vreg7:55, %vreg3:51, %vreg5:53, %vreg9:57, %xmm0:32, %edi:7, %vreg1:49, %vreg8:56, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 49 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 50 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }] } })
 0  ( 0  ): %vreg0:48 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 1  ( 1  ): %vreg1:49 = MOVSDrm Mem(Base(%vreg0:48))
 2  ( 2  ): %xmm0:32 = MOVSDrr Register(%vreg1:49)
 3  ( 3  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 4  ): %eax:0 = CALL Mem(Address(addr<fn:color_of>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 5  ( 5  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 6  ( 6  ): %vreg2:50 = Copy Register(%eax:0)
 7  ( 7  ): %edi:7 = MOVrr32 Register(%vreg2:50)
 8  ( 8  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 9  ( 9  ): CALL Mem(Address(addr<fn:cilk.print.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 10 ( 10 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 11 ( 11 ): %edi:7 = MOVri32 Constant(i32 32)
 12 ( 12 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 13 ( 13 ): CALL Mem(Address(addr<fn:cilk.printch.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 14 ( 14 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 15 ( 15 ): %vreg3:51 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 16 ( 16 ): %vreg4:52 = Copy Register(%vreg3:51)
 17 ( 49 ): %vreg4:52 = ADDr64i32 Register(%vreg4:52), Constant(i32 8)
 18 ( 17 ): %vreg5:53 = MOVSDrm Mem(Base(%vreg4:52))
 19 ( 18 ): %xmm0:32 = MOVSDrr Register(%vreg5:53)
 20 ( 19 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 21 ( 20 ): %eax:0 = CALL Mem(Address(addr<fn:color_of>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 22 ( 21 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 23 ( 22 ): %vreg6:54 = Copy Register(%eax:0)
 24 ( 23 ): %edi:7 = MOVrr32 Register(%vreg6:54)
 25 ( 24 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 26 ( 25 ): CALL Mem(Address(addr<fn:cilk.print.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 27 ( 26 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 28 ( 27 ): %edi:7 = MOVri32 Constant(i32 32)
 29 ( 28 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 30 ( 29 ): CALL Mem(Address(addr<fn:cilk.printch.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 31 ( 30 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 32 ( 31 ): %vreg7:55 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 33 ( 32 ): %vreg8:56 = Copy Register(%vreg7:55)
 34 ( 50 ): %vreg8:56 = ADDr64i32 Register(%vreg8:56), Constant(i32 16)
 35 ( 33 ): %vreg9:57 = MOVSDrm Mem(Base(%vreg8:56))
 36 ( 34 ): %xmm0:32 = MOVSDrr Register(%vreg9:57)
 37 ( 35 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 38 ( 36 ): %eax:0 = CALL Mem(Address(addr<fn:color_of>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 39 ( 37 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 40 ( 38 ): %vreg10:58 = Copy Register(%eax:0)
 41 ( 39 ): %edi:7 = MOVrr32 Register(%vreg10:58)
 42 ( 40 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 43 ( 41 ): CALL Mem(Address(addr<fn:cilk.print.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 44 ( 42 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 45 ( 43 ): %edi:7 = MOVri32 Constant(i32 10)
 46 ( 44 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 47 ( 45 ): CALL Mem(Address(addr<fn:cilk.printch.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 48 ( 46 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 49 ( 47 ): %eax:0 = MOVri32 Constant(i32 0)
 50 ( 48 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: main, ty: functy:35):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %rax:16, %vreg7:55}, live_in: {}, live_out: {%vreg7:55} } }, pred: [], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 272 }, Id { idx: 5 }] } })
 0  ( 0  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 1  ( 1  ): %rax:16 = CALL Mem(Address(addr<fn:Env_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 3  ( 3  ): %vreg6:54 = Copy Register(%rax:16)
 4  ( 4  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)), Register(%vreg6:54)
 5  (272 ): %vreg7:55 = Copy Constant(i32 0)
 6  ( 5  ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg0:48}, live_in: {%vreg7:55}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }, Id { idx: 13 }], succ: [Id { idx: 2 }, Id { idx: 14 }], iseq: RefCell { value: [Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }] } })
 7  ( 7  ): %vreg0:48 = Copy Register(%vreg7:55)
 8  ( 8  ): CMPri Register(%vreg0:48), Constant(i32 300)
 9  ( 9  ): JL Branch(Id { idx: 2 })
 10 ( 10 ): JMP Branch(Id { idx: 14 })
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg8:56}, live_in: {%vreg0:48}, live_out: {%vreg0:48, %vreg8:56} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 274 }, Id { idx: 11 }] } })
 11 (274 ): %vreg8:56 = Copy Constant(i32 0)
 12 ( 11 ): JMP Branch(Id { idx: 3 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg1:49}, live_in: {%vreg0:48, %vreg8:56}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 2 }, Id { idx: 12 }], succ: [Id { idx: 4 }, Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }] } })
 13 ( 13 ): %vreg1:49 = Copy Register(%vreg8:56)
 14 ( 14 ): CMPri Register(%vreg1:49), Constant(i32 300)
 15 ( 15 ): JL Branch(Id { idx: 4 })
 16 ( 16 ): JMP Branch(Id { idx: 13 })
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg21:69, %vreg18:66, %vreg17:65, %vreg24:72, %xmm0:32, %vreg35:83, %vreg33:81, %vreg26:74, %vreg12:60, %rdx:18, %xmm4:36, %vreg29:77, %vreg14:62, %vreg19:67, %vreg25:73, %r9:25, %edi:7, %vreg30:78, %xmm1:33, %xmm2:34, %rcx:17, %rax:16, %rsi:22, %vreg15:63, %vreg9:57, %vreg27:75, %vreg22:70, %vreg16:64, %vreg34:82, %eax:0, %vreg13:61, %vreg31:79, %vreg28:76, %vreg32:80, %rdi:23, %vreg10:58, %vreg11:59, %vreg23:71, %vreg20:68}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 3 }], succ: [Id { idx: 5 }, Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 278 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 279 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 280 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 281 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 282 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }] } })
 17 ( 17 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 18 ( 18 ): %xmm1:33 = MOVSDrm64 Constant(f64 2)
 19 ( 19 ): %xmm2:34 = MOVSDrm64 Constant(f64 6)
 20 ( 20 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 21 ( 21 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 22 ( 22 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 23 ( 23 ): %vreg9:57 = Copy Register(%rax:16)
 24 ( 24 ): %edi:7 = MOVrr32 Register(%vreg1:49)
 25 ( 25 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 26 ( 26 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.i32_to_f64.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 27 ( 27 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 28 ( 28 ): %vreg10:58 = Copy Register(%xmm0:32)
 29 ( 29 ): %vreg11:59 = MOVSDrm64 Constant(f64 150)
 30 ( 30 ): %vreg12:60 = Copy Register(%vreg10:58)
 31 (278 ): %vreg12:60 = DIVSDrr Register(%vreg12:60), Register(%vreg11:59)
 32 ( 31 ): %vreg13:61 = MOVSDrm64 Constant(f64 1)
 33 ( 32 ): %vreg14:62 = Copy Register(%vreg12:60)
 34 (279 ): %vreg14:62 = SUBSDrr Register(%vreg14:62), Register(%vreg13:61)
 35 ( 33 ): %vreg15:63 = MOVri32 Constant(i32 300)
 36 ( 34 ): %vreg16:64 = Copy Register(%vreg15:63)
 37 (280 ): %vreg16:64 = SUBrr32 Register(%vreg16:64), Register(%vreg0:48)
 38 ( 35 ): %edi:7 = MOVrr32 Register(%vreg16:64)
 39 ( 36 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 40 ( 37 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.i32_to_f64.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 41 ( 38 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 42 ( 39 ): %vreg17:65 = Copy Register(%xmm0:32)
 43 ( 40 ): %vreg18:66 = MOVSDrm64 Constant(f64 150)
 44 ( 41 ): %vreg19:67 = Copy Register(%vreg17:65)
 45 (281 ): %vreg19:67 = DIVSDrr Register(%vreg19:67), Register(%vreg18:66)
 46 ( 42 ): %vreg20:68 = MOVSDrm64 Constant(f64 1)
 47 ( 43 ): %vreg21:69 = Copy Register(%vreg19:67)
 48 (282 ): %vreg21:69 = SUBSDrr Register(%vreg21:69), Register(%vreg20:68)
 49 ( 44 ): %xmm0:32 = MOVSDrr Register(%vreg14:62)
 50 ( 45 ): %xmm1:33 = MOVSDrr Register(%vreg21:69)
 51 ( 46 ): %xmm2:34 = MOVSDrm64 Constant(f64 -1)
 52 ( 47 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 53 ( 48 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 54 ( 49 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 55 ( 50 ): %vreg22:70 = Copy Register(%rax:16)
 56 ( 51 ): %rdi:23 = MOVrr64 Register(%vreg22:70)
 57 ( 52 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 58 ( 53 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_normalize>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
 59 ( 54 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 60 ( 55 ): %vreg23:71 = Copy Register(%rax:16)
 61 ( 56 ): %rdi:23 = MOVrr64 Register(%vreg9:57)
 62 ( 57 ): %rsi:22 = MOVrr64 Register(%vreg23:71)
 63 ( 58 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 64 ( 59 ): %rax:16 = CALL Mem(Address(addr<fn:Ray_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 65 ( 60 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 66 ( 61 ): %vreg24:72 = Copy Register(%rax:16)
 67 ( 62 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>)), Register(%vreg24:72)
 68 ( 63 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 69 ( 64 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 70 ( 65 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 71 ( 66 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 72 ( 67 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 73 ( 68 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 74 ( 69 ): %vreg25:73 = Copy Register(%rax:16)
 75 ( 70 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 76 ( 71 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 77 ( 72 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 78 ( 73 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 79 ( 74 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 80 ( 75 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 81 ( 76 ): %vreg26:74 = Copy Register(%rax:16)
 82 ( 77 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 83 ( 78 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 84 ( 79 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 85 ( 80 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 86 ( 81 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 87 ( 82 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 88 ( 83 ): %vreg27:75 = Copy Register(%rax:16)
 89 ( 84 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 90 ( 85 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 91 ( 86 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 92 ( 87 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 93 ( 88 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 94 ( 89 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 95 ( 90 ): %vreg28:76 = Copy Register(%rax:16)
 96 ( 91 ): %edi:7 = MOVri32 Constant(i32 0)
 97 ( 92 ): %rsi:22 = MOVrr64 Register(%vreg25:73)
 98 ( 93 ): %rdx:18 = MOVrr64 Register(%vreg26:74)
 99 ( 94 ): %rcx:17 = MOVrr64 Register(%vreg27:75)
100 ( 95 ): %xmm4:36 = MOVSDrm64 Constant(f64 10000000)
101 ( 96 ): %r9:25 = MOVrr64 Register(%vreg28:76)
102 ( 97 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
103 ( 98 ): %rax:16 = CALL Mem(Address(addr<fn:Isect_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,%rsi:22,%rdx:18,%rcx:17,%xmm4:36,%r9:25,)
104 ( 99 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
105 (100 ): %vreg29:77 = Copy Register(%rax:16)
106 (101 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)), Register(%vreg29:77)
107 (102 ): %vreg30:78 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
108 (103 ): %vreg31:79 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
109 (104 ): %vreg32:80 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
110 (105 ): %rdi:23 = MOVrr64 Register(%vreg30:78)
111 (106 ): %rsi:22 = MOVrr64 Register(%vreg31:79)
112 (107 ): %rdx:18 = MOVrr64 Register(%vreg32:80)
113 (108 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
114 (109 ): %eax:0 = CALL Mem(Address(addr<fn:Env_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
115 (110 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
116 (111 ): %vreg33:81 = Copy Register(%eax:0)
117 (112 ): %vreg34:82 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
118 (113 ): %vreg35:83 = MOVrm32 Mem(Base(%vreg34:82))
119 (114 ): CMPri Register(%vreg35:83), Constant(i32 0)
120 (115 ): JG Branch(Id { idx: 5 })
121 (116 ): JMP Branch(Id { idx: 11 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%xmm0:32, %xmm1:33, %rax:16, %vreg39:87, %vreg44:92, %rsi:22, %vreg37:85, %vreg38:86, %vreg36:84, %vreg43:91, %rdi:23, %vreg40:88, %vreg41:89, %vreg42:90, %xmm2:34}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg44:92, %vreg0:48, %vreg1:49} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 117 }, Id { idx: 118 }, Id { idx: 283 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 129 }, Id { idx: 284 }, Id { idx: 130 }, Id { idx: 131 }, Id { idx: 132 }, Id { idx: 133 }, Id { idx: 134 }, Id { idx: 135 }, Id { idx: 136 }, Id { idx: 137 }, Id { idx: 276 }, Id { idx: 138 }] } })
122 (117 ): %vreg36:84 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
123 (118 ): %vreg37:85 = Copy Register(%vreg36:84)
124 (283 ): %vreg37:85 = ADDr64i32 Register(%vreg37:85), Constant(i32 20)
125 (119 ): %vreg38:86 = MOVrm64 Mem(Base(%vreg37:85))
126 (120 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>)), Register(%vreg38:86)
127 (121 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
128 (122 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
129 (123 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
130 (124 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
131 (125 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
132 (126 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
133 (127 ): %vreg39:87 = Copy Register(%rax:16)
134 (128 ): %vreg40:88 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
135 (129 ): %vreg41:89 = Copy Register(%vreg40:88)
136 (284 ): %vreg41:89 = ADDr64i32 Register(%vreg41:89), Constant(i32 20)
137 (130 ): %vreg42:90 = MOVrm64 Mem(Base(%vreg41:89))
138 (131 ): %rdi:23 = MOVrr64 Register(%vreg39:87)
139 (132 ): %rsi:22 = MOVrr64 Register(%vreg42:90)
140 (133 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
141 (134 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_multi>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
142 (135 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
143 (136 ): %vreg43:91 = Copy Register(%rax:16)
144 (137 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>)), Register(%vreg43:91)
145 (276 ): %vreg44:92 = Copy Constant(i32 1)
146 (138 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50}, live_in: {%vreg44:92, %vreg0:48, %vreg1:49}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 5 }, Id { idx: 9 }], succ: [Id { idx: 7 }, Id { idx: 10 }], iseq: RefCell { value: [Id { idx: 140 }, Id { idx: 141 }, Id { idx: 142 }, Id { idx: 143 }] } })
147 (140 ): %vreg2:50 = Copy Register(%vreg44:92)
148 (141 ): CMPri Register(%vreg2:50), Constant(i32 4)
149 (142 ): JL Branch(Id { idx: 7 })
150 (143 ): JMP Branch(Id { idx: 10 })
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg60:108, %vreg45:93, %rax:16, %vreg62:110, %rsi:22, %vreg49:97, %vreg61:109, %vreg64:112, %rdx:18, %vreg66:114, %vreg59:107, %vreg56:104, %vreg48:96, %vreg57:105, %vreg46:94, %vreg50:98, %vreg51:99, %vreg53:101, %eax:0, %vreg65:113, %vreg63:111, %vreg52:100, %rdi:23, %vreg54:102, %vreg47:95, %vreg55:103, %vreg58:106, %xmm1:33}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 8 }, Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 144 }, Id { idx: 145 }, Id { idx: 285 }, Id { idx: 146 }, Id { idx: 147 }, Id { idx: 148 }, Id { idx: 286 }, Id { idx: 149 }, Id { idx: 150 }, Id { idx: 151 }, Id { idx: 152 }, Id { idx: 153 }, Id { idx: 154 }, Id { idx: 155 }, Id { idx: 156 }, Id { idx: 157 }, Id { idx: 158 }, Id { idx: 159 }, Id { idx: 160 }, Id { idx: 161 }, Id { idx: 162 }, Id { idx: 163 }, Id { idx: 287 }, Id { idx: 164 }, Id { idx: 165 }, Id { idx: 166 }, Id { idx: 288 }, Id { idx: 167 }, Id { idx: 168 }, Id { idx: 169 }, Id { idx: 170 }, Id { idx: 171 }, Id { idx: 172 }, Id { idx: 173 }, Id { idx: 174 }, Id { idx: 175 }, Id { idx: 176 }, Id { idx: 177 }, Id { idx: 178 }, Id { idx: 179 }, Id { idx: 180 }, Id { idx: 181 }, Id { idx: 182 }, Id { idx: 183 }, Id { idx: 184 }, Id { idx: 185 }, Id { idx: 186 }, Id { idx: 187 }, Id { idx: 188 }, Id { idx: 189 }, Id { idx: 190 }, Id { idx: 191 }, Id { idx: 192 }, Id { idx: 193 }, Id { idx: 194 }, Id { idx: 195 }] } })
151 (144 ): %vreg45:93 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
152 (145 ): %vreg46:94 = Copy Register(%vreg45:93)
153 (285 ): %vreg46:94 = ADDr64i32 Register(%vreg46:94), Constant(i32 4)
154 (146 ): %vreg47:95 = MOVrm64 Mem(Base(%vreg46:94))
155 (147 ): %vreg48:96 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
156 (148 ): %vreg49:97 = Copy Register(%vreg48:96)
157 (286 ): %vreg49:97 = ADDr64i32 Register(%vreg49:97), Constant(i32 12)
158 (149 ): %vreg50:98 = MOVrm64 Mem(Base(%vreg49:97))
159 (150 ): %rdi:23 = MOVrr64 Register(%vreg50:98)
160 (151 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.0001)
161 (152 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
162 (153 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
163 (154 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
164 (155 ): %vreg51:99 = Copy Register(%rax:16)
165 (156 ): %rdi:23 = MOVrr64 Register(%vreg47:95)
166 (157 ): %rsi:22 = MOVrr64 Register(%vreg51:99)
167 (158 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
168 (159 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
169 (160 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
170 (161 ): %vreg52:100 = Copy Register(%rax:16)
171 (162 ): %vreg53:101 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
172 (163 ): %vreg54:102 = Copy Register(%vreg53:101)
173 (287 ): %vreg54:102 = ADDr64i32 Register(%vreg54:102), Constant(i32 36)
174 (164 ): %vreg55:103 = MOVrm64 Mem(Base(%vreg54:102))
175 (165 ): %vreg56:104 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
176 (166 ): %vreg57:105 = Copy Register(%vreg56:104)
177 (288 ): %vreg57:105 = ADDr64i32 Register(%vreg57:105), Constant(i32 12)
178 (167 ): %vreg58:106 = MOVrm64 Mem(Base(%vreg57:105))
179 (168 ): %rdi:23 = MOVrr64 Register(%vreg55:103)
180 (169 ): %rsi:22 = MOVrr64 Register(%vreg58:106)
181 (170 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
182 (171 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_reflect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
183 (172 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
184 (173 ): %vreg59:107 = Copy Register(%rax:16)
185 (174 ): %rdi:23 = MOVrr64 Register(%vreg52:100)
186 (175 ): %rsi:22 = MOVrr64 Register(%vreg59:107)
187 (176 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
188 (177 ): %rax:16 = CALL Mem(Address(addr<fn:Ray_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
189 (178 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
190 (179 ): %vreg60:108 = Copy Register(%rax:16)
191 (180 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(5)>)), Register(%vreg60:108)
192 (181 ): %vreg61:109 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
193 (182 ): %vreg62:110 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(5)>))
194 (183 ): %vreg63:111 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
195 (184 ): %rdi:23 = MOVrr64 Register(%vreg61:109)
196 (185 ): %rsi:22 = MOVrr64 Register(%vreg62:110)
197 (186 ): %rdx:18 = MOVrr64 Register(%vreg63:111)
198 (187 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
199 (188 ): %eax:0 = CALL Mem(Address(addr<fn:Env_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
200 (189 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
201 (190 ): %vreg64:112 = Copy Register(%eax:0)
202 (191 ): %vreg65:113 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
203 (192 ): %vreg66:114 = MOVrm32 Mem(Base(%vreg65:113))
204 (193 ): CMPrr Register(%vreg2:50), Register(%vreg66:114)
205 (194 ): JL Branch(Id { idx: 8 })
206 (195 ): JMP Branch(Id { idx: 9 })
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rax:16, %vreg76:124, %vreg77:125, %rsi:22, %vreg70:118, %vreg73:121, %vreg74:122, %vreg71:119, %vreg68:116, %vreg69:117, %vreg67:115, %vreg72:120, %rdi:23, %vreg75:123, %vreg78:126}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 7 }], succ: [Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 196 }, Id { idx: 197 }, Id { idx: 198 }, Id { idx: 199 }, Id { idx: 289 }, Id { idx: 200 }, Id { idx: 201 }, Id { idx: 202 }, Id { idx: 203 }, Id { idx: 204 }, Id { idx: 205 }, Id { idx: 206 }, Id { idx: 207 }, Id { idx: 208 }, Id { idx: 209 }, Id { idx: 210 }, Id { idx: 211 }, Id { idx: 212 }, Id { idx: 213 }, Id { idx: 214 }, Id { idx: 215 }, Id { idx: 216 }, Id { idx: 290 }, Id { idx: 217 }, Id { idx: 218 }, Id { idx: 219 }, Id { idx: 220 }, Id { idx: 221 }, Id { idx: 222 }, Id { idx: 223 }, Id { idx: 224 }, Id { idx: 225 }] } })
207 (196 ): %vreg67:115 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>))
208 (197 ): %vreg68:116 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>))
209 (198 ): %vreg69:117 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
210 (199 ): %vreg70:118 = Copy Register(%vreg69:117)
211 (289 ): %vreg70:118 = ADDr64i32 Register(%vreg70:118), Constant(i32 20)
212 (200 ): %vreg71:119 = MOVrm64 Mem(Base(%vreg70:118))
213 (201 ): %rdi:23 = MOVrr64 Register(%vreg68:116)
214 (202 ): %rsi:22 = MOVrr64 Register(%vreg71:119)
215 (203 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
216 (204 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_multi>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
217 (205 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
218 (206 ): %vreg72:120 = Copy Register(%rax:16)
219 (207 ): %rdi:23 = MOVrr64 Register(%vreg67:115)
220 (208 ): %rsi:22 = MOVrr64 Register(%vreg72:120)
221 (209 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
222 (210 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
223 (211 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
224 (212 ): %vreg73:121 = Copy Register(%rax:16)
225 (213 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>)), Register(%vreg73:121)
226 (214 ): %vreg74:122 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>))
227 (215 ): %vreg75:123 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
228 (216 ): %vreg76:124 = Copy Register(%vreg75:123)
229 (290 ): %vreg76:124 = ADDr64i32 Register(%vreg76:124), Constant(i32 20)
230 (217 ): %vreg77:125 = MOVrm64 Mem(Base(%vreg76:124))
231 (218 ): %rdi:23 = MOVrr64 Register(%vreg74:122)
232 (219 ): %rsi:22 = MOVrr64 Register(%vreg77:125)
233 (220 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
234 (221 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_multi>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
235 (222 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
236 (223 ): %vreg78:126 = Copy Register(%rax:16)
237 (224 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>)), Register(%vreg78:126)
238 (225 ): JMP Branch(Id { idx: 9 })
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg3:51, %vreg44:92, %vreg79:127}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg44:92, %vreg0:48, %vreg1:49} } }, pred: [Id { idx: 7 }, Id { idx: 8 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 226 }, Id { idx: 291 }, Id { idx: 227 }, Id { idx: 277 }, Id { idx: 228 }] } })
239 (226 ): %vreg79:127 = Copy Register(%vreg2:50)
240 (291 ): %vreg79:127 = ADDri32 Register(%vreg79:127), Constant(i32 1)
241 (227 ): %vreg3:51 = Copy Register(%vreg79:127)
242 (277 ): %vreg44:92 = Copy Register(%vreg3:51)
243 (228 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #10 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg81:129, %vreg80:128, %eax:0}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 229 }, Id { idx: 230 }, Id { idx: 231 }, Id { idx: 232 }, Id { idx: 233 }, Id { idx: 234 }, Id { idx: 235 }] } })
244 (229 ): %vreg80:128 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>))
245 (230 ): %rdi:23 = MOVrr64 Register(%vreg80:128)
246 (231 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
247 (232 ): %eax:0 = CALL Mem(Address(addr<fn:print_col>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
248 (233 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
249 (234 ): %vreg81:129 = Copy Register(%eax:0)
250 (235 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #11 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%xmm0:32, %xmm1:33, %vreg91:139, %xmm2:34, %vreg93:141, %rax:16, %vreg86:134, %vreg84:132, %vreg82:130, %vreg97:145, %vreg92:140, %vreg94:142, %vreg96:144, %eax:0, %vreg98:146, %vreg89:137, %vreg90:138, %vreg87:135, %vreg83:131, %vreg88:136, %rdi:23, %vreg85:133, %vreg95:143}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 236 }, Id { idx: 237 }, Id { idx: 292 }, Id { idx: 238 }, Id { idx: 239 }, Id { idx: 293 }, Id { idx: 240 }, Id { idx: 241 }, Id { idx: 242 }, Id { idx: 294 }, Id { idx: 243 }, Id { idx: 244 }, Id { idx: 295 }, Id { idx: 245 }, Id { idx: 246 }, Id { idx: 247 }, Id { idx: 296 }, Id { idx: 248 }, Id { idx: 249 }, Id { idx: 297 }, Id { idx: 250 }, Id { idx: 251 }, Id { idx: 252 }, Id { idx: 253 }, Id { idx: 254 }, Id { idx: 255 }, Id { idx: 256 }, Id { idx: 257 }, Id { idx: 258 }, Id { idx: 259 }, Id { idx: 260 }, Id { idx: 261 }, Id { idx: 262 }, Id { idx: 263 }] } })
251 (236 ): %vreg82:130 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
252 (237 ): %vreg83:131 = Copy Register(%vreg82:130)
253 (292 ): %vreg83:131 = ADDr64i32 Register(%vreg83:131), Constant(i32 8)
254 (238 ): %vreg84:132 = MOVrm64 Mem(Base(%vreg83:131))
255 (239 ): %vreg85:133 = Copy Register(%vreg84:132)
256 (293 ): %vreg85:133 = ADDr64i32 Register(%vreg85:133), Constant(i32 8)
257 (240 ): %vreg86:134 = MOVSDrm Mem(Base(%vreg85:133))
258 (241 ): %vreg87:135 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
259 (242 ): %vreg88:136 = Copy Register(%vreg87:135)
260 (294 ): %vreg88:136 = ADDr64i32 Register(%vreg88:136), Constant(i32 8)
261 (243 ): %vreg89:137 = MOVrm64 Mem(Base(%vreg88:136))
262 (244 ): %vreg90:138 = Copy Register(%vreg89:137)
263 (295 ): %vreg90:138 = ADDr64i32 Register(%vreg90:138), Constant(i32 8)
264 (245 ): %vreg91:139 = MOVSDrm Mem(Base(%vreg90:138))
265 (246 ): %vreg92:140 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
266 (247 ): %vreg93:141 = Copy Register(%vreg92:140)
267 (296 ): %vreg93:141 = ADDr64i32 Register(%vreg93:141), Constant(i32 8)
268 (248 ): %vreg94:142 = MOVrm64 Mem(Base(%vreg93:141))
269 (249 ): %vreg95:143 = Copy Register(%vreg94:142)
270 (297 ): %vreg95:143 = ADDr64i32 Register(%vreg95:143), Constant(i32 8)
271 (250 ): %vreg96:144 = MOVSDrm Mem(Base(%vreg95:143))
272 (251 ): %xmm0:32 = MOVSDrr Register(%vreg86:134)
273 (252 ): %xmm1:33 = MOVSDrr Register(%vreg91:139)
274 (253 ): %xmm2:34 = MOVSDrr Register(%vreg96:144)
275 (254 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
276 (255 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
277 (256 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
278 (257 ): %vreg97:145 = Copy Register(%rax:16)
279 (258 ): %rdi:23 = MOVrr64 Register(%vreg97:145)
280 (259 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
281 (260 ): %eax:0 = CALL Mem(Address(addr<fn:print_col>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
282 (261 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
283 (262 ): %vreg98:146 = Copy Register(%eax:0)
284 (263 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #12 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg4:52, %vreg8:56, %vreg99:147}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg0:48, %vreg8:56} } }, pred: [Id { idx: 10 }, Id { idx: 11 }], succ: [Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 264 }, Id { idx: 298 }, Id { idx: 265 }, Id { idx: 275 }, Id { idx: 266 }] } })
285 (264 ): %vreg99:147 = Copy Register(%vreg1:49)
286 (298 ): %vreg99:147 = ADDri32 Register(%vreg99:147), Constant(i32 1)
287 (265 ): %vreg4:52 = Copy Register(%vreg99:147)
288 (275 ): %vreg8:56 = Copy Register(%vreg4:52)
289 (266 ): JMP Branch(Id { idx: 3 })
MachineBasicBlock #13 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg100:148, %vreg5:53, %vreg7:55}, live_in: {%vreg0:48}, live_out: {%vreg7:55} } }, pred: [Id { idx: 3 }], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 267 }, Id { idx: 299 }, Id { idx: 268 }, Id { idx: 273 }, Id { idx: 269 }] } })
290 (267 ): %vreg100:148 = Copy Register(%vreg0:48)
291 (299 ): %vreg100:148 = ADDri32 Register(%vreg100:148), Constant(i32 1)
292 (268 ): %vreg5:53 = Copy Register(%vreg100:148)
293 (273 ): %vreg7:55 = Copy Register(%vreg5:53)
294 (269 ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #14 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 1 }], succ: [], iseq: RefCell { value: [Id { idx: 270 }, Id { idx: 271 }] } })
295 (270 ): %eax:0 = MOVri32 Constant(i32 0)
296 (271 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: main, ty: functy:35):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %rax:16, %vreg7:55}, live_in: {}, live_out: {%vreg7:55} } }, pred: [], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 272 }, Id { idx: 5 }] } })
 0  ( 0  ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 1  ( 1  ): %rax:16 = CALL Mem(Address(addr<fn:Env_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,)
 2  ( 2  ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 3  ( 3  ): %vreg6:54 = Copy Register(%rax:16)
 4  ( 4  ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)), Register(%vreg6:54)
 5  (272 ): %vreg7:55 = Copy Constant(i32 0)
 6  ( 5  ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg0:48}, live_in: {%vreg7:55}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }, Id { idx: 13 }], succ: [Id { idx: 2 }, Id { idx: 14 }], iseq: RefCell { value: [Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }] } })
 7  ( 7  ): %vreg0:48 = Copy Register(%vreg7:55)
 8  ( 8  ): CMPri Register(%vreg0:48), Constant(i32 300)
 9  ( 9  ): JL Branch(Id { idx: 2 })
 10 ( 10 ): JMP Branch(Id { idx: 14 })
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg8:56}, live_in: {%vreg0:48}, live_out: {%vreg0:48, %vreg8:56} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 274 }, Id { idx: 11 }] } })
 11 (274 ): %vreg8:56 = Copy Constant(i32 0)
 12 ( 11 ): JMP Branch(Id { idx: 3 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg1:49}, live_in: {%vreg0:48, %vreg8:56}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 2 }, Id { idx: 12 }], succ: [Id { idx: 4 }, Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }] } })
 13 ( 13 ): %vreg1:49 = Copy Register(%vreg8:56)
 14 ( 14 ): CMPri Register(%vreg1:49), Constant(i32 300)
 15 ( 15 ): JL Branch(Id { idx: 4 })
 16 ( 16 ): JMP Branch(Id { idx: 13 })
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg21:69, %vreg18:66, %vreg17:65, %vreg24:72, %xmm0:32, %vreg35:83, %vreg33:81, %vreg26:74, %vreg12:60, %rdx:18, %xmm4:36, %vreg29:77, %vreg14:62, %vreg19:67, %vreg25:73, %r9:25, %edi:7, %vreg30:78, %xmm1:33, %xmm2:34, %rcx:17, %rax:16, %rsi:22, %vreg15:63, %vreg9:57, %vreg27:75, %vreg22:70, %vreg16:64, %vreg34:82, %eax:0, %vreg13:61, %vreg31:79, %vreg28:76, %vreg32:80, %rdi:23, %vreg10:58, %vreg11:59, %vreg23:71, %vreg20:68}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 3 }], succ: [Id { idx: 5 }, Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 278 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 279 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 280 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 281 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 282 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }] } })
 17 ( 17 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 18 ( 18 ): %xmm1:33 = MOVSDrm64 Constant(f64 2)
 19 ( 19 ): %xmm2:34 = MOVSDrm64 Constant(f64 6)
 20 ( 20 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 21 ( 21 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 22 ( 22 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 23 ( 23 ): %vreg9:57 = Copy Register(%rax:16)
 24 ( 24 ): %edi:7 = MOVrr32 Register(%vreg1:49)
 25 ( 25 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 26 ( 26 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.i32_to_f64.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 27 ( 27 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 28 ( 28 ): %vreg10:58 = Copy Register(%xmm0:32)
 29 ( 29 ): %vreg11:59 = MOVSDrm64 Constant(f64 150)
 30 ( 30 ): %vreg12:60 = Copy Register(%vreg10:58)
 31 (278 ): %vreg12:60 = DIVSDrr Register(%vreg12:60), Register(%vreg11:59)
 32 ( 31 ): %vreg13:61 = MOVSDrm64 Constant(f64 1)
 33 ( 32 ): %vreg14:62 = Copy Register(%vreg12:60)
 34 (279 ): %vreg14:62 = SUBSDrr Register(%vreg14:62), Register(%vreg13:61)
 35 ( 33 ): %vreg15:63 = MOVri32 Constant(i32 300)
 36 ( 34 ): %vreg16:64 = Copy Register(%vreg15:63)
 37 (280 ): %vreg16:64 = SUBrr32 Register(%vreg16:64), Register(%vreg0:48)
 38 ( 35 ): %edi:7 = MOVrr32 Register(%vreg16:64)
 39 ( 36 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 40 ( 37 ): %xmm0:32 = CALL Mem(Address(addr<fn:cilk.i32_to_f64.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 41 ( 38 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 42 ( 39 ): %vreg17:65 = Copy Register(%xmm0:32)
 43 ( 40 ): %vreg18:66 = MOVSDrm64 Constant(f64 150)
 44 ( 41 ): %vreg19:67 = Copy Register(%vreg17:65)
 45 (281 ): %vreg19:67 = DIVSDrr Register(%vreg19:67), Register(%vreg18:66)
 46 ( 42 ): %vreg20:68 = MOVSDrm64 Constant(f64 1)
 47 ( 43 ): %vreg21:69 = Copy Register(%vreg19:67)
 48 (282 ): %vreg21:69 = SUBSDrr Register(%vreg21:69), Register(%vreg20:68)
 49 ( 44 ): %xmm0:32 = MOVSDrr Register(%vreg14:62)
 50 ( 45 ): %xmm1:33 = MOVSDrr Register(%vreg21:69)
 51 ( 46 ): %xmm2:34 = MOVSDrm64 Constant(f64 -1)
 52 ( 47 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 53 ( 48 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 54 ( 49 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 55 ( 50 ): %vreg22:70 = Copy Register(%rax:16)
 56 ( 51 ): %rdi:23 = MOVrr64 Register(%vreg22:70)
 57 ( 52 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 58 ( 53 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_normalize>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
 59 ( 54 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 60 ( 55 ): %vreg23:71 = Copy Register(%rax:16)
 61 ( 56 ): %rdi:23 = MOVrr64 Register(%vreg9:57)
 62 ( 57 ): %rsi:22 = MOVrr64 Register(%vreg23:71)
 63 ( 58 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 64 ( 59 ): %rax:16 = CALL Mem(Address(addr<fn:Ray_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 65 ( 60 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 66 ( 61 ): %vreg24:72 = Copy Register(%rax:16)
 67 ( 62 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>)), Register(%vreg24:72)
 68 ( 63 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 69 ( 64 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 70 ( 65 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 71 ( 66 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 72 ( 67 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 73 ( 68 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 74 ( 69 ): %vreg25:73 = Copy Register(%rax:16)
 75 ( 70 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 76 ( 71 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 77 ( 72 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 78 ( 73 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 79 ( 74 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 80 ( 75 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 81 ( 76 ): %vreg26:74 = Copy Register(%rax:16)
 82 ( 77 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 83 ( 78 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 84 ( 79 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 85 ( 80 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 86 ( 81 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 87 ( 82 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 88 ( 83 ): %vreg27:75 = Copy Register(%rax:16)
 89 ( 84 ): %xmm0:32 = MOVSDrm64 Constant(f64 0)
 90 ( 85 ): %xmm1:33 = MOVSDrm64 Constant(f64 0)
 91 ( 86 ): %xmm2:34 = MOVSDrm64 Constant(f64 0)
 92 ( 87 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 93 ( 88 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 94 ( 89 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 95 ( 90 ): %vreg28:76 = Copy Register(%rax:16)
 96 ( 91 ): %edi:7 = MOVri32 Constant(i32 0)
 97 ( 92 ): %rsi:22 = MOVrr64 Register(%vreg25:73)
 98 ( 93 ): %rdx:18 = MOVrr64 Register(%vreg26:74)
 99 ( 94 ): %rcx:17 = MOVrr64 Register(%vreg27:75)
100 ( 95 ): %xmm4:36 = MOVSDrm64 Constant(f64 10000000)
101 ( 96 ): %r9:25 = MOVrr64 Register(%vreg28:76)
102 ( 97 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
103 ( 98 ): %rax:16 = CALL Mem(Address(addr<fn:Isect_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,%rsi:22,%rdx:18,%rcx:17,%xmm4:36,%r9:25,)
104 ( 99 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
105 (100 ): %vreg29:77 = Copy Register(%rax:16)
106 (101 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)), Register(%vreg29:77)
107 (102 ): %vreg30:78 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
108 (103 ): %vreg31:79 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
109 (104 ): %vreg32:80 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
110 (105 ): %rdi:23 = MOVrr64 Register(%vreg30:78)
111 (106 ): %rsi:22 = MOVrr64 Register(%vreg31:79)
112 (107 ): %rdx:18 = MOVrr64 Register(%vreg32:80)
113 (108 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
114 (109 ): %eax:0 = CALL Mem(Address(addr<fn:Env_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
115 (110 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
116 (111 ): %vreg33:81 = Copy Register(%eax:0)
117 (112 ): %vreg34:82 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
118 (113 ): %vreg35:83 = MOVrm32 Mem(Base(%vreg34:82))
119 (114 ): CMPri Register(%vreg35:83), Constant(i32 0)
120 (115 ): JG Branch(Id { idx: 5 })
121 (116 ): JMP Branch(Id { idx: 11 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%xmm0:32, %xmm1:33, %rax:16, %vreg39:87, %vreg44:92, %rsi:22, %vreg37:85, %vreg38:86, %vreg36:84, %vreg43:91, %rdi:23, %vreg40:88, %vreg41:89, %vreg42:90, %xmm2:34}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg44:92, %vreg0:48, %vreg1:49} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 117 }, Id { idx: 118 }, Id { idx: 283 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 129 }, Id { idx: 284 }, Id { idx: 130 }, Id { idx: 131 }, Id { idx: 132 }, Id { idx: 133 }, Id { idx: 134 }, Id { idx: 135 }, Id { idx: 136 }, Id { idx: 137 }, Id { idx: 276 }, Id { idx: 138 }] } })
122 (117 ): %vreg36:84 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
123 (118 ): %vreg37:85 = Copy Register(%vreg36:84)
124 (283 ): %vreg37:85 = ADDr64i32 Register(%vreg37:85), Constant(i32 20)
125 (119 ): %vreg38:86 = MOVrm64 Mem(Base(%vreg37:85))
126 (120 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>)), Register(%vreg38:86)
127 (121 ): %xmm0:32 = MOVSDrm64 Constant(f64 1)
128 (122 ): %xmm1:33 = MOVSDrm64 Constant(f64 1)
129 (123 ): %xmm2:34 = MOVSDrm64 Constant(f64 1)
130 (124 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
131 (125 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
132 (126 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
133 (127 ): %vreg39:87 = Copy Register(%rax:16)
134 (128 ): %vreg40:88 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
135 (129 ): %vreg41:89 = Copy Register(%vreg40:88)
136 (284 ): %vreg41:89 = ADDr64i32 Register(%vreg41:89), Constant(i32 20)
137 (130 ): %vreg42:90 = MOVrm64 Mem(Base(%vreg41:89))
138 (131 ): %rdi:23 = MOVrr64 Register(%vreg39:87)
139 (132 ): %rsi:22 = MOVrr64 Register(%vreg42:90)
140 (133 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
141 (134 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_multi>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
142 (135 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
143 (136 ): %vreg43:91 = Copy Register(%rax:16)
144 (137 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>)), Register(%vreg43:91)
145 (276 ): %vreg44:92 = Copy Constant(i32 1)
146 (138 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50}, live_in: {%vreg44:92, %vreg0:48, %vreg1:49}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 5 }, Id { idx: 9 }], succ: [Id { idx: 7 }, Id { idx: 10 }], iseq: RefCell { value: [Id { idx: 140 }, Id { idx: 141 }, Id { idx: 142 }, Id { idx: 143 }] } })
147 (140 ): %vreg2:50 = Copy Register(%vreg44:92)
148 (141 ): CMPri Register(%vreg2:50), Constant(i32 4)
149 (142 ): JL Branch(Id { idx: 7 })
150 (143 ): JMP Branch(Id { idx: 10 })
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg60:108, %vreg45:93, %rax:16, %vreg62:110, %rsi:22, %vreg49:97, %vreg61:109, %vreg64:112, %rdx:18, %vreg66:114, %vreg59:107, %vreg56:104, %vreg48:96, %vreg57:105, %vreg46:94, %vreg50:98, %vreg51:99, %vreg53:101, %eax:0, %vreg65:113, %vreg63:111, %vreg52:100, %rdi:23, %vreg54:102, %vreg47:95, %vreg55:103, %vreg58:106, %xmm1:33}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 8 }, Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 144 }, Id { idx: 145 }, Id { idx: 285 }, Id { idx: 146 }, Id { idx: 147 }, Id { idx: 148 }, Id { idx: 286 }, Id { idx: 149 }, Id { idx: 150 }, Id { idx: 151 }, Id { idx: 152 }, Id { idx: 153 }, Id { idx: 154 }, Id { idx: 155 }, Id { idx: 156 }, Id { idx: 157 }, Id { idx: 158 }, Id { idx: 159 }, Id { idx: 160 }, Id { idx: 161 }, Id { idx: 162 }, Id { idx: 163 }, Id { idx: 287 }, Id { idx: 164 }, Id { idx: 165 }, Id { idx: 166 }, Id { idx: 288 }, Id { idx: 167 }, Id { idx: 168 }, Id { idx: 169 }, Id { idx: 170 }, Id { idx: 171 }, Id { idx: 172 }, Id { idx: 173 }, Id { idx: 174 }, Id { idx: 175 }, Id { idx: 176 }, Id { idx: 177 }, Id { idx: 178 }, Id { idx: 179 }, Id { idx: 180 }, Id { idx: 181 }, Id { idx: 182 }, Id { idx: 183 }, Id { idx: 184 }, Id { idx: 185 }, Id { idx: 186 }, Id { idx: 187 }, Id { idx: 188 }, Id { idx: 189 }, Id { idx: 190 }, Id { idx: 191 }, Id { idx: 192 }, Id { idx: 193 }, Id { idx: 194 }, Id { idx: 195 }] } })
151 (144 ): %vreg45:93 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
152 (145 ): %vreg46:94 = Copy Register(%vreg45:93)
153 (285 ): %vreg46:94 = ADDr64i32 Register(%vreg46:94), Constant(i32 4)
154 (146 ): %vreg47:95 = MOVrm64 Mem(Base(%vreg46:94))
155 (147 ): %vreg48:96 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
156 (148 ): %vreg49:97 = Copy Register(%vreg48:96)
157 (286 ): %vreg49:97 = ADDr64i32 Register(%vreg49:97), Constant(i32 12)
158 (149 ): %vreg50:98 = MOVrm64 Mem(Base(%vreg49:97))
159 (150 ): %rdi:23 = MOVrr64 Register(%vreg50:98)
160 (151 ): %xmm1:33 = MOVSDrm64 Constant(f64 0.0001)
161 (152 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
162 (153 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_mul>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
163 (154 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
164 (155 ): %vreg51:99 = Copy Register(%rax:16)
165 (156 ): %rdi:23 = MOVrr64 Register(%vreg47:95)
166 (157 ): %rsi:22 = MOVrr64 Register(%vreg51:99)
167 (158 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
168 (159 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
169 (160 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
170 (161 ): %vreg52:100 = Copy Register(%rax:16)
171 (162 ): %vreg53:101 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
172 (163 ): %vreg54:102 = Copy Register(%vreg53:101)
173 (287 ): %vreg54:102 = ADDr64i32 Register(%vreg54:102), Constant(i32 36)
174 (164 ): %vreg55:103 = MOVrm64 Mem(Base(%vreg54:102))
175 (165 ): %vreg56:104 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
176 (166 ): %vreg57:105 = Copy Register(%vreg56:104)
177 (288 ): %vreg57:105 = ADDr64i32 Register(%vreg57:105), Constant(i32 12)
178 (167 ): %vreg58:106 = MOVrm64 Mem(Base(%vreg57:105))
179 (168 ): %rdi:23 = MOVrr64 Register(%vreg55:103)
180 (169 ): %rsi:22 = MOVrr64 Register(%vreg58:106)
181 (170 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
182 (171 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_reflect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
183 (172 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
184 (173 ): %vreg59:107 = Copy Register(%rax:16)
185 (174 ): %rdi:23 = MOVrr64 Register(%vreg52:100)
186 (175 ): %rsi:22 = MOVrr64 Register(%vreg59:107)
187 (176 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
188 (177 ): %rax:16 = CALL Mem(Address(addr<fn:Ray_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
189 (178 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
190 (179 ): %vreg60:108 = Copy Register(%rax:16)
191 (180 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(5)>)), Register(%vreg60:108)
192 (181 ): %vreg61:109 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>))
193 (182 ): %vreg62:110 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(5)>))
194 (183 ): %vreg63:111 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
195 (184 ): %rdi:23 = MOVrr64 Register(%vreg61:109)
196 (185 ): %rsi:22 = MOVrr64 Register(%vreg62:110)
197 (186 ): %rdx:18 = MOVrr64 Register(%vreg63:111)
198 (187 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
199 (188 ): %eax:0 = CALL Mem(Address(addr<fn:Env_intersect>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
200 (189 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
201 (190 ): %vreg64:112 = Copy Register(%eax:0)
202 (191 ): %vreg65:113 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
203 (192 ): %vreg66:114 = MOVrm32 Mem(Base(%vreg65:113))
204 (193 ): CMPrr Register(%vreg2:50), Register(%vreg66:114)
205 (194 ): JL Branch(Id { idx: 8 })
206 (195 ): JMP Branch(Id { idx: 9 })
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rax:16, %vreg76:124, %vreg77:125, %rsi:22, %vreg70:118, %vreg73:121, %vreg74:122, %vreg71:119, %vreg68:116, %vreg69:117, %vreg67:115, %vreg72:120, %rdi:23, %vreg75:123, %vreg78:126}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 7 }], succ: [Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 196 }, Id { idx: 197 }, Id { idx: 198 }, Id { idx: 199 }, Id { idx: 289 }, Id { idx: 200 }, Id { idx: 201 }, Id { idx: 202 }, Id { idx: 203 }, Id { idx: 204 }, Id { idx: 205 }, Id { idx: 206 }, Id { idx: 207 }, Id { idx: 208 }, Id { idx: 209 }, Id { idx: 210 }, Id { idx: 211 }, Id { idx: 212 }, Id { idx: 213 }, Id { idx: 214 }, Id { idx: 215 }, Id { idx: 216 }, Id { idx: 290 }, Id { idx: 217 }, Id { idx: 218 }, Id { idx: 219 }, Id { idx: 220 }, Id { idx: 221 }, Id { idx: 222 }, Id { idx: 223 }, Id { idx: 224 }, Id { idx: 225 }] } })
207 (196 ): %vreg67:115 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>))
208 (197 ): %vreg68:116 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>))
209 (198 ): %vreg69:117 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
210 (199 ): %vreg70:118 = Copy Register(%vreg69:117)
211 (289 ): %vreg70:118 = ADDr64i32 Register(%vreg70:118), Constant(i32 20)
212 (200 ): %vreg71:119 = MOVrm64 Mem(Base(%vreg70:118))
213 (201 ): %rdi:23 = MOVrr64 Register(%vreg68:116)
214 (202 ): %rsi:22 = MOVrr64 Register(%vreg71:119)
215 (203 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
216 (204 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_multi>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
217 (205 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
218 (206 ): %vreg72:120 = Copy Register(%rax:16)
219 (207 ): %rdi:23 = MOVrr64 Register(%vreg67:115)
220 (208 ): %rsi:22 = MOVrr64 Register(%vreg72:120)
221 (209 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
222 (210 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_add>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
223 (211 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
224 (212 ): %vreg73:121 = Copy Register(%rax:16)
225 (213 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>)), Register(%vreg73:121)
226 (214 ): %vreg74:122 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>))
227 (215 ): %vreg75:123 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>))
228 (216 ): %vreg76:124 = Copy Register(%vreg75:123)
229 (290 ): %vreg76:124 = ADDr64i32 Register(%vreg76:124), Constant(i32 20)
230 (217 ): %vreg77:125 = MOVrm64 Mem(Base(%vreg76:124))
231 (218 ): %rdi:23 = MOVrr64 Register(%vreg74:122)
232 (219 ): %rsi:22 = MOVrr64 Register(%vreg77:125)
233 (220 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
234 (221 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_multi>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
235 (222 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
236 (223 ): %vreg78:126 = Copy Register(%rax:16)
237 (224 ): MOVmr64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>)), Register(%vreg78:126)
238 (225 ): JMP Branch(Id { idx: 9 })
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg3:51, %vreg44:92, %vreg79:127}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg44:92, %vreg0:48, %vreg1:49} } }, pred: [Id { idx: 7 }, Id { idx: 8 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 226 }, Id { idx: 291 }, Id { idx: 227 }, Id { idx: 277 }, Id { idx: 228 }] } })
239 (226 ): %vreg79:127 = Copy Register(%vreg2:50)
240 (291 ): %vreg79:127 = ADDri32 Register(%vreg79:127), Constant(i32 1)
241 (227 ): %vreg3:51 = Copy Register(%vreg79:127)
242 (277 ): %vreg44:92 = Copy Register(%vreg3:51)
243 (228 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #10 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%rdi:23, %vreg81:129, %vreg80:128, %eax:0}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 229 }, Id { idx: 230 }, Id { idx: 231 }, Id { idx: 232 }, Id { idx: 233 }, Id { idx: 234 }, Id { idx: 235 }] } })
244 (229 ): %vreg80:128 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>))
245 (230 ): %rdi:23 = MOVrr64 Register(%vreg80:128)
246 (231 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
247 (232 ): %eax:0 = CALL Mem(Address(addr<fn:print_col>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
248 (233 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
249 (234 ): %vreg81:129 = Copy Register(%eax:0)
250 (235 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #11 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%xmm0:32, %xmm1:33, %vreg91:139, %xmm2:34, %vreg93:141, %rax:16, %vreg86:134, %vreg84:132, %vreg82:130, %vreg97:145, %vreg92:140, %vreg94:142, %vreg96:144, %eax:0, %vreg98:146, %vreg89:137, %vreg90:138, %vreg87:135, %vreg83:131, %vreg88:136, %rdi:23, %vreg85:133, %vreg95:143}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 236 }, Id { idx: 237 }, Id { idx: 292 }, Id { idx: 238 }, Id { idx: 239 }, Id { idx: 293 }, Id { idx: 240 }, Id { idx: 241 }, Id { idx: 242 }, Id { idx: 294 }, Id { idx: 243 }, Id { idx: 244 }, Id { idx: 295 }, Id { idx: 245 }, Id { idx: 246 }, Id { idx: 247 }, Id { idx: 296 }, Id { idx: 248 }, Id { idx: 249 }, Id { idx: 297 }, Id { idx: 250 }, Id { idx: 251 }, Id { idx: 252 }, Id { idx: 253 }, Id { idx: 254 }, Id { idx: 255 }, Id { idx: 256 }, Id { idx: 257 }, Id { idx: 258 }, Id { idx: 259 }, Id { idx: 260 }, Id { idx: 261 }, Id { idx: 262 }, Id { idx: 263 }] } })
251 (236 ): %vreg82:130 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
252 (237 ): %vreg83:131 = Copy Register(%vreg82:130)
253 (292 ): %vreg83:131 = ADDr64i32 Register(%vreg83:131), Constant(i32 8)
254 (238 ): %vreg84:132 = MOVrm64 Mem(Base(%vreg83:131))
255 (239 ): %vreg85:133 = Copy Register(%vreg84:132)
256 (293 ): %vreg85:133 = ADDr64i32 Register(%vreg85:133), Constant(i32 8)
257 (240 ): %vreg86:134 = MOVSDrm Mem(Base(%vreg85:133))
258 (241 ): %vreg87:135 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
259 (242 ): %vreg88:136 = Copy Register(%vreg87:135)
260 (294 ): %vreg88:136 = ADDr64i32 Register(%vreg88:136), Constant(i32 8)
261 (243 ): %vreg89:137 = MOVrm64 Mem(Base(%vreg88:136))
262 (244 ): %vreg90:138 = Copy Register(%vreg89:137)
263 (295 ): %vreg90:138 = ADDr64i32 Register(%vreg90:138), Constant(i32 8)
264 (245 ): %vreg91:139 = MOVSDrm Mem(Base(%vreg90:138))
265 (246 ): %vreg92:140 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>))
266 (247 ): %vreg93:141 = Copy Register(%vreg92:140)
267 (296 ): %vreg93:141 = ADDr64i32 Register(%vreg93:141), Constant(i32 8)
268 (248 ): %vreg94:142 = MOVrm64 Mem(Base(%vreg93:141))
269 (249 ): %vreg95:143 = Copy Register(%vreg94:142)
270 (297 ): %vreg95:143 = ADDr64i32 Register(%vreg95:143), Constant(i32 8)
271 (250 ): %vreg96:144 = MOVSDrm Mem(Base(%vreg95:143))
272 (251 ): %xmm0:32 = MOVSDrr Register(%vreg86:134)
273 (252 ): %xmm1:33 = MOVSDrr Register(%vreg91:139)
274 (253 ): %xmm2:34 = MOVSDrr Register(%vreg96:144)
275 (254 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
276 (255 ): %rax:16 = CALL Mem(Address(addr<fn:Vec_new>)) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
277 (256 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
278 (257 ): %vreg97:145 = Copy Register(%rax:16)
279 (258 ): %rdi:23 = MOVrr64 Register(%vreg97:145)
280 (259 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
281 (260 ): %eax:0 = CALL Mem(Address(addr<fn:print_col>)) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
282 (261 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
283 (262 ): %vreg98:146 = Copy Register(%eax:0)
284 (263 ): JMP Branch(Id { idx: 12 })
MachineBasicBlock #12 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg4:52, %vreg8:56, %vreg99:147}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg0:48, %vreg8:56} } }, pred: [Id { idx: 10 }, Id { idx: 11 }], succ: [Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 264 }, Id { idx: 298 }, Id { idx: 265 }, Id { idx: 275 }, Id { idx: 266 }] } })
285 (264 ): %vreg99:147 = Copy Register(%vreg1:49)
286 (298 ): %vreg99:147 = ADDri32 Register(%vreg99:147), Constant(i32 1)
287 (265 ): %vreg4:52 = Copy Register(%vreg99:147)
288 (275 ): %vreg8:56 = Copy Register(%vreg4:52)
289 (266 ): JMP Branch(Id { idx: 3 })
MachineBasicBlock #13 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg100:148, %vreg5:53, %vreg7:55}, live_in: {%vreg0:48}, live_out: {%vreg7:55} } }, pred: [Id { idx: 3 }], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 267 }, Id { idx: 299 }, Id { idx: 268 }, Id { idx: 273 }, Id { idx: 269 }] } })
290 (267 ): %vreg100:148 = Copy Register(%vreg0:48)
291 (299 ): %vreg100:148 = ADDri32 Register(%vreg100:148), Constant(i32 1)
292 (268 ): %vreg5:53 = Copy Register(%vreg100:148)
293 (273 ): %vreg7:55 = Copy Register(%vreg5:53)
294 (269 ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #14 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 1 }], succ: [], iseq: RefCell { value: [Id { idx: 270 }, Id { idx: 271 }] } })
295 (270 ): %eax:0 = MOVri32 Constant(i32 0)
296 (271 ): RET 

OUTPUT: MachineModule (name: minilang)
MachineFunction(name: cilk.println.i32, ty: void (i32, )):
MachineFunction(name: cilk.print.i32, ty: void (i32, )):
MachineFunction(name: cilk.printch.i32, ty: void (i32, )):
MachineFunction(name: cilk.println.f64, ty: void (f64, )):
MachineFunction(name: cilk.print.f64, ty: void (f64, )):
MachineFunction(name: cilk.sin.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.cos.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.sqrt.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.floor.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.fabs.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.i32_to_f64.i32, ty: f64 (i32, )):
MachineFunction(name: cilk.f64_to_i32.f64, ty: i32 (f64, )):
MachineFunction(name: cilk.malloc.i32, ty: i64* (i32, )):
MachineFunction(name: clamp, ty: f64 (f64, f64, f64, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([12886999072]), def: {%vreg0:48, %vreg1:49}, live_in: {}, live_out: {} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }] } })
 0  ( 19 ): PUSH64 %rbp:21
 1  ( 20 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 21 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 22 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(0)>), %xmm0:32
 4  ( 23 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(1)>), %xmm1:33
 5  ( 24 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(2)>), %xmm2:34
 6  ( 0  ): %xmm0:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(0)>)
 7  ( 1  ): %xmm1:49 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(1)>)
 8  ( 2  ): UCOMISDrr %xmm0:48, %xmm1:49
 9  ( 3  ): JB BB#1
 10 ( 4  ): JMP BB#2
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4297064480]), def: {%vreg2:50, %xmm0:32}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 5 }, Id { idx: 6 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 7 }] } })
 11 ( 5  ): %xmm0:50 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(1)>)
 12 ( 6  ): %xmm0:32 = MOVSDrr %xmm0:50
 13 ( 25 ): %rsp:20 = MOVrr64 %rbp:21
 14 ( 26 ): POP64 %rbp:21
 15 ( 7  ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([12886999072]), def: {%vreg4:52, %vreg3:51}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }] } })
 16 ( 8  ): %xmm1:51 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(2)>)
 17 ( 9  ): %xmm0:52 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(0)>)
 18 ( 10 ): UCOMISDrr %xmm1:51, %xmm0:52
 19 ( 11 ): JB BB#3
 20 ( 12 ): JMP BB#4
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4297064480]), def: {%xmm0:32, %vreg5:53}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 13 }, Id { idx: 14 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 15 }] } })
 21 ( 13 ): %xmm0:53 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(2)>)
 22 ( 14 ): %xmm0:32 = MOVSDrr %xmm0:53
 23 ( 27 ): %rsp:20 = MOVrr64 %rbp:21
 24 ( 28 ): POP64 %rbp:21
 25 ( 15 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4297064480]), def: {%vreg6:54, %xmm0:32}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 16 }, Id { idx: 17 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 18 }] } })
 26 ( 16 ): %xmm0:54 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(0)>)
 27 ( 17 ): %xmm0:32 = MOVSDrr %xmm0:54
 28 ( 29 ): %rsp:20 = MOVrr64 %rbp:21
 29 ( 30 ): POP64 %rbp:21
 30 ( 18 ): RET 
MachineFunction(name: Vec_new, ty: struct {f64, f64, f64}* (f64, f64, f64, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4306567345]), def: {%vreg6:54, %vreg9:57, %edi:7, %rax:16, %vreg7:55, %vreg8:56, %vreg2:50, %vreg3:51, %vreg0:48, %vreg1:49, %vreg5:53, %vreg4:52}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 19 }] } })
 0  ( 22 ): PUSH64 %rbp:21
 1  ( 23 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 24 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 25 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(0)>), %xmm0:32
 4  ( 26 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(1)>), %xmm1:33
 5  ( 27 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(2)>), %xmm2:34
 6  ( 0  ): %edi:7 = MOVri32 i32 128
 7  ( 2  ): %rax:16 = CALL Address(addr<fn:cilk.malloc.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 8  ( 4  ): %rax:48 = MOVrr64 %rax:16
 9  ( 5  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>), %rax:48
 10 ( 6  ): %rax:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 11 ( 7  ): %xmm0:50 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(0)>)
 12 ( 8  ): MOVSDmr Base(%rax:49), %xmm0:50
 13 ( 9  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 14 ( 10 ): %rax:52 = MOVrr64 %rax:51
 15 ( 20 ): %rax:52 = ADDr64i32 %rax:52, i32 8
 16 ( 11 ): %xmm0:53 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(1)>)
 17 ( 12 ): MOVSDmr Base(%rax:52), %xmm0:53
 18 ( 13 ): %rax:54 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 19 ( 14 ): %rax:55 = MOVrr64 %rax:54
 20 ( 21 ): %rax:55 = ADDr64i32 %rax:55, i32 16
 21 ( 15 ): %xmm0:56 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(2)>)
 22 ( 16 ): MOVSDmr Base(%rax:55), %xmm0:56
 23 ( 17 ): %rax:57 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 24 ( 18 ): %rax:16 = MOVrr64 %rax:57
 25 ( 28 ): %rsp:20 = MOVrr64 %rbp:21
 26 ( 29 ): POP64 %rbp:21
 27 ( 19 ): RET 
MachineFunction(name: Vec_add, ty: struct {f64, f64, f64}* (struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([133147197489]), def: {%vreg10:58, %vreg11:59, %vreg13:61, %vreg14:62, %xmm0:32, %vreg3:51, %xmm2:34, %vreg6:54, %vreg0:48, %vreg1:49, %vreg5:53, %vreg7:55, %vreg17:65, %vreg12:60, %rax:16, %vreg9:57, %vreg8:56, %vreg19:67, %vreg2:50, %vreg4:52, %vreg15:63, %vreg16:64, %vreg18:66, %xmm1:33}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 23 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 27 }] } })
 0  ( 35 ): PUSH64 %rbp:21
 1  ( 36 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 37 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 38 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 39 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 6  ( 1  ): %xmm0:49 = MOVSDrm Base(%rax:48)
 7  ( 2  ): %rax:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 8  ( 3  ): %xmm1:51 = MOVSDrm Base(%rax:50)
 9  ( 4  ): %xmm3:52 = MOVSDrr %xmm0:49
 10 ( 28 ): %xmm3:52 = ADDSDrr %xmm3:52, %xmm1:51
 11 ( 5  ): %rax:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 12 ( 6  ): %rax:54 = MOVrr64 %rax:53
 13 ( 29 ): %rax:54 = ADDr64i32 %rax:54, i32 8
 14 ( 7  ): %xmm1:55 = MOVSDrm Base(%rax:54)
 15 ( 8  ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 16 ( 9  ): %rax:57 = MOVrr64 %rax:56
 17 ( 30 ): %rax:57 = ADDr64i32 %rax:57, i32 8
 18 ( 10 ): %xmm0:58 = MOVSDrm Base(%rax:57)
 19 ( 11 ): %xmm2:59 = MOVSDrr %xmm1:55
 20 ( 31 ): %xmm2:59 = ADDSDrr %xmm2:59, %xmm0:58
 21 ( 12 ): %rax:60 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 22 ( 13 ): %rax:61 = MOVrr64 %rax:60
 23 ( 32 ): %rax:61 = ADDr64i32 %rax:61, i32 16
 24 ( 14 ): %xmm1:62 = MOVSDrm Base(%rax:61)
 25 ( 15 ): %rax:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 26 ( 16 ): %rax:64 = MOVrr64 %rax:63
 27 ( 33 ): %rax:64 = ADDr64i32 %rax:64, i32 16
 28 ( 17 ): %xmm0:65 = MOVSDrm Base(%rax:64)
 29 ( 18 ): %xmm4:66 = MOVSDrr %xmm1:62
 30 ( 34 ): %xmm4:66 = ADDSDrr %xmm4:66, %xmm0:65
 31 ( 19 ): %xmm0:32 = MOVSDrr %xmm3:52
 32 ( 20 ): %xmm1:33 = MOVSDrr %xmm2:59
 33 ( 21 ): %xmm2:34 = MOVSDrr %xmm4:66
 34 ( 23 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 35 ( 25 ): %rax:67 = MOVrr64 %rax:16
 36 ( 26 ): %rax:16 = MOVrr64 %rax:67
 37 ( 40 ): %rsp:20 = MOVrr64 %rbp:21
 38 ( 41 ): POP64 %rbp:21
 39 ( 27 ): RET 
MachineFunction(name: Vec_sub, ty: struct {f64, f64, f64}* (struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([133147197489]), def: {%vreg9:57, %vreg2:50, %vreg14:62, %vreg1:49, %vreg15:63, %xmm1:33, %xmm2:34, %vreg17:65, %vreg19:67, %vreg6:54, %vreg0:48, %vreg18:66, %vreg16:64, %vreg8:56, %xmm0:32, %vreg3:51, %vreg5:53, %vreg4:52, %vreg12:60, %vreg13:61, %vreg7:55, %rax:16, %vreg11:59, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 23 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 27 }] } })
 0  ( 35 ): PUSH64 %rbp:21
 1  ( 36 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 37 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 38 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 39 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 6  ( 1  ): %xmm0:49 = MOVSDrm Base(%rax:48)
 7  ( 2  ): %rax:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 8  ( 3  ): %xmm1:51 = MOVSDrm Base(%rax:50)
 9  ( 4  ): %xmm3:52 = MOVSDrr %xmm0:49
 10 ( 28 ): %xmm3:52 = SUBSDrr %xmm3:52, %xmm1:51
 11 ( 5  ): %rax:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 12 ( 6  ): %rax:54 = MOVrr64 %rax:53
 13 ( 29 ): %rax:54 = ADDr64i32 %rax:54, i32 8
 14 ( 7  ): %xmm1:55 = MOVSDrm Base(%rax:54)
 15 ( 8  ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 16 ( 9  ): %rax:57 = MOVrr64 %rax:56
 17 ( 30 ): %rax:57 = ADDr64i32 %rax:57, i32 8
 18 ( 10 ): %xmm0:58 = MOVSDrm Base(%rax:57)
 19 ( 11 ): %xmm2:59 = MOVSDrr %xmm1:55
 20 ( 31 ): %xmm2:59 = SUBSDrr %xmm2:59, %xmm0:58
 21 ( 12 ): %rax:60 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 22 ( 13 ): %rax:61 = MOVrr64 %rax:60
 23 ( 32 ): %rax:61 = ADDr64i32 %rax:61, i32 16
 24 ( 14 ): %xmm1:62 = MOVSDrm Base(%rax:61)
 25 ( 15 ): %rax:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 26 ( 16 ): %rax:64 = MOVrr64 %rax:63
 27 ( 33 ): %rax:64 = ADDr64i32 %rax:64, i32 16
 28 ( 17 ): %xmm0:65 = MOVSDrm Base(%rax:64)
 29 ( 18 ): %xmm4:66 = MOVSDrr %xmm1:62
 30 ( 34 ): %xmm4:66 = SUBSDrr %xmm4:66, %xmm0:65
 31 ( 19 ): %xmm0:32 = MOVSDrr %xmm3:52
 32 ( 20 ): %xmm1:33 = MOVSDrr %xmm2:59
 33 ( 21 ): %xmm2:34 = MOVSDrr %xmm4:66
 34 ( 23 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 35 ( 25 ): %rax:67 = MOVrr64 %rax:16
 36 ( 26 ): %rax:16 = MOVrr64 %rax:67
 37 ( 40 ): %rsp:20 = MOVrr64 %rbp:21
 38 ( 41 ): POP64 %rbp:21
 39 ( 27 ): RET 
MachineFunction(name: Vec_mul, ty: struct {f64, f64, f64}* (struct {f64, f64, f64}*, f64, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([64427720753]), def: {%vreg5:53, %vreg11:59, %vreg8:56, %vreg1:49, %vreg3:51, %xmm1:33, %vreg6:54, %vreg7:55, %xmm2:34, %rax:16, %vreg9:57, %vreg2:50, %vreg0:48, %vreg10:58, %xmm0:32, %vreg4:52}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 20 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 21 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 22 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 23 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 24 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 15 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 19 }] } })
 0  ( 25 ): PUSH64 %rbp:21
 1  ( 26 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 27 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 28 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 29 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(1)>), %xmm1:33
 5  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 6  ( 1  ): %xmm0:49 = MOVSDrm Base(%rax:48)
 7  ( 2  ): %xmm1:50 = MOVSDrr %xmm0:49
 8  ( 20 ): %xmm1:50 = MULSDrm %xmm1:50, BaseFi(%rbp:21, FI<f64, Arg(1)>)
 9  ( 3  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 10 ( 4  ): %rax:52 = MOVrr64 %rax:51
 11 ( 21 ): %rax:52 = ADDr64i32 %rax:52, i32 8
 12 ( 5  ): %xmm0:53 = MOVSDrm Base(%rax:52)
 13 ( 6  ): %xmm3:54 = MOVSDrr %xmm0:53
 14 ( 22 ): %xmm3:54 = MULSDrm %xmm3:54, BaseFi(%rbp:21, FI<f64, Arg(1)>)
 15 ( 7  ): %rax:55 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 16 ( 8  ): %rax:56 = MOVrr64 %rax:55
 17 ( 23 ): %rax:56 = ADDr64i32 %rax:56, i32 16
 18 ( 9  ): %xmm0:57 = MOVSDrm Base(%rax:56)
 19 ( 10 ): %xmm2:58 = MOVSDrr %xmm0:57
 20 ( 24 ): %xmm2:58 = MULSDrm %xmm2:58, BaseFi(%rbp:21, FI<f64, Arg(1)>)
 21 ( 11 ): %xmm0:32 = MOVSDrr %xmm1:50
 22 ( 12 ): %xmm1:33 = MOVSDrr %xmm3:54
 23 ( 13 ): %xmm2:34 = MOVSDrr %xmm2:58
 24 ( 15 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 25 ( 17 ): %rax:59 = MOVrr64 %rax:16
 26 ( 18 ): %rax:16 = MOVrr64 %rax:59
 27 ( 30 ): %rsp:20 = MOVrr64 %rbp:21
 28 ( 31 ): POP64 %rbp:21
 29 ( 19 ): RET 
MachineFunction(name: Vec_multi, ty: struct {f64, f64, f64}* (struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([133147197489]), def: {%vreg19:67, %vreg11:59, %vreg13:61, %vreg4:52, %xmm0:32, %vreg15:63, %vreg6:54, %vreg1:49, %vreg0:48, %vreg5:53, %xmm1:33, %vreg7:55, %vreg8:56, %vreg2:50, %vreg9:57, %vreg14:62, %vreg3:51, %rax:16, %vreg10:58, %vreg18:66, %vreg12:60, %vreg16:64, %vreg17:65, %xmm2:34}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 28 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 30 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 31 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 32 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 33 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 23 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 27 }] } })
 0  ( 35 ): PUSH64 %rbp:21
 1  ( 36 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 37 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 38 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 39 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 6  ( 1  ): %xmm0:49 = MOVSDrm Base(%rax:48)
 7  ( 2  ): %rax:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 8  ( 3  ): %xmm1:51 = MOVSDrm Base(%rax:50)
 9  ( 4  ): %xmm3:52 = MOVSDrr %xmm0:49
 10 ( 28 ): %xmm3:52 = MULSDrr %xmm3:52, %xmm1:51
 11 ( 5  ): %rax:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 12 ( 6  ): %rax:54 = MOVrr64 %rax:53
 13 ( 29 ): %rax:54 = ADDr64i32 %rax:54, i32 8
 14 ( 7  ): %xmm1:55 = MOVSDrm Base(%rax:54)
 15 ( 8  ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 16 ( 9  ): %rax:57 = MOVrr64 %rax:56
 17 ( 30 ): %rax:57 = ADDr64i32 %rax:57, i32 8
 18 ( 10 ): %xmm0:58 = MOVSDrm Base(%rax:57)
 19 ( 11 ): %xmm2:59 = MOVSDrr %xmm1:55
 20 ( 31 ): %xmm2:59 = MULSDrr %xmm2:59, %xmm0:58
 21 ( 12 ): %rax:60 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 22 ( 13 ): %rax:61 = MOVrr64 %rax:60
 23 ( 32 ): %rax:61 = ADDr64i32 %rax:61, i32 16
 24 ( 14 ): %xmm1:62 = MOVSDrm Base(%rax:61)
 25 ( 15 ): %rax:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 26 ( 16 ): %rax:64 = MOVrr64 %rax:63
 27 ( 33 ): %rax:64 = ADDr64i32 %rax:64, i32 16
 28 ( 17 ): %xmm0:65 = MOVSDrm Base(%rax:64)
 29 ( 18 ): %xmm4:66 = MOVSDrr %xmm1:62
 30 ( 34 ): %xmm4:66 = MULSDrr %xmm4:66, %xmm0:65
 31 ( 19 ): %xmm0:32 = MOVSDrr %xmm3:52
 32 ( 20 ): %xmm1:33 = MOVSDrr %xmm2:59
 33 ( 21 ): %xmm2:34 = MOVSDrr %xmm4:66
 34 ( 23 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 35 ( 25 ): %rax:67 = MOVrr64 %rax:16
 36 ( 26 ): %rax:16 = MOVrr64 %rax:67
 37 ( 40 ): %rsp:20 = MOVrr64 %rbp:21
 38 ( 41 ): POP64 %rbp:21
 39 ( 27 ): RET 
MachineFunction(name: Vec_dot, ty: f64 (struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([30066933793]), def: {%vreg2:50, %vreg16:64, %vreg17:65, %vreg18:66, %vreg3:51, %vreg20:68, %vreg11:59, %vreg13:61, %vreg12:60, %xmm0:32, %vreg1:49, %vreg0:48, %vreg19:67, %vreg5:53, %vreg6:54, %vreg7:55, %vreg4:52, %vreg8:56, %vreg10:58, %vreg9:57, %vreg14:62, %vreg15:63}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 23 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 24 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 25 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 26 }, Id { idx: 12 }, Id { idx: 27 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 28 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 29 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 30 }, Id { idx: 20 }, Id { idx: 31 }, Id { idx: 21 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 22 }] } })
 0  ( 32 ): PUSH64 %rbp:21
 1  ( 33 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 34 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 35 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 36 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 6  ( 1  ): %xmm0:49 = MOVSDrm Base(%rax:48)
 7  ( 2  ): %rax:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 8  ( 3  ): %xmm1:51 = MOVSDrm Base(%rax:50)
 9  ( 4  ): %xmm2:52 = MOVSDrr %xmm0:49
 10 ( 23 ): %xmm2:52 = MULSDrr %xmm2:52, %xmm1:51
 11 ( 5  ): %rax:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 12 ( 6  ): %rax:54 = MOVrr64 %rax:53
 13 ( 24 ): %rax:54 = ADDr64i32 %rax:54, i32 8
 14 ( 7  ): %xmm0:55 = MOVSDrm Base(%rax:54)
 15 ( 8  ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 16 ( 9  ): %rax:57 = MOVrr64 %rax:56
 17 ( 25 ): %rax:57 = ADDr64i32 %rax:57, i32 8
 18 ( 10 ): %xmm1:58 = MOVSDrm Base(%rax:57)
 19 ( 11 ): %xmm0:59 = MOVSDrr %xmm0:55
 20 ( 26 ): %xmm0:59 = MULSDrr %xmm0:59, %xmm1:58
 21 ( 12 ): %xmm2:60 = MOVSDrr %xmm2:52
 22 ( 27 ): %xmm2:60 = ADDSDrr %xmm2:60, %xmm0:59
 23 ( 13 ): %rax:61 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 24 ( 14 ): %rax:62 = MOVrr64 %rax:61
 25 ( 28 ): %rax:62 = ADDr64i32 %rax:62, i32 16
 26 ( 15 ): %xmm1:63 = MOVSDrm Base(%rax:62)
 27 ( 16 ): %rax:64 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 28 ( 17 ): %rax:65 = MOVrr64 %rax:64
 29 ( 29 ): %rax:65 = ADDr64i32 %rax:65, i32 16
 30 ( 18 ): %xmm0:66 = MOVSDrm Base(%rax:65)
 31 ( 19 ): %xmm1:67 = MOVSDrr %xmm1:63
 32 ( 30 ): %xmm1:67 = MULSDrr %xmm1:67, %xmm0:66
 33 ( 20 ): %xmm0:68 = MOVSDrr %xmm2:60
 34 ( 31 ): %xmm0:68 = ADDSDrr %xmm0:68, %xmm1:67
 35 ( 21 ): %xmm0:32 = MOVSDrr %xmm0:68
 36 ( 37 ): %rsp:20 = MOVrr64 %rbp:21
 37 ( 38 ): POP64 %rbp:21
 38 ( 22 ): RET 
MachineFunction(name: Vec_reflect, ty: struct {f64, f64, f64}* (struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([12900827379]), def: {%vreg1:49, %vreg0:48, %rdi:23, %xmm0:32, %vreg4:52, %rsi:22, %vreg3:51, %vreg5:53, %vreg6:54, %xmm1:33, %vreg2:50, %rax:16, %vreg7:55, %vreg8:56}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 27 }, Id { idx: 29 }, Id { idx: 7 }, Id { idx: 30 }, Id { idx: 28 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 26 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 31 }, Id { idx: 15 }, Id { idx: 32 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 21 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 25 }] } })
 0  ( 33 ): PUSH64 %rbp:21
 1  ( 34 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 35 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 36 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 37 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 0  ): %rcx:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 6  ( 1  ): %rax:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 7  ( 2  ): %rdi:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 8  ( 3  ): %rsi:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 9  ( 4  ): %rdi:23 = MOVrr64 %rdi:50
 10 ( 5  ): %rsi:22 = MOVrr64 %rsi:51
 11 ( 27 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(0)>), %rax:49
 12 ( 29 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:48
 13 ( 7  ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 14 ( 30 ): %rcx:48 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 15 ( 28 ): %rax:49 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(0)>)
 16 ( 9  ): %xmm0:52 = MOVSDrr %xmm0:32
 17 ( 10 ): %xmm1:53 = MOVSDrm64 Address(label<data:0>)
 18 ( 11 ): %xmm0:54 = MOVSDrr %xmm0:52
 19 ( 26 ): %xmm0:54 = MULSDrr %xmm0:54, %xmm1:53
 20 ( 12 ): %rdi:23 = MOVrr64 %rax:49
 21 ( 13 ): %xmm1:33 = MOVSDrr %xmm0:54
 22 ( 31 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(0)>), %rcx:48
 23 ( 15 ): %rax:16 = CALL Address(addr<fn:Vec_mul>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 24 ( 32 ): %rcx:48 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(0)>)
 25 ( 17 ): %rsi:55 = MOVrr64 %rax:16
 26 ( 18 ): %rdi:23 = MOVrr64 %rcx:48
 27 ( 19 ): %rsi:22 = MOVrr64 %rsi:55
 28 ( 21 ): %rax:16 = CALL Address(addr<fn:Vec_add>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 29 ( 23 ): %rax:56 = MOVrr64 %rax:16
 30 ( 24 ): %rax:16 = MOVrr64 %rax:56
 31 ( 38 ): %rsp:20 = MOVrr64 %rbp:21
 32 ( 39 ): POP64 %rbp:21
 33 ( 25 ): RET 
MachineFunction(name: Vec_length, ty: f64 (struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([30066933793]), def: {%vreg6:54, %vreg13:61, %vreg12:60, %vreg0:48, %vreg1:49, %vreg5:53, %vreg2:50, %vreg4:52, %vreg15:63, %vreg9:57, %xmm0:32, %vreg8:56, %vreg11:59, %vreg3:51, %vreg14:62, %vreg7:55, %vreg16:64, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 19 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 20 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 21 }, Id { idx: 9 }, Id { idx: 22 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 23 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 24 }, Id { idx: 15 }, Id { idx: 25 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 18 }] } })
 0  ( 26 ): PUSH64 %rbp:21
 1  ( 27 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 28 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 29 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 5  ( 1  ): %xmm1:49 = MOVSDrm Base(%rax:48)
 6  ( 2  ): %xmm0:50 = MOVSDrm Base(%rax:48)
 7  ( 3  ): %xmm2:51 = MOVSDrr %xmm1:49
 8  ( 19 ): %xmm2:51 = MULSDrr %xmm2:51, %xmm0:50
 9  ( 4  ): %rax:52 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 10 ( 5  ): %rax:53 = MOVrr64 %rax:52
 11 ( 20 ): %rax:53 = ADDr64i32 %rax:53, i32 8
 12 ( 6  ): %xmm0:54 = MOVSDrm Base(%rax:53)
 13 ( 7  ): %xmm1:55 = MOVSDrm Base(%rax:53)
 14 ( 8  ): %xmm0:56 = MOVSDrr %xmm0:54
 15 ( 21 ): %xmm0:56 = MULSDrr %xmm0:56, %xmm1:55
 16 ( 9  ): %xmm2:57 = MOVSDrr %xmm2:51
 17 ( 22 ): %xmm2:57 = ADDSDrr %xmm2:57, %xmm0:56
 18 ( 10 ): %rax:58 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 19 ( 11 ): %rax:59 = MOVrr64 %rax:58
 20 ( 23 ): %rax:59 = ADDr64i32 %rax:59, i32 16
 21 ( 12 ): %xmm0:60 = MOVSDrm Base(%rax:59)
 22 ( 13 ): %xmm1:61 = MOVSDrm Base(%rax:59)
 23 ( 14 ): %xmm0:62 = MOVSDrr %xmm0:60
 24 ( 24 ): %xmm0:62 = MULSDrr %xmm0:62, %xmm1:61
 25 ( 15 ): %xmm1:63 = MOVSDrr %xmm2:57
 26 ( 25 ): %xmm1:63 = ADDSDrr %xmm1:63, %xmm0:62
 27 ( 16 ): %xmm0:64 = SQRTSDrr %xmm1:63
 28 ( 17 ): %xmm0:32 = MOVSDrr %xmm0:64
 29 ( 30 ): %rsp:20 = MOVrr64 %rbp:21
 30 ( 31 ): POP64 %rbp:21
 31 ( 18 ): RET 
MachineFunction(name: Vec_normalize, ty: struct {f64, f64, f64}* (struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([12896436400]), def: {%rdi:23, %vreg0:48, %vreg3:51, %vreg2:50, %xmm0:32, %vreg1:49}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 3 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }] } })
 0  ( 37 ): PUSH64 %rbp:21
 1  ( 38 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 39 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 40 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 0  ): %rdi:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 5  ( 1  ): %rdi:23 = MOVrr64 %rdi:49
 6  ( 3  ): %xmm0:32 = CALL Address(addr<fn:Vec_length>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
 7  ( 5  ): %xmm0:50 = MOVSDrr %xmm0:32
 8  ( 6  ): %xmm0:48 = MOVSDrr %xmm0:50
 9  ( 7  ): %xmm1:51 = MOVSDrm64 Address(label<data:1>)
 10 ( 8  ): UCOMISDrr %xmm0:48, %xmm1:51
 11 ( 9  ): JA BB#1
 12 ( 10 ): JMP BB#2
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([30066933793]), def: {%vreg6:54, %vreg7:55, %vreg8:56, %vreg5:53, %vreg4:52, %vreg11:59, %vreg13:61, %vreg10:58, %vreg9:57, %vreg12:60, %vreg14:62, %vreg15:63, %vreg16:64}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 31 }, Id { idx: 15 }, Id { idx: 32 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 33 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 34 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 35 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 36 }, Id { idx: 26 }, Id { idx: 27 }] } })
 13 ( 11 ): %rax:52 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 14 ( 12 ): %xmm1:53 = MOVSDrm Base(%rax:52)
 15 ( 13 ): %xmm2:54 = MOVSDrm64 Address(label<data:2>)
 16 ( 14 ): %xmm2:55 = MOVSDrr %xmm2:54
 17 ( 31 ): %xmm2:55 = DIVSDrr %xmm2:55, %xmm0:48
 18 ( 15 ): %xmm0:56 = MOVSDrr %xmm1:53
 19 ( 32 ): %xmm0:56 = MULSDrr %xmm0:56, %xmm2:55
 20 ( 16 ): MOVSDmr Base(%rax:52), %xmm0:56
 21 ( 17 ): %rax:57 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 22 ( 18 ): %rax:58 = MOVrr64 %rax:57
 23 ( 33 ): %rax:58 = ADDr64i32 %rax:58, i32 8
 24 ( 19 ): %xmm0:59 = MOVSDrm Base(%rax:58)
 25 ( 20 ): %xmm0:60 = MOVSDrr %xmm0:59
 26 ( 34 ): %xmm0:60 = MULSDrr %xmm0:60, %xmm2:55
 27 ( 21 ): MOVSDmr Base(%rax:58), %xmm0:60
 28 ( 22 ): %rax:61 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 29 ( 23 ): %rax:62 = MOVrr64 %rax:61
 30 ( 35 ): %rax:62 = ADDr64i32 %rax:62, i32 16
 31 ( 24 ): %xmm0:63 = MOVSDrm Base(%rax:62)
 32 ( 25 ): %xmm0:64 = MOVSDrr %xmm0:63
 33 ( 36 ): %xmm0:64 = MULSDrr %xmm0:64, %xmm2:55
 34 ( 26 ): MOVSDmr Base(%rax:62), %xmm0:64
 35 ( 27 ): JMP BB#2
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([2162721]), def: {%rax:16, %vreg17:65}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }, Id { idx: 1 }], succ: [], iseq: RefCell { value: [Id { idx: 28 }, Id { idx: 29 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 30 }] } })
 36 ( 28 ): %rax:65 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 37 ( 29 ): %rax:16 = MOVrr64 %rax:65
 38 ( 41 ): %rsp:20 = MOVrr64 %rbp:21
 39 ( 42 ): POP64 %rbp:21
 40 ( 30 ): RET 
MachineFunction(name: Ray_new, ty: struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}* (struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([11731123]), def: {%vreg5:53, %vreg6:54, %vreg3:51, %vreg2:50, %vreg0:48, %vreg4:52, %rax:16, %vreg1:49, %edi:7}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 16 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 15 }] } })
 0  ( 17 ): PUSH64 %rbp:21
 1  ( 18 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 19 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 20 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 21 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 0  ): %edi:7 = MOVri32 i32 128
 6  ( 2  ): %rax:16 = CALL Address(addr<fn:cilk.malloc.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 7  ( 4  ): %rax:48 = MOVrr64 %rax:16
 8  ( 5  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>), %rax:48
 9  ( 6  ): %rcx:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>)
 10 ( 7  ): %rax:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 11 ( 8  ): MOVmr64 Base(%rcx:49), %rax:50
 12 ( 9  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>)
 13 ( 10 ): %rcx:52 = MOVrr64 %rax:51
 14 ( 16 ): %rcx:52 = ADDr64i32 %rcx:52, i32 8
 15 ( 11 ): %rax:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 16 ( 12 ): MOVmr64 Base(%rcx:52), %rax:53
 17 ( 13 ): %rax:54 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(0)>)
 18 ( 14 ): %rax:16 = MOVrr64 %rax:54
 19 ( 22 ): %rsp:20 = MOVrr64 %rbp:21
 20 ( 23 ): POP64 %rbp:21
 21 ( 15 ): RET 
MachineFunction(name: Isect_new, ty: struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}* (i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4306698419]), def: {%vreg3:51, %vreg13:61, %vreg14:62, %vreg7:55, %vreg0:48, %vreg1:49, %vreg16:64, %vreg17:65, %vreg18:66, %vreg15:63, %edi:7, %vreg8:56, %vreg9:57, %vreg11:59, %vreg4:52, %vreg5:53, %rax:16, %vreg10:58, %vreg12:60, %vreg6:54, %vreg2:50}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 32 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 33 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 34 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 35 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 36 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 31 }] } })
 0  ( 37 ): PUSH64 %rbp:21
 1  ( 38 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 39 ): %rsp:20 = SUBr64i32 %rsp:20, i32 64
 3  ( 40 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Arg(0)>), %edi:7
 4  ( 41 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 42 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>), %rdx:18
 6  ( 43 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(3)>), %rcx:17
 7  ( 44 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(4)>), %xmm4:36
 8  ( 45 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(5)>), %r9:25
 9  ( 0  ): %edi:7 = MOVri32 i32 128
 10 ( 2  ): %rax:16 = CALL Address(addr<fn:cilk.malloc.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 11 ( 4  ): %rax:48 = MOVrr64 %rax:16
 12 ( 5  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>), %rax:48
 13 ( 6  ): %rcx:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 14 ( 7  ): %eax:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Arg(0)>)
 15 ( 8  ): MOVmr32 Base(%rcx:49), %eax:50
 16 ( 9  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 17 ( 10 ): %rcx:52 = MOVrr64 %rax:51
 18 ( 32 ): %rcx:52 = ADDr64i32 %rcx:52, i32 4
 19 ( 11 ): %rax:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 20 ( 12 ): MOVmr64 Base(%rcx:52), %rax:53
 21 ( 13 ): %rax:54 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 22 ( 14 ): %rcx:55 = MOVrr64 %rax:54
 23 ( 33 ): %rcx:55 = ADDr64i32 %rcx:55, i32 12
 24 ( 15 ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>)
 25 ( 16 ): MOVmr64 Base(%rcx:55), %rax:56
 26 ( 17 ): %rax:57 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 27 ( 18 ): %rcx:58 = MOVrr64 %rax:57
 28 ( 34 ): %rcx:58 = ADDr64i32 %rcx:58, i32 20
 29 ( 19 ): %rax:59 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(3)>)
 30 ( 20 ): MOVmr64 Base(%rcx:58), %rax:59
 31 ( 21 ): %rax:60 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 32 ( 22 ): %rax:61 = MOVrr64 %rax:60
 33 ( 35 ): %rax:61 = ADDr64i32 %rax:61, i32 28
 34 ( 23 ): %xmm0:62 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(4)>)
 35 ( 24 ): MOVSDmr Base(%rax:61), %xmm0:62
 36 ( 25 ): %rax:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 37 ( 26 ): %rcx:64 = MOVrr64 %rax:63
 38 ( 36 ): %rcx:64 = ADDr64i32 %rcx:64, i32 36
 39 ( 27 ): %rax:65 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(5)>)
 40 ( 28 ): MOVmr64 Base(%rcx:64), %rax:65
 41 ( 29 ): %rax:66 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(0)>)
 42 ( 30 ): %rax:16 = MOVrr64 %rax:66
 43 ( 46 ): %rsp:20 = MOVrr64 %rbp:21
 44 ( 47 ): POP64 %rbp:21
 45 ( 31 ): RET 
MachineFunction(name: Sphere_new, ty: struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* (f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4306698419]), def: {%vreg6:54, %rax:16, %vreg0:48, %vreg9:57, %vreg4:52, %vreg5:53, %vreg7:55, %vreg8:56, %vreg1:49, %vreg2:50, %edi:7, %vreg3:51}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 19 }] } })
 0  ( 22 ): PUSH64 %rbp:21
 1  ( 23 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 24 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 25 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(0)>), %xmm0:32
 4  ( 26 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 27 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>), %rdx:18
 6  ( 0  ): %edi:7 = MOVri32 i32 128
 7  ( 2  ): %rax:16 = CALL Address(addr<fn:cilk.malloc.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 8  ( 4  ): %rax:48 = MOVrr64 %rax:16
 9  ( 5  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>), %rax:48
 10 ( 6  ): %rax:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>)
 11 ( 7  ): %xmm0:50 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(0)>)
 12 ( 8  ): MOVSDmr Base(%rax:49), %xmm0:50
 13 ( 9  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>)
 14 ( 10 ): %rax:52 = MOVrr64 %rax:51
 15 ( 20 ): %rax:52 = ADDr64i32 %rax:52, i32 8
 16 ( 11 ): %rcx:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 17 ( 12 ): MOVmr64 Base(%rax:52), %rcx:53
 18 ( 13 ): %rax:54 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>)
 19 ( 14 ): %rax:55 = MOVrr64 %rax:54
 20 ( 21 ): %rax:55 = ADDr64i32 %rax:55, i32 16
 21 ( 15 ): %rcx:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>)
 22 ( 16 ): MOVmr64 Base(%rax:55), %rcx:56
 23 ( 17 ): %rax:57 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Local(0)>)
 24 ( 18 ): %rax:16 = MOVrr64 %rax:57
 25 ( 28 ): %rsp:20 = MOVrr64 %rbp:21
 26 ( 29 ): POP64 %rbp:21
 27 ( 19 ): RET 
MachineFunction(name: Sphere_intersect, ty: i32 (struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, f64, f64}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([133159780593]), def: {%vreg22:70, %rsi:22, %vreg16:64, %xmm0:32, %vreg15:63, %vreg14:62, %vreg9:57, %vreg11:59, %vreg0:48, %vreg25:73, %vreg3:51, %vreg19:67, %vreg17:65, %vreg5:53, %vreg23:71, %vreg10:58, %vreg13:61, %vreg1:49, %vreg2:50, %vreg21:69, %vreg12:60, %vreg20:68, %vreg24:72, %rdi:23, %vreg18:66, %rax:16, %vreg26:74, %vreg7:55, %vreg8:56, %vreg4:52, %vreg6:54}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 212 }, Id { idx: 213 }, Id { idx: 214 }, Id { idx: 215 }, Id { idx: 216 }, Id { idx: 217 }, Id { idx: 218 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 140 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 8 }, Id { idx: 10 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 141 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 158 }, Id { idx: 20 }, Id { idx: 159 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 142 }, Id { idx: 24 }, Id { idx: 143 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 160 }, Id { idx: 162 }, Id { idx: 30 }, Id { idx: 163 }, Id { idx: 161 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 144 }, Id { idx: 37 }, Id { idx: 145 }, Id { idx: 38 }, Id { idx: 146 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 147 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 45 }] } })
 0  (212 ): PUSH64 %rbp:21
 1  (213 ): %rbp:21 = MOVrr64 %rsp:20
 2  (214 ): %rsp:20 = SUBr64i32 %rsp:20, i32 80
 3  (215 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>), %rdi:23
 4  (216 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  (217 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>), %rdx:18
 6  (218 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>), %rcx:17
 7  ( 0  ): %rax:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 8  ( 1  ): %rdi:50 = MOVrm64 Base(%rax:49)
 9  ( 2  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>)
 10 ( 3  ): %rax:52 = MOVrr64 %rax:51
 11 (140 ): %rax:52 = ADDr64i32 %rax:52, i32 8
 12 ( 4  ): %rsi:53 = MOVrm64 Base(%rax:52)
 13 ( 5  ): %rdi:23 = MOVrr64 %rdi:50
 14 ( 6  ): %rsi:22 = MOVrr64 %rsi:53
 15 ( 8  ): %rax:16 = CALL Address(addr<fn:Vec_sub>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 16 ( 10 ): %rax:54 = MOVrr64 %rax:16
 17 ( 11 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>), %rax:54
 18 ( 12 ): %xmm1:55 = MOVSDrm64 Address(label<data:3>)
 19 ( 13 ): %rdi:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 20 ( 14 ): %rax:57 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 21 ( 15 ): %rax:58 = MOVrr64 %rax:57
 22 (141 ): %rax:58 = ADDr64i32 %rax:58, i32 8
 23 ( 16 ): %rsi:59 = MOVrm64 Base(%rax:58)
 24 ( 17 ): %rdi:23 = MOVrr64 %rdi:56
 25 ( 18 ): %rsi:22 = MOVrr64 %rsi:59
 26 (158 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm1:55
 27 ( 20 ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 28 (159 ): %xmm1:55 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
 29 ( 22 ): %xmm0:60 = MOVSDrr %xmm0:32
 30 ( 23 ): %xmm1:61 = MOVSDrr %xmm1:55
 31 (142 ): %xmm1:61 = SUBSDrr %xmm1:61, %xmm0:60
 32 ( 24 ): %xmm3:62 = MOVSDrr %xmm0:60
 33 (143 ): %xmm3:62 = MULSDrr %xmm3:62, %xmm0:60
 34 ( 25 ): %rdi:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 35 ( 26 ): %rsi:64 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(0)>)
 36 ( 27 ): %rdi:23 = MOVrr64 %rdi:63
 37 ( 28 ): %rsi:22 = MOVrr64 %rsi:64
 38 (160 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm1:61
 39 (162 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(2)>), %xmm3:62
 40 ( 30 ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 41 (163 ): %xmm3:62 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(2)>)
 42 (161 ): %xmm1:61 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
 43 ( 32 ): %xmm4:65 = MOVSDrr %xmm0:32
 44 ( 33 ): %rax:66 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>)
 45 ( 34 ): %xmm0:67 = MOVSDrm Base(%rax:66)
 46 ( 35 ): %xmm2:68 = MOVSDrm Base(%rax:66)
 47 ( 36 ): %xmm0:69 = MOVSDrr %xmm0:67
 48 (144 ): %xmm0:69 = MULSDrr %xmm0:69, %xmm2:68
 49 ( 37 ): %xmm2:70 = MOVSDrr %xmm4:65
 50 (145 ): %xmm2:70 = SUBSDrr %xmm2:70, %xmm0:69
 51 ( 38 ): %xmm4:71 = MOVSDrr %xmm3:62
 52 (146 ): %xmm4:71 = SUBSDrr %xmm4:71, %xmm2:70
 53 ( 39 ): %xmm2:72 = SQRTSDrr %xmm4:71
 54 ( 40 ): %xmm0:73 = MOVSDrr %xmm1:61
 55 (147 ): %xmm0:73 = SUBSDrr %xmm0:73, %xmm2:72
 56 ( 41 ): %xmm3:48 = MOVSDrr %xmm0:73
 57 ( 42 ): %xmm0:74 = MOVSDrm64 Address(label<data:4>)
 58 ( 43 ): UCOMISDrr %xmm4:71, %xmm0:74
 59 ( 44 ): JBE BB#1
 60 ( 45 ): JMP BB#2
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 46 }, Id { idx: 219 }, Id { idx: 220 }, Id { idx: 47 }] } })
 61 ( 46 ): %eax:0 = MOVri32 i32 0
 62 (219 ): %rsp:20 = MOVrr64 %rbp:21
 63 (220 ): POP64 %rbp:21
 64 ( 47 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([38654705664]), def: {%vreg27:75}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }] } })
 65 ( 48 ): %xmm0:75 = MOVSDrm64 Address(label<data:5>)
 66 ( 49 ): UCOMISDrr %xmm3:48, %xmm0:75
 67 ( 50 ): JBE BB#3
 68 ( 51 ): JMP BB#4
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 52 }, Id { idx: 221 }, Id { idx: 222 }, Id { idx: 53 }] } })
 69 ( 52 ): %eax:0 = MOVri32 i32 0
 70 (221 ): %rsp:20 = MOVrr64 %rbp:21
 71 (222 ): POP64 %rbp:21
 72 ( 53 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([38656868385]), def: {%vreg30:78, %vreg28:76, %vreg29:77}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 2 }], succ: [Id { idx: 5 }, Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 54 }, Id { idx: 55 }, Id { idx: 148 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }] } })
 73 ( 54 ): %rax:76 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
 74 ( 55 ): %rax:77 = MOVrr64 %rax:76
 75 (148 ): %rax:77 = ADDr64i32 %rax:77, i32 28
 76 ( 56 ): %xmm0:78 = MOVSDrm Base(%rax:77)
 77 ( 57 ): UCOMISDrr %xmm0:78, %xmm3:48
 78 ( 58 ): JBE BB#5
 79 ( 59 ): JMP BB#6
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 60 }, Id { idx: 223 }, Id { idx: 224 }, Id { idx: 61 }] } })
 80 ( 60 ): %eax:0 = MOVri32 i32 0
 81 (223 ): %rsp:20 = MOVrr64 %rbp:21
 82 (224 ): POP64 %rbp:21
 83 ( 61 ): RET 
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([64457474551]), def: {%vreg46:94, %vreg64:112, %vreg58:106, %vreg65:113, %vreg49:97, %vreg48:96, %rsi:22, %vreg60:108, %vreg62:110, %vreg52:100, %vreg57:105, %xmm0:32, %xmm1:33, %vreg32:80, %vreg54:102, %vreg33:81, %vreg34:82, %vreg35:83, %vreg36:84, %vreg38:86, %vreg40:88, %vreg41:89, %vreg31:79, %vreg55:103, %vreg42:90, %vreg53:101, %vreg63:111, %vreg39:87, %vreg61:109, %vreg45:93, %vreg59:107, %vreg50:98, %vreg47:95, %vreg51:99, %vreg37:85, %rdi:23, %rax:16, %vreg43:91, %xmm2:34, %eax:0, %vreg44:92, %vreg56:104}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 62 }, Id { idx: 63 }, Id { idx: 149 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 150 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 164 }, Id { idx: 166 }, Id { idx: 168 }, Id { idx: 170 }, Id { idx: 72 }, Id { idx: 171 }, Id { idx: 169 }, Id { idx: 167 }, Id { idx: 165 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 172 }, Id { idx: 174 }, Id { idx: 176 }, Id { idx: 78 }, Id { idx: 177 }, Id { idx: 175 }, Id { idx: 173 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 151 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 152 }, Id { idx: 87 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 178 }, Id { idx: 180 }, Id { idx: 182 }, Id { idx: 91 }, Id { idx: 183 }, Id { idx: 181 }, Id { idx: 179 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 184 }, Id { idx: 186 }, Id { idx: 188 }, Id { idx: 96 }, Id { idx: 189 }, Id { idx: 187 }, Id { idx: 185 }, Id { idx: 98 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 153 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 154 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 190 }, Id { idx: 192 }, Id { idx: 194 }, Id { idx: 196 }, Id { idx: 110 }, Id { idx: 197 }, Id { idx: 195 }, Id { idx: 193 }, Id { idx: 191 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 198 }, Id { idx: 200 }, Id { idx: 202 }, Id { idx: 204 }, Id { idx: 117 }, Id { idx: 205 }, Id { idx: 203 }, Id { idx: 201 }, Id { idx: 199 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 206 }, Id { idx: 208 }, Id { idx: 210 }, Id { idx: 123 }, Id { idx: 211 }, Id { idx: 209 }, Id { idx: 207 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 155 }, Id { idx: 129 }, Id { idx: 130 }, Id { idx: 131 }, Id { idx: 132 }, Id { idx: 156 }, Id { idx: 133 }, Id { idx: 134 }, Id { idx: 135 }, Id { idx: 157 }, Id { idx: 136 }, Id { idx: 137 }, Id { idx: 138 }, Id { idx: 225 }, Id { idx: 226 }, Id { idx: 139 }] } })
 84 ( 62 ): %rax:79 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
 85 ( 63 ): %rcx:80 = MOVrr64 %rax:79
 86 (149 ): %rcx:80 = ADDr64i32 %rcx:80, i32 4
 87 ( 64 ): %rax:81 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 88 ( 65 ): %rdx:82 = MOVrm64 Base(%rax:81)
 89 ( 66 ): %rax:83 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 90 ( 67 ): %r8:84 = MOVrr64 %rax:83
 91 (150 ): %r8:84 = ADDr64i32 %r8:84, i32 8
 92 ( 68 ): %rdi:85 = MOVrm64 Base(%r8:84)
 93 ( 69 ): %rdi:23 = MOVrr64 %rdi:85
 94 ( 70 ): %xmm1:33 = MOVSDrr %xmm3:48
 95 (164 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
 96 (166 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rcx:80
 97 (168 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %rdx:82
 98 (170 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(5)>), %r8:84
 99 ( 72 ): %rax:16 = CALL Address(addr<fn:Vec_mul>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
100 (171 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(5)>)
101 (169 ): %rdx:82 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
102 (167 ): %rcx:80 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
103 (165 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
104 ( 74 ): %rsi:86 = MOVrr64 %rax:16
105 ( 75 ): %rdi:23 = MOVrr64 %rdx:82
106 ( 76 ): %rsi:22 = MOVrr64 %rsi:86
107 (172 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
108 (174 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rcx:80
109 (176 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %r8:84
110 ( 78 ): %rax:16 = CALL Address(addr<fn:Vec_add>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
111 (177 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
112 (175 ): %rcx:80 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
113 (173 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
114 ( 80 ): %rax:87 = MOVrr64 %rax:16
115 ( 81 ): MOVmr64 Base(%rcx:80), %rax:87
116 ( 82 ): %rax:88 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
117 ( 83 ): %rdx:89 = MOVrr64 %rax:88
118 (151 ): %rdx:89 = ADDr64i32 %rdx:89, i32 12
119 ( 84 ): %rdi:90 = MOVrm64 Base(%rcx:80)
120 ( 85 ): %rax:91 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>)
121 ( 86 ): %rax:92 = MOVrr64 %rax:91
122 (152 ): %rax:92 = ADDr64i32 %rax:92, i32 8
123 ( 87 ): %rsi:93 = MOVrm64 Base(%rax:92)
124 ( 88 ): %rdi:23 = MOVrr64 %rdi:90
125 ( 89 ): %rsi:22 = MOVrr64 %rsi:93
126 (178 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rdx:89
127 (180 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
128 (182 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %r8:84
129 ( 91 ): %rax:16 = CALL Address(addr<fn:Vec_sub>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
130 (183 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
131 (181 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
132 (179 ): %rdx:89 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
133 ( 93 ): %rdi:94 = MOVrr64 %rax:16
134 ( 94 ): %rdi:23 = MOVrr64 %rdi:94
135 (184 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rdx:89
136 (186 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
137 (188 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %r8:84
138 ( 96 ): %rax:16 = CALL Address(addr<fn:Vec_normalize>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
139 (189 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
140 (187 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
141 (185 ): %rdx:89 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
142 ( 98 ): %rax:95 = MOVrr64 %rax:16
143 ( 99 ): MOVmr64 Base(%rdx:89), %rax:95
144 (100 ): %rax:96 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
145 (101 ): %rcx:97 = MOVrr64 %rax:96
146 (153 ): %rcx:97 = ADDr64i32 %rcx:97, i32 20
147 (102 ): %rax:98 = MOVrm64 BaseFi(%rbp:21, FI<(ty:13)*, Arg(0)>)
148 (103 ): %rax:99 = MOVrr64 %rax:98
149 (154 ): %rax:99 = ADDr64i32 %rax:99, i32 16
150 (104 ): %rax:100 = MOVrm64 Base(%rax:99)
151 (105 ): %rdi:101 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
152 (106 ): %rsi:102 = MOVrm64 Base(%rdx:89)
153 (107 ): %rdi:23 = MOVrr64 %rdi:101
154 (108 ): %rsi:22 = MOVrr64 %rsi:102
155 (190 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rcx:97
156 (192 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
157 (194 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %rax:100
158 (196 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(5)>), %r8:84
159 (110 ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
160 (197 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(5)>)
161 (195 ): %rax:100 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
162 (193 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
163 (191 ): %rcx:97 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
164 (112 ): %xmm0:103 = MOVSDrr %xmm0:32
165 (113 ): %xmm0:32 = MOVSDrr %xmm0:103
166 (114 ): %xmm1:33 = MOVSDrm64 Address(label<data:6>)
167 (115 ): %xmm2:34 = MOVSDrm64 Address(label<data:7>)
168 (198 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rcx:97
169 (200 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
170 (202 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %rax:100
171 (204 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(5)>), %r8:84
172 (117 ): %xmm0:32 = CALL Address(addr<fn:clamp>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
173 (205 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(5)>)
174 (203 ): %rax:100 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
175 (201 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
176 (199 ): %rcx:97 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
177 (119 ): %xmm1:104 = MOVSDrr %xmm0:32
178 (120 ): %rdi:23 = MOVrr64 %rax:100
179 (121 ): %xmm1:33 = MOVSDrr %xmm1:104
180 (206 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %r8:84
181 (208 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(1)>), %xmm3:48
182 (210 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %rcx:97
183 (123 ): %rax:16 = CALL Address(addr<fn:Vec_mul>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
184 (211 ): %rcx:97 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
185 (209 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(1)>)
186 (207 ): %r8:84 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
187 (125 ): %rax:105 = MOVrr64 %rax:16
188 (126 ): MOVmr64 Base(%rcx:97), %rax:105
189 (127 ): %rax:106 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
190 (128 ): %rax:107 = MOVrr64 %rax:106
191 (155 ): %rax:107 = ADDr64i32 %rax:107, i32 28
192 (129 ): MOVSDmr Base(%rax:107), %xmm3:48
193 (130 ): %rcx:108 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
194 (131 ): %eax:109 = MOVrm32 Base(%rcx:108)
195 (132 ): %eax:110 = MOVrr32 %eax:109
196 (156 ): %eax:110 = ADDri32 %eax:110, i32 1
197 (133 ): MOVmr32 Base(%rcx:108), %eax:110
198 (134 ): %rax:111 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
199 (135 ): %rax:112 = MOVrr64 %rax:111
200 (157 ): %rax:112 = ADDr64i32 %rax:112, i32 36
201 (136 ): %rcx:113 = MOVrm64 Base(%r8:84)
202 (137 ): MOVmr64 Base(%rax:112), %rcx:113
203 (138 ): %eax:0 = MOVri32 i32 0
204 (225 ): %rsp:20 = MOVrr64 %rbp:21
205 (226 ): POP64 %rbp:21
206 (139 ): RET 
MachineFunction(name: Plane_new, ty: struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}* (struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([11731123]), def: {%vreg9:57, %vreg5:53, %rax:16, %vreg7:55, %edi:7, %vreg1:49, %vreg3:51, %vreg4:52, %vreg6:54, %vreg8:56, %vreg2:50, %vreg0:48}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 20 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 21 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 19 }] } })
 0  ( 22 ): PUSH64 %rbp:21
 1  ( 23 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 24 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 25 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 26 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  ( 27 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>), %rdx:18
 6  ( 0  ): %edi:7 = MOVri32 i32 128
 7  ( 2  ): %rax:16 = CALL Address(addr<fn:cilk.malloc.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 8  ( 4  ): %rax:48 = MOVrr64 %rax:16
 9  ( 5  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>), %rax:48
 10 ( 6  ): %rax:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>)
 11 ( 7  ): %rcx:50 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 12 ( 8  ): MOVmr64 Base(%rax:49), %rcx:50
 13 ( 9  ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>)
 14 ( 10 ): %rax:52 = MOVrr64 %rax:51
 15 ( 20 ): %rax:52 = ADDr64i32 %rax:52, i32 8
 16 ( 11 ): %rcx:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
 17 ( 12 ): MOVmr64 Base(%rax:52), %rcx:53
 18 ( 13 ): %rax:54 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>)
 19 ( 14 ): %rax:55 = MOVrr64 %rax:54
 20 ( 21 ): %rax:55 = ADDr64i32 %rax:55, i32 16
 21 ( 15 ): %rcx:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(2)>)
 22 ( 16 ): MOVmr64 Base(%rax:55), %rcx:56
 23 ( 17 ): %rax:57 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Local(0)>)
 24 ( 18 ): %rax:16 = MOVrr64 %rax:57
 25 ( 28 ): %rsp:20 = MOVrr64 %rbp:21
 26 ( 29 ): POP64 %rbp:21
 27 ( 19 ): RET 
MachineFunction(name: Plane_intersect, ty: i32 (struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, f64, f64}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([64440434931]), def: {%rdi:23, %vreg12:60, %vreg32:80, %vreg25:73, %vreg16:64, %xmm0:32, %vreg27:75, %vreg23:71, %vreg28:76, %vreg13:61, %vreg24:72, %vreg14:62, %vreg18:66, %vreg19:67, %vreg20:68, %vreg21:69, %vreg26:74, %vreg22:70, %vreg31:79, %vreg0:48, %vreg15:63, %vreg29:77, %vreg33:81, %vreg30:78, %vreg17:65, %rsi:22}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 310 }, Id { idx: 311 }, Id { idx: 312 }, Id { idx: 313 }, Id { idx: 314 }, Id { idx: 315 }, Id { idx: 316 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 220 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 252 }, Id { idx: 254 }, Id { idx: 9 }, Id { idx: 255 }, Id { idx: 253 }, Id { idx: 11 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 17 }, Id { idx: 256 }, Id { idx: 258 }, Id { idx: 260 }, Id { idx: 262 }, Id { idx: 19 }, Id { idx: 263 }, Id { idx: 261 }, Id { idx: 259 }, Id { idx: 257 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 221 }, Id { idx: 23 }, Id { idx: 222 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 223 }, Id { idx: 26 }, Id { idx: 27 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 264 }, Id { idx: 266 }, Id { idx: 31 }, Id { idx: 267 }, Id { idx: 265 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 224 }, Id { idx: 35 }, Id { idx: 225 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }] } })
 0  (310 ): PUSH64 %rbp:21
 1  (311 ): %rbp:21 = MOVrr64 %rsp:20
 2  (312 ): %rsp:20 = SUBr64i32 %rsp:20, i32 80
 3  (313 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>), %rdi:23
 4  (314 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>), %rsi:22
 5  (315 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>), %rdx:18
 6  (316 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>), %rcx:17
 7  ( 0  ): %xmm3:60 = MOVSDrm64 Address(label<data:8>)
 8  ( 1  ): %rax:61 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 9  ( 2  ): %rdi:62 = MOVrm64 Base(%rax:61)
 10 ( 3  ): %rax:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>)
 11 ( 4  ): %rcx:64 = MOVrr64 %rax:63
 12 (220 ): %rcx:64 = ADDr64i32 %rcx:64, i32 8
 13 ( 5  ): %rsi:65 = MOVrm64 Base(%rcx:64)
 14 ( 6  ): %rdi:23 = MOVrr64 %rdi:62
 15 ( 7  ): %rsi:22 = MOVrr64 %rsi:65
 16 (252 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:60
 17 (254 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:64
 18 ( 9  ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 19 (255 ): %rcx:64 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 20 (253 ): %xmm3:60 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
 21 ( 11 ): %xmm2:66 = MOVSDrr %xmm0:32
 22 ( 12 ): %xmm1:67 = MOVSDrm64 Address(label<data:9>)
 23 ( 13 ): %rax:68 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>)
 24 ( 14 ): %rdi:69 = MOVrm64 Base(%rax:68)
 25 ( 15 ): %rsi:70 = MOVrm64 Base(%rcx:64)
 26 ( 16 ): %rdi:23 = MOVrr64 %rdi:69
 27 ( 17 ): %rsi:22 = MOVrr64 %rsi:70
 28 (256 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm1:67
 29 (258 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(2)>), %xmm3:60
 30 (260 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:64
 31 (262 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(3)>), %xmm2:66
 32 ( 19 ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 33 (263 ): %xmm2:66 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(3)>)
 34 (261 ): %rcx:64 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 35 (259 ): %xmm3:60 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(2)>)
 36 (257 ): %xmm1:67 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
 37 ( 21 ): %xmm0:71 = MOVSDrr %xmm0:32
 38 ( 22 ): %xmm1:72 = MOVSDrr %xmm1:67
 39 (221 ): %xmm1:72 = SUBSDrr %xmm1:72, %xmm0:71
 40 ( 23 ): %xmm2:73 = MOVSDrr %xmm2:66
 41 (222 ): %xmm2:73 = ADDSDrr %xmm2:73, %xmm1:72
 42 ( 24 ): %rax:74 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 43 ( 25 ): %rax:75 = MOVrr64 %rax:74
 44 (223 ): %rax:75 = ADDr64i32 %rax:75, i32 8
 45 ( 26 ): %rdi:76 = MOVrm64 Base(%rax:75)
 46 ( 27 ): %rsi:77 = MOVrm64 Base(%rcx:64)
 47 ( 28 ): %rdi:23 = MOVrr64 %rdi:76
 48 ( 29 ): %rsi:22 = MOVrr64 %rsi:77
 49 (264 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm2:73
 50 (266 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(2)>), %xmm3:60
 51 ( 31 ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 52 (267 ): %xmm3:60 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(2)>)
 53 (265 ): %xmm2:73 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
 54 ( 33 ): %xmm1:78 = MOVSDrr %xmm0:32
 55 ( 34 ): %xmm0:79 = MOVSDrr %xmm2:73
 56 (224 ): %xmm0:79 = DIVSDrr %xmm0:79, %xmm1:78
 57 ( 35 ): %xmm1:80 = MOVSDrr %xmm3:60
 58 (225 ): %xmm1:80 = SUBSDrr %xmm1:80, %xmm0:79
 59 ( 36 ): %xmm3:48 = MOVSDrr %xmm1:80
 60 ( 37 ): %xmm0:81 = MOVSDrm64 Address(label<data:10>)
 61 ( 38 ): UCOMISDrr %xmm3:48, %xmm0:81
 62 ( 39 ): JBE BB#1
 63 ( 40 ): JMP BB#2
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 41 }, Id { idx: 317 }, Id { idx: 318 }, Id { idx: 42 }] } })
 64 ( 41 ): %eax:0 = MOVri32 i32 0
 65 (317 ): %rsp:20 = MOVrr64 %rbp:21
 66 (318 ): POP64 %rbp:21
 67 ( 42 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([38656868385]), def: {%vreg35:83, %vreg36:84, %vreg34:82}, live_in: {%vreg0:48}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }], succ: [Id { idx: 3 }, Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 43 }, Id { idx: 44 }, Id { idx: 226 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }] } })
 68 ( 43 ): %rax:82 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
 69 ( 44 ): %rax:83 = MOVrr64 %rax:82
 70 (226 ): %rax:83 = ADDr64i32 %rax:83, i32 28
 71 ( 45 ): %xmm0:84 = MOVSDrm Base(%rax:83)
 72 ( 46 ): UCOMISDrr %xmm0:84, %xmm3:48
 73 ( 47 ): JBE BB#3
 74 ( 48 ): JMP BB#4
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 2 }], succ: [], iseq: RefCell { value: [Id { idx: 49 }, Id { idx: 319 }, Id { idx: 320 }, Id { idx: 50 }] } })
 75 ( 49 ): %eax:0 = MOVri32 i32 0
 76 (319 ): %rsp:20 = MOVrr64 %rbp:21
 77 (320 ): POP64 %rbp:21
 78 ( 50 ): RET 
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([270599127287]), def: {%rdi:23, %vreg56:104, %rax:16, %vreg52:100, %vreg53:101, %vreg60:108, %vreg64:112, %xmm0:32, %vreg46:94, %vreg1:49, %vreg40:88, %vreg58:106, %vreg68:116, %vreg50:98, %vreg37:85, %vreg44:92, %vreg45:93, %vreg70:118, %vreg71:119, %vreg67:115, %vreg62:110, %vreg66:114, %xmm2:34, %vreg61:109, %vreg43:91, %vreg48:96, %vreg51:99, %vreg39:87, %vreg38:86, %vreg74:122, %vreg3:51, %vreg59:107, %vreg65:113, %vreg69:117, %vreg54:102, %vreg49:97, %vreg55:103, %vreg42:90, %vreg47:95, %vreg41:89, %vreg75:123, %vreg72:120, %xmm1:33, %vreg73:121, %vreg76:124, %vreg57:105, %vreg2:50, %vreg77:125, %vreg63:111, %rsi:22}, live_in: {%vreg0:48}, live_out: {%vreg0:48, %vreg1:49, %vreg2:50, %vreg3:51} } }, pred: [Id { idx: 2 }], succ: [Id { idx: 5 }, Id { idx: 8 }], iseq: RefCell { value: [Id { idx: 51 }, Id { idx: 52 }, Id { idx: 227 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 228 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 59 }, Id { idx: 268 }, Id { idx: 270 }, Id { idx: 272 }, Id { idx: 61 }, Id { idx: 273 }, Id { idx: 271 }, Id { idx: 269 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 274 }, Id { idx: 276 }, Id { idx: 67 }, Id { idx: 277 }, Id { idx: 275 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 229 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 230 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 80 }, Id { idx: 278 }, Id { idx: 280 }, Id { idx: 82 }, Id { idx: 281 }, Id { idx: 279 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 282 }, Id { idx: 284 }, Id { idx: 89 }, Id { idx: 285 }, Id { idx: 283 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 231 }, Id { idx: 99 }, Id { idx: 286 }, Id { idx: 288 }, Id { idx: 290 }, Id { idx: 292 }, Id { idx: 101 }, Id { idx: 293 }, Id { idx: 291 }, Id { idx: 289 }, Id { idx: 287 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 232 }, Id { idx: 106 }, Id { idx: 233 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 109 }, Id { idx: 234 }, Id { idx: 110 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 235 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 236 }, Id { idx: 116 }, Id { idx: 294 }, Id { idx: 296 }, Id { idx: 298 }, Id { idx: 300 }, Id { idx: 118 }, Id { idx: 301 }, Id { idx: 299 }, Id { idx: 297 }, Id { idx: 295 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 237 }, Id { idx: 123 }, Id { idx: 238 }, Id { idx: 124 }, Id { idx: 125 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }] } })
 79 ( 51 ): %rax:85 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
 80 ( 52 ): %rcx:86 = MOVrr64 %rax:85
 81 (227 ): %rcx:86 = ADDr64i32 %rcx:86, i32 4
 82 ( 53 ): %rax:87 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 83 ( 54 ): %rdx:88 = MOVrm64 Base(%rax:87)
 84 ( 55 ): %rax:89 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
 85 ( 56 ): %rax:90 = MOVrr64 %rax:89
 86 (228 ): %rax:90 = ADDr64i32 %rax:90, i32 8
 87 ( 57 ): %rdi:91 = MOVrm64 Base(%rax:90)
 88 ( 58 ): %rdi:23 = MOVrr64 %rdi:91
 89 ( 59 ): %xmm1:33 = MOVSDrr %xmm3:48
 90 (268 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
 91 (270 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:86
 92 (272 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(4)>), %rdx:88
 93 ( 61 ): %rax:16 = CALL Address(addr<fn:Vec_mul>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
 94 (273 ): %rdx:88 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(4)>)
 95 (271 ): %rcx:86 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 96 (269 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
 97 ( 63 ): %rsi:92 = MOVrr64 %rax:16
 98 ( 64 ): %rdi:23 = MOVrr64 %rdx:88
 99 ( 65 ): %rsi:22 = MOVrr64 %rsi:92
100 (274 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
101 (276 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:86
102 ( 67 ): %rax:16 = CALL Address(addr<fn:Vec_add>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
103 (277 ): %rcx:86 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
104 (275 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
105 ( 69 ): %rax:93 = MOVrr64 %rax:16
106 ( 70 ): MOVmr64 Base(%rcx:86), %rax:93
107 ( 71 ): %rax:94 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
108 ( 72 ): %rdx:95 = MOVrr64 %rax:94
109 (229 ): %rdx:95 = ADDr64i32 %rdx:95, i32 12
110 ( 73 ): %rax:96 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>)
111 ( 74 ): %rax:97 = MOVrr64 %rax:96
112 (230 ): %rax:97 = ADDr64i32 %rax:97, i32 8
113 ( 75 ): %rax:98 = MOVrm64 Base(%rax:97)
114 ( 76 ): MOVmr64 Base(%rdx:95), %rax:98
115 ( 77 ): %rdi:99 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(1)>)
116 ( 78 ): %rsi:100 = MOVrm64 Base(%rdx:95)
117 ( 79 ): %rdi:23 = MOVrr64 %rdi:99
118 ( 80 ): %rsi:22 = MOVrr64 %rsi:100
119 (278 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
120 (280 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:86
121 ( 82 ): %xmm0:32 = CALL Address(addr<fn:Vec_dot>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
122 (281 ): %rcx:86 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
123 (279 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
124 ( 84 ): %xmm0:101 = MOVSDrr %xmm0:32
125 ( 85 ): %xmm0:32 = MOVSDrr %xmm0:101
126 ( 86 ): %xmm1:33 = MOVSDrm64 Address(label<data:11>)
127 ( 87 ): %xmm2:34 = MOVSDrm64 Address(label<data:12>)
128 (282 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
129 (284 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:86
130 ( 89 ): %xmm0:32 = CALL Address(addr<fn:clamp>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
131 (285 ): %rcx:86 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
132 (283 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
133 ( 91 ): %xmm0:102 = MOVSDrr %xmm0:32
134 ( 92 ): %xmm4:49 = MOVSDrr %xmm0:102
135 ( 93 ): %rax:103 = MOVrm64 Base(%rcx:86)
136 ( 94 ): %xmm2:104 = MOVSDrm Base(%rax:103)
137 ( 95 ): %rax:105 = MOVrm64 Base(%rcx:86)
138 ( 96 ): %xmm1:106 = MOVSDrm Base(%rax:105)
139 ( 97 ): %xmm0:107 = MOVSDrm64 Address(label<data:13>)
140 ( 98 ): %xmm1:108 = MOVSDrr %xmm1:106
141 (231 ): %xmm1:108 = DIVSDrr %xmm1:108, %xmm0:107
142 ( 99 ): %xmm0:32 = MOVSDrr %xmm1:108
143 (286 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm2:104
144 (288 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(2)>), %xmm4:49
145 (290 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(3)>), %xmm3:48
146 (292 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:86
147 (101 ): %xmm0:32 = CALL Address(addr<fn:cilk.floor.f64>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
148 (293 ): %rcx:86 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
149 (291 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(3)>)
150 (289 ): %xmm4:49 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(2)>)
151 (287 ): %xmm2:104 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
152 (103 ): %xmm1:109 = MOVSDrr %xmm0:32
153 (104 ): %xmm0:110 = MOVSDrm64 Address(label<data:14>)
154 (105 ): %xmm1:111 = MOVSDrr %xmm1:109
155 (232 ): %xmm1:111 = MULSDrr %xmm1:111, %xmm0:110
156 (106 ): %xmm0:112 = MOVSDrr %xmm2:104
157 (233 ): %xmm0:112 = SUBSDrr %xmm0:112, %xmm1:111
158 (107 ): %xmm1:50 = MOVSDrr %xmm0:112
159 (108 ): %rax:113 = MOVrm64 Base(%rcx:86)
160 (109 ): %rax:114 = MOVrr64 %rax:113
161 (234 ): %rax:114 = ADDr64i32 %rax:114, i32 16
162 (110 ): %xmm5:115 = MOVSDrm Base(%rax:114)
163 (111 ): %rax:116 = MOVrm64 Base(%rcx:86)
164 (112 ): %rax:117 = MOVrr64 %rax:116
165 (235 ): %rax:117 = ADDr64i32 %rax:117, i32 16
166 (113 ): %xmm2:118 = MOVSDrm Base(%rax:117)
167 (114 ): %xmm0:119 = MOVSDrm64 Address(label<data:15>)
168 (115 ): %xmm2:120 = MOVSDrr %xmm2:118
169 (236 ): %xmm2:120 = DIVSDrr %xmm2:120, %xmm0:119
170 (116 ): %xmm0:32 = MOVSDrr %xmm2:120
171 (294 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
172 (296 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(2)>), %xmm4:49
173 (298 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(3)>), %xmm5:115
174 (300 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(5)>), %xmm1:50
175 (118 ): %xmm0:32 = CALL Address(addr<fn:cilk.floor.f64>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
176 (301 ): %xmm1:50 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(5)>)
177 (299 ): %xmm5:115 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(3)>)
178 (297 ): %xmm4:49 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(2)>)
179 (295 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
180 (120 ): %xmm2:121 = MOVSDrr %xmm0:32
181 (121 ): %xmm0:122 = MOVSDrm64 Address(label<data:16>)
182 (122 ): %xmm2:123 = MOVSDrr %xmm2:121
183 (237 ): %xmm2:123 = MULSDrr %xmm2:123, %xmm0:122
184 (123 ): %xmm0:124 = MOVSDrr %xmm5:115
185 (238 ): %xmm0:124 = SUBSDrr %xmm0:124, %xmm2:123
186 (124 ): %xmm2:51 = MOVSDrr %xmm0:124
187 (125 ): %xmm0:125 = MOVSDrm64 Address(label<data:17>)
188 (126 ): UCOMISDrr %xmm1:50, %xmm0:125
189 (127 ): JA BB#5
190 (128 ): JMP BB#8
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([90194313216]), def: {%vreg78:126, %vreg81:129}, live_in: {%vreg0:48, %vreg3:51, %vreg1:49}, live_out: {%vreg0:48, %vreg1:49, %vreg81:129} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }, Id { idx: 7 }], iseq: RefCell { value: [Id { idx: 129 }, Id { idx: 130 }, Id { idx: 211 }, Id { idx: 131 }, Id { idx: 132 }] } })
191 (129 ): %xmm0:126 = MOVSDrm64 Address(label<data:18>)
192 (130 ): UCOMISDrr %xmm2:51, %xmm0:126
193 (211 ): %xmm0:129 = MOVSDrr %xmm4:49
194 (131 ): JA BB#6
195 (132 ): JMP BB#7
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([81604378624]), def: {%vreg81:129, %vreg4:52, %vreg80:128, %vreg79:127}, live_in: {%vreg0:48, %vreg1:49}, live_out: {%vreg0:48, %vreg81:129} } }, pred: [Id { idx: 5 }], succ: [Id { idx: 7 }], iseq: RefCell { value: [Id { idx: 133 }, Id { idx: 134 }, Id { idx: 239 }, Id { idx: 135 }, Id { idx: 210 }, Id { idx: 136 }] } })
196 (133 ): %xmm1:127 = MOVSDrm64 Address(label<data:19>)
197 (134 ): %xmm0:128 = MOVSDrr %xmm4:49
198 (239 ): %xmm0:128 = MULSDrr %xmm0:128, %xmm1:127
199 (135 ): %xmm0:52 = MOVSDrr %xmm0:128
200 (210 ): %xmm0:129 = MOVSDrr %xmm0:52
201 (136 ): JMP BB#7
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4294967296]), def: {%vreg88:136, %vreg5:53}, live_in: {%vreg0:48, %vreg81:129}, live_out: {%vreg0:48, %vreg88:136} } }, pred: [Id { idx: 5 }, Id { idx: 6 }], succ: [Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 138 }, Id { idx: 216 }, Id { idx: 139 }] } })
202 (138 ): %xmm0:53 = MOVSDrr %xmm0:129
203 (216 ): %xmm0:136 = MOVSDrr %xmm0:53
204 (139 ): JMP BB#13
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([81604378624]), def: {%vreg87:135, %vreg82:130}, live_in: {%vreg0:48, %vreg1:49, %vreg2:50, %vreg3:51}, live_out: {%vreg87:135, %vreg1:49, %vreg0:48, %vreg3:51} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 9 }, Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 140 }, Id { idx: 141 }, Id { idx: 215 }, Id { idx: 142 }, Id { idx: 143 }] } })
205 (140 ): %xmm0:130 = MOVSDrm64 Address(label<data:20>)
206 (141 ): UCOMISDrr %xmm1:50, %xmm0:130
207 (215 ): %xmm0:135 = MOVSDrr %xmm4:49
208 (142 ): JB BB#9
209 (143 ): JMP BB#12
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([90194313216]), def: {%vreg86:134, %vreg83:131}, live_in: {%vreg0:48, %vreg3:51, %vreg1:49}, live_out: {%vreg0:48, %vreg1:49, %vreg86:134} } }, pred: [Id { idx: 8 }], succ: [Id { idx: 10 }, Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 144 }, Id { idx: 145 }, Id { idx: 213 }, Id { idx: 146 }, Id { idx: 147 }] } })
210 (144 ): %xmm0:131 = MOVSDrm64 Address(label<data:21>)
211 (145 ): UCOMISDrr %xmm2:51, %xmm0:131
212 (213 ): %xmm0:134 = MOVSDrr %xmm4:49
213 (146 ): JB BB#10
214 (147 ): JMP BB#11
MachineBasicBlock #10 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([81604378624]), def: {%vreg84:132, %vreg85:133, %vreg6:54, %vreg86:134}, live_in: {%vreg0:48, %vreg1:49}, live_out: {%vreg0:48, %vreg86:134} } }, pred: [Id { idx: 9 }], succ: [Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 148 }, Id { idx: 149 }, Id { idx: 240 }, Id { idx: 150 }, Id { idx: 212 }, Id { idx: 151 }] } })
215 (148 ): %xmm1:132 = MOVSDrm64 Address(label<data:22>)
216 (149 ): %xmm0:133 = MOVSDrr %xmm4:49
217 (240 ): %xmm0:133 = MULSDrr %xmm0:133, %xmm1:132
218 (150 ): %xmm0:54 = MOVSDrr %xmm0:133
219 (212 ): %xmm0:134 = MOVSDrr %xmm0:54
220 (151 ): JMP BB#11
MachineBasicBlock #11 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4294967296]), def: {%vreg7:55, %vreg87:135}, live_in: {%vreg0:48, %vreg86:134}, live_out: {%vreg87:135, %vreg0:48} } }, pred: [Id { idx: 9 }, Id { idx: 10 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 153 }, Id { idx: 214 }, Id { idx: 154 }] } })
221 (153 ): %xmm0:55 = MOVSDrr %xmm0:134
222 (214 ): %xmm0:135 = MOVSDrr %xmm0:55
223 (154 ): JMP BB#12
MachineBasicBlock #12 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4294967296]), def: {%vreg8:56, %vreg88:136}, live_in: {%vreg87:135, %vreg0:48}, live_out: {%vreg0:48, %vreg88:136} } }, pred: [Id { idx: 8 }, Id { idx: 11 }], succ: [Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 156 }, Id { idx: 217 }, Id { idx: 157 }] } })
224 (156 ): %xmm0:56 = MOVSDrr %xmm0:135
225 (217 ): %xmm0:136 = MOVSDrr %xmm0:56
226 (157 ): JMP BB#13
MachineBasicBlock #13 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([115967328305]), def: {%vreg89:137, %vreg94:142, %vreg92:140, %vreg105:153, %vreg90:138, %vreg10:58, %xmm0:32, %vreg95:143, %vreg93:141, %vreg91:139, %vreg9:57}, live_in: {%vreg0:48, %vreg88:136}, live_out: {%vreg0:48, %vreg10:58, %vreg9:57, %vreg105:153} } }, pred: [Id { idx: 7 }, Id { idx: 12 }], succ: [Id { idx: 14 }, Id { idx: 15 }], iseq: RefCell { value: [Id { idx: 159 }, Id { idx: 160 }, Id { idx: 161 }, Id { idx: 241 }, Id { idx: 162 }, Id { idx: 163 }, Id { idx: 242 }, Id { idx: 164 }, Id { idx: 165 }, Id { idx: 302 }, Id { idx: 304 }, Id { idx: 167 }, Id { idx: 305 }, Id { idx: 303 }, Id { idx: 169 }, Id { idx: 170 }, Id { idx: 171 }, Id { idx: 172 }, Id { idx: 219 }, Id { idx: 173 }, Id { idx: 174 }] } })
227 (159 ): %xmm1:57 = MOVSDrr %xmm0:136
228 (160 ): %rax:137 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
229 (161 ): %rax:138 = MOVrr64 %rax:137
230 (241 ): %rax:138 = ADDr64i32 %rax:138, i32 4
231 (162 ): %rax:139 = MOVrm64 Base(%rax:138)
232 (163 ): %rax:140 = MOVrr64 %rax:139
233 (242 ): %rax:140 = ADDr64i32 %rax:140, i32 16
234 (164 ): %xmm0:141 = MOVSDrm Base(%rax:140)
235 (165 ): %xmm0:32 = MOVSDrr %xmm0:141
236 (302 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
237 (304 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(2)>), %xmm1:57
238 (167 ): %xmm0:32 = CALL Address(addr<fn:cilk.fabs.f64>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
239 (305 ): %xmm1:57 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(2)>)
240 (303 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
241 (169 ): %xmm0:142 = MOVSDrr %xmm0:32
242 (170 ): %xmm4:58 = MOVSDrr %xmm0:142
243 (171 ): %xmm0:143 = MOVSDrm64 Address(label<data:23>)
244 (172 ): UCOMISDrr %xmm4:58, %xmm0:143
245 (219 ): %xmm0:153 = MOVSDrm64 Address(label<data:24>)
246 (173 ): JB BB#14
247 (174 ): JMP BB#15
MachineBasicBlock #14 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([227633266688]), def: {%vreg99:147, %vreg98:146, %vreg96:144, %vreg97:145, %vreg11:59, %vreg105:153}, live_in: {%vreg10:58, %vreg0:48, %vreg9:57}, live_out: {%vreg0:48, %vreg9:57, %vreg105:153} } }, pred: [Id { idx: 13 }], succ: [Id { idx: 15 }], iseq: RefCell { value: [Id { idx: 175 }, Id { idx: 176 }, Id { idx: 177 }, Id { idx: 243 }, Id { idx: 178 }, Id { idx: 244 }, Id { idx: 179 }, Id { idx: 218 }, Id { idx: 180 }] } })
248 (175 ): %xmm5:144 = MOVSDrm64 Address(label<data:25>)
249 (176 ): %xmm2:145 = MOVSDrm64 Address(label<data:26>)
250 (177 ): %xmm0:146 = MOVSDrr %xmm4:58
251 (243 ): %xmm0:146 = MULSDrr %xmm0:146, %xmm2:145
252 (178 ): %xmm2:147 = MOVSDrr %xmm5:144
253 (244 ): %xmm2:147 = SUBSDrr %xmm2:147, %xmm0:146
254 (179 ): %xmm0:59 = MOVSDrr %xmm2:147
255 (218 ): %xmm0:153 = MOVSDrr %xmm0:59
256 (180 ): JMP BB#15
MachineBasicBlock #15 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([47256371379]), def: {%rax:16, %vreg107:155, %rdi:23, %vreg117:165, %vreg103:151, %vreg110:158, %vreg101:149, %vreg116:164, %eax:0, %vreg114:162, %vreg112:160, %vreg108:156, %vreg104:152, %xmm1:33, %vreg100:148, %vreg102:150, %vreg109:157, %vreg111:159, %vreg113:161, %vreg115:163, %vreg106:154}, live_in: {%vreg0:48, %vreg9:57, %vreg105:153}, live_out: {} } }, pred: [Id { idx: 13 }, Id { idx: 14 }], succ: [], iseq: RefCell { value: [Id { idx: 181 }, Id { idx: 182 }, Id { idx: 245 }, Id { idx: 183 }, Id { idx: 184 }, Id { idx: 246 }, Id { idx: 185 }, Id { idx: 187 }, Id { idx: 247 }, Id { idx: 188 }, Id { idx: 189 }, Id { idx: 306 }, Id { idx: 308 }, Id { idx: 191 }, Id { idx: 309 }, Id { idx: 307 }, Id { idx: 193 }, Id { idx: 194 }, Id { idx: 195 }, Id { idx: 196 }, Id { idx: 248 }, Id { idx: 197 }, Id { idx: 198 }, Id { idx: 199 }, Id { idx: 200 }, Id { idx: 249 }, Id { idx: 201 }, Id { idx: 202 }, Id { idx: 203 }, Id { idx: 250 }, Id { idx: 204 }, Id { idx: 205 }, Id { idx: 251 }, Id { idx: 206 }, Id { idx: 207 }, Id { idx: 208 }, Id { idx: 321 }, Id { idx: 322 }, Id { idx: 209 }] } })
257 (181 ): %rax:148 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
258 (182 ): %rcx:149 = MOVrr64 %rax:148
259 (245 ): %rcx:149 = ADDr64i32 %rcx:149, i32 20
260 (183 ): %rax:150 = MOVrm64 BaseFi(%rbp:21, FI<(ty:14)*, Arg(0)>)
261 (184 ): %rax:151 = MOVrr64 %rax:150
262 (246 ): %rax:151 = ADDr64i32 %rax:151, i32 16
263 (185 ): %rdi:152 = MOVrm64 Base(%rax:151)
264 (187 ): %xmm1:154 = MOVSDrr %xmm1:57
265 (247 ): %xmm1:154 = MULSDrr %xmm1:154, %xmm0:153
266 (188 ): %rdi:23 = MOVrr64 %rdi:152
267 (189 ): %xmm1:33 = MOVSDrr %xmm1:154
268 (306 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:48
269 (308 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:149
270 (191 ): %rax:16 = CALL Address(addr<fn:Vec_mul>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
271 (309 ): %rcx:149 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
272 (307 ): %xmm3:48 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
273 (193 ): %rax:155 = MOVrr64 %rax:16
274 (194 ): MOVmr64 Base(%rcx:149), %rax:155
275 (195 ): %rax:156 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
276 (196 ): %rax:157 = MOVrr64 %rax:156
277 (248 ): %rax:157 = ADDr64i32 %rax:157, i32 28
278 (197 ): MOVSDmr Base(%rax:157), %xmm3:48
279 (198 ): %rax:158 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
280 (199 ): %ecx:159 = MOVrm32 Base(%rax:158)
281 (200 ): %ecx:160 = MOVrr32 %ecx:159
282 (249 ): %ecx:160 = ADDri32 %ecx:160, i32 1
283 (201 ): MOVmr32 Base(%rax:158), %ecx:160
284 (202 ): %rax:161 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(3)>)
285 (203 ): %rcx:162 = MOVrr64 %rax:161
286 (250 ): %rcx:162 = ADDr64i32 %rcx:162, i32 36
287 (204 ): %rax:163 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(2)>)
288 (205 ): %rax:164 = MOVrr64 %rax:163
289 (251 ): %rax:164 = ADDr64i32 %rax:164, i32 8
290 (206 ): %rax:165 = MOVrm64 Base(%rax:164)
291 (207 ): MOVmr64 Base(%rcx:162), %rax:165
292 (208 ): %eax:0 = MOVri32 i32 0
293 (321 ): %rsp:20 = MOVrr64 %rbp:21
294 (322 ): POP64 %rbp:21
295 (209 ): RET 
MachineFunction(name: Env_intersect, ty: i32 (struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {i32, struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*, f64, struct {f64, f64, f64}*}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([32965111]), def: {%vreg17:65, %vreg10:58, %vreg23:71, %vreg3:51, %rsi:22, %vreg25:73, %vreg26:74, %vreg28:76, %vreg20:68, %vreg4:52, %vreg21:69, %rdx:18, %vreg2:50, %vreg1:49, %vreg5:53, %rdi:23, %eax:0, %vreg24:72, %vreg8:56, %vreg9:57, %vreg19:67, %vreg6:54, %vreg7:55, %rcx:17, %vreg16:64, %vreg18:66, %vreg12:60, %vreg13:61, %vreg11:59, %vreg14:62, %vreg0:48, %vreg15:63, %vreg22:70, %vreg27:75}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 73 }, Id { idx: 74 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 59 }, Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }, Id { idx: 63 }, Id { idx: 12 }, Id { idx: 64 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 60 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 65 }, Id { idx: 26 }, Id { idx: 66 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 61 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 67 }, Id { idx: 40 }, Id { idx: 68 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 44 }, Id { idx: 62 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 54 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 58 }] } })
 0  ( 69 ): PUSH64 %rbp:21
 1  ( 70 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 71 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 72 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>), %rdi:23
 4  ( 73 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>), %rsi:22
 5  ( 74 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>), %rdx:18
 6  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>)
 7  ( 1  ): %rax:49 = MOVrr64 %rax:48
 8  ( 59 ): %rax:49 = ADDr64i32 %rax:49, i32 8
 9  ( 2  ): %rdi:50 = MOVrm64 Base(%rax:49)
 10 ( 3  ): %r8:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>)
 11 ( 4  ): %rsi:52 = MOVrm64 Base(%r8:51)
 12 ( 5  ): %rdx:53 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>)
 13 ( 6  ): %rcx:54 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>)
 14 ( 7  ): %rdi:23 = MOVrr64 %rdi:50
 15 ( 8  ): %rsi:22 = MOVrr64 %rsi:52
 16 ( 9  ): %rdx:18 = MOVrr64 %rdx:53
 17 ( 10 ): %rcx:17 = MOVrr64 %rcx:54
 18 ( 63 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(0)>), %r8:51
 19 ( 12 ): %eax:0 = CALL Address(addr<fn:Sphere_intersect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 20 ( 64 ): %r8:51 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(0)>)
 21 ( 14 ): %eax:55 = MOVrr32 %eax:0
 22 ( 15 ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>)
 23 ( 16 ): %rax:57 = MOVrr64 %rax:56
 24 ( 60 ): %rax:57 = ADDr64i32 %rax:57, i32 16
 25 ( 17 ): %rdi:58 = MOVrm64 Base(%rax:57)
 26 ( 18 ): %rsi:59 = MOVrm64 Base(%r8:51)
 27 ( 19 ): %rdx:60 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>)
 28 ( 20 ): %rcx:61 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>)
 29 ( 21 ): %rdi:23 = MOVrr64 %rdi:58
 30 ( 22 ): %rsi:22 = MOVrr64 %rsi:59
 31 ( 23 ): %rdx:18 = MOVrr64 %rdx:60
 32 ( 24 ): %rcx:17 = MOVrr64 %rcx:61
 33 ( 65 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(0)>), %r8:51
 34 ( 26 ): %eax:0 = CALL Address(addr<fn:Sphere_intersect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 35 ( 66 ): %r8:51 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(0)>)
 36 ( 28 ): %eax:62 = MOVrr32 %eax:0
 37 ( 29 ): %rax:63 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>)
 38 ( 30 ): %rax:64 = MOVrr64 %rax:63
 39 ( 61 ): %rax:64 = ADDr64i32 %rax:64, i32 24
 40 ( 31 ): %rdi:65 = MOVrm64 Base(%rax:64)
 41 ( 32 ): %rsi:66 = MOVrm64 Base(%r8:51)
 42 ( 33 ): %rdx:67 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>)
 43 ( 34 ): %rcx:68 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>)
 44 ( 35 ): %rdi:23 = MOVrr64 %rdi:65
 45 ( 36 ): %rsi:22 = MOVrr64 %rsi:66
 46 ( 37 ): %rdx:18 = MOVrr64 %rdx:67
 47 ( 38 ): %rcx:17 = MOVrr64 %rcx:68
 48 ( 67 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(0)>), %r8:51
 49 ( 40 ): %eax:0 = CALL Address(addr<fn:Sphere_intersect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 50 ( 68 ): %r8:51 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(0)>)
 51 ( 42 ): %eax:69 = MOVrr32 %eax:0
 52 ( 43 ): %rax:70 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Arg(0)>)
 53 ( 44 ): %rax:71 = MOVrr64 %rax:70
 54 ( 62 ): %rax:71 = ADDr64i32 %rax:71, i32 32
 55 ( 45 ): %rdi:72 = MOVrm64 Base(%rax:71)
 56 ( 46 ): %rsi:73 = MOVrm64 Base(%r8:51)
 57 ( 47 ): %rdx:74 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Arg(1)>)
 58 ( 48 ): %rcx:75 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Arg(2)>)
 59 ( 49 ): %rdi:23 = MOVrr64 %rdi:72
 60 ( 50 ): %rsi:22 = MOVrr64 %rsi:73
 61 ( 51 ): %rdx:18 = MOVrr64 %rdx:74
 62 ( 52 ): %rcx:17 = MOVrr64 %rcx:75
 63 ( 54 ): %eax:0 = CALL Address(addr<fn:Plane_intersect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,%rcx:17,)
 64 ( 56 ): %eax:76 = MOVrr32 %eax:0
 65 ( 57 ): %eax:0 = MOVri32 i32 0
 66 ( 75 ): %rsp:20 = MOVrr64 %rbp:21
 67 ( 76 ): POP64 %rbp:21
 68 ( 58 ): RET 
MachineFunction(name: Env_new, ty: struct {struct {f64, f64, f64}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {f64, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*, struct {struct {f64, f64, f64}*, struct {f64, f64, f64}*, struct {f64, f64, f64}*}*}* ()):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([30080958711]), def: {%vreg3:51, %vreg4:52, %xmm2:34, %vreg5:53, %vreg6:54, %vreg1:49, %vreg19:67, %vreg23:71, %vreg14:62, %rsi:22, %vreg8:56, %vreg9:57, %vreg25:73, %rdi:23, %vreg0:48, %vreg17:65, %vreg18:66, %rax:16, %vreg13:61, %vreg12:60, %vreg26:74, %vreg10:58, %xmm1:33, %vreg22:70, %vreg2:50, %vreg21:69, %vreg20:68, %vreg16:64, %xmm0:32, %edi:7, %rdx:18, %vreg24:72, %vreg15:63, %vreg11:59, %vreg7:55}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 179 }, Id { idx: 180 }, Id { idx: 181 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 135 }, Id { idx: 11 }, Id { idx: 136 }, Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 131 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 137 }, Id { idx: 21 }, Id { idx: 138 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 139 }, Id { idx: 141 }, Id { idx: 28 }, Id { idx: 142 }, Id { idx: 140 }, Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 143 }, Id { idx: 35 }, Id { idx: 144 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 132 }, Id { idx: 41 }, Id { idx: 145 }, Id { idx: 43 }, Id { idx: 146 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 147 }, Id { idx: 50 }, Id { idx: 148 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 149 }, Id { idx: 151 }, Id { idx: 57 }, Id { idx: 152 }, Id { idx: 150 }, Id { idx: 59 }, Id { idx: 60 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 153 }, Id { idx: 64 }, Id { idx: 154 }, Id { idx: 66 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 133 }, Id { idx: 70 }, Id { idx: 155 }, Id { idx: 72 }, Id { idx: 156 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 157 }, Id { idx: 79 }, Id { idx: 158 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 159 }, Id { idx: 161 }, Id { idx: 86 }, Id { idx: 162 }, Id { idx: 160 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 163 }, Id { idx: 93 }, Id { idx: 164 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 97 }, Id { idx: 98 }, Id { idx: 134 }, Id { idx: 99 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 165 }, Id { idx: 103 }, Id { idx: 166 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 108 }, Id { idx: 167 }, Id { idx: 169 }, Id { idx: 110 }, Id { idx: 170 }, Id { idx: 168 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 171 }, Id { idx: 173 }, Id { idx: 175 }, Id { idx: 117 }, Id { idx: 176 }, Id { idx: 174 }, Id { idx: 172 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 177 }, Id { idx: 124 }, Id { idx: 178 }, Id { idx: 126 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 129 }, Id { idx: 182 }, Id { idx: 183 }, Id { idx: 130 }] } })
 0  (179 ): PUSH64 %rbp:21
 1  (180 ): %rbp:21 = MOVrr64 %rsp:20
 2  (181 ): %rsp:20 = SUBr64i32 %rsp:20, i32 32
 3  ( 0  ): %edi:7 = MOVri32 i32 128
 4  ( 2  ): %rax:16 = CALL Address(addr<fn:cilk.malloc.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 5  ( 4  ): %rax:48 = MOVrr64 %rax:16
 6  ( 5  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>), %rax:48
 7  ( 6  ): %rcx:49 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
 8  ( 7  ): %xmm0:32 = MOVSDrm64 Address(label<data:27>)
 9  ( 8  ): %xmm1:33 = MOVSDrm64 Address(label<data:28>)
 10 ( 9  ): %xmm2:34 = MOVSDrm64 Address(label<data:29>)
 11 (135 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:49
 12 ( 11 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 13 (136 ): %rcx:49 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 14 ( 13 ): %rax:50 = MOVrr64 %rax:16
 15 ( 14 ): MOVmr64 Base(%rcx:49), %rax:50
 16 ( 15 ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
 17 ( 16 ): %rcx:52 = MOVrr64 %rax:51
 18 (131 ): %rcx:52 = ADDr64i32 %rcx:52, i32 8
 19 ( 17 ): %xmm0:32 = MOVSDrm64 Address(label<data:30>)
 20 ( 18 ): %xmm1:33 = MOVSDrm64 Address(label<data:31>)
 21 ( 19 ): %xmm2:34 = MOVSDrm64 Address(label<data:32>)
 22 (137 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:52
 23 ( 21 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 24 (138 ): %rcx:52 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 25 ( 23 ): %rsi:53 = MOVrr64 %rax:16
 26 ( 24 ): %xmm0:32 = MOVSDrm64 Address(label<data:33>)
 27 ( 25 ): %xmm1:33 = MOVSDrm64 Address(label<data:34>)
 28 ( 26 ): %xmm2:34 = MOVSDrm64 Address(label<data:35>)
 29 (139 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:52
 30 (141 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(2)>), %rsi:53
 31 ( 28 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 32 (142 ): %rsi:53 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(2)>)
 33 (140 ): %rcx:52 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 34 ( 30 ): %rdx:54 = MOVrr64 %rax:16
 35 ( 31 ): %xmm0:32 = MOVSDrm64 Address(label<data:36>)
 36 ( 32 ): %rsi:22 = MOVrr64 %rsi:53
 37 ( 33 ): %rdx:18 = MOVrr64 %rdx:54
 38 (143 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:52
 39 ( 35 ): %rax:16 = CALL Address(addr<fn:Sphere_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 40 (144 ): %rcx:52 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 41 ( 37 ): %rax:55 = MOVrr64 %rax:16
 42 ( 38 ): MOVmr64 Base(%rcx:52), %rax:55
 43 ( 39 ): %rax:56 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
 44 ( 40 ): %rcx:57 = MOVrr64 %rax:56
 45 (132 ): %rcx:57 = ADDr64i32 %rcx:57, i32 16
 46 ( 41 ): %xmm0:32 = MOVSDrm64 Address(label<data:37>)
 47 (145 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:57
 48 ( 43 ): %xmm0:32 = CALL Address(addr<fn:cilk.cos.f64>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 49 (146 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 50 ( 45 ): %xmm2:58 = MOVSDrr %xmm0:32
 51 ( 46 ): %xmm0:32 = MOVSDrm64 Address(label<data:38>)
 52 ( 47 ): %xmm1:33 = MOVSDrm64 Address(label<data:39>)
 53 ( 48 ): %xmm2:34 = MOVSDrr %xmm2:58
 54 (147 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:57
 55 ( 50 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 56 (148 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 57 ( 52 ): %rsi:59 = MOVrr64 %rax:16
 58 ( 53 ): %xmm0:32 = MOVSDrm64 Address(label<data:40>)
 59 ( 54 ): %xmm1:33 = MOVSDrm64 Address(label<data:41>)
 60 ( 55 ): %xmm2:34 = MOVSDrm64 Address(label<data:42>)
 61 (149 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rsi:59
 62 (151 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(2)>), %rcx:57
 63 ( 57 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 64 (152 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(2)>)
 65 (150 ): %rsi:59 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 66 ( 59 ): %rdx:60 = MOVrr64 %rax:16
 67 ( 60 ): %xmm0:32 = MOVSDrm64 Address(label<data:43>)
 68 ( 61 ): %rsi:22 = MOVrr64 %rsi:59
 69 ( 62 ): %rdx:18 = MOVrr64 %rdx:60
 70 (153 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:57
 71 ( 64 ): %rax:16 = CALL Address(addr<fn:Sphere_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
 72 (154 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 73 ( 66 ): %rax:61 = MOVrr64 %rax:16
 74 ( 67 ): MOVmr64 Base(%rcx:57), %rax:61
 75 ( 68 ): %rax:62 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
 76 ( 69 ): %rcx:63 = MOVrr64 %rax:62
 77 (133 ): %rcx:63 = ADDr64i32 %rcx:63, i32 24
 78 ( 70 ): %xmm0:32 = MOVSDrm64 Address(label<data:44>)
 79 (155 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:63
 80 ( 72 ): %xmm0:32 = CALL Address(addr<fn:cilk.cos.f64>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 81 (156 ): %rcx:63 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 82 ( 74 ): %xmm2:64 = MOVSDrr %xmm0:32
 83 ( 75 ): %xmm0:32 = MOVSDrm64 Address(label<data:45>)
 84 ( 76 ): %xmm1:33 = MOVSDrm64 Address(label<data:46>)
 85 ( 77 ): %xmm2:34 = MOVSDrr %xmm2:64
 86 (157 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:63
 87 ( 79 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 88 (158 ): %rcx:63 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 89 ( 81 ): %rsi:65 = MOVrr64 %rax:16
 90 ( 82 ): %xmm0:32 = MOVSDrm64 Address(label<data:47>)
 91 ( 83 ): %xmm1:33 = MOVSDrm64 Address(label<data:48>)
 92 ( 84 ): %xmm2:34 = MOVSDrm64 Address(label<data:49>)
 93 (159 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rsi:65
 94 (161 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(2)>), %rcx:63
 95 ( 86 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 96 (162 ): %rcx:63 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(2)>)
 97 (160 ): %rsi:65 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
 98 ( 88 ): %rdx:66 = MOVrr64 %rax:16
 99 ( 89 ): %xmm0:32 = MOVSDrm64 Address(label<data:50>)
100 ( 90 ): %rsi:22 = MOVrr64 %rsi:65
101 ( 91 ): %rdx:18 = MOVrr64 %rdx:66
102 (163 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:63
103 ( 93 ): %rax:16 = CALL Address(addr<fn:Sphere_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%rsi:22,%rdx:18,)
104 (164 ): %rcx:63 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
105 ( 95 ): %rax:67 = MOVrr64 %rax:16
106 ( 96 ): MOVmr64 Base(%rcx:63), %rax:67
107 ( 97 ): %rax:68 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
108 ( 98 ): %rcx:69 = MOVrr64 %rax:68
109 (134 ): %rcx:69 = ADDr64i32 %rcx:69, i32 32
110 ( 99 ): %xmm0:32 = MOVSDrm64 Address(label<data:51>)
111 (100 ): %xmm1:33 = MOVSDrm64 Address(label<data:52>)
112 (101 ): %xmm2:34 = MOVSDrm64 Address(label<data:53>)
113 (165 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:69
114 (103 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
115 (166 ): %rcx:69 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
116 (105 ): %rdi:70 = MOVrr64 %rax:16
117 (106 ): %xmm0:32 = MOVSDrm64 Address(label<data:54>)
118 (107 ): %xmm1:33 = MOVSDrm64 Address(label<data:55>)
119 (108 ): %xmm2:34 = MOVSDrm64 Address(label<data:56>)
120 (167 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:69
121 (169 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(2)>), %rdi:70
122 (110 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
123 (170 ): %rdi:70 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(2)>)
124 (168 ): %rcx:69 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
125 (112 ): %rsi:71 = MOVrr64 %rax:16
126 (113 ): %xmm0:32 = MOVSDrm64 Address(label<data:57>)
127 (114 ): %xmm1:33 = MOVSDrm64 Address(label<data:58>)
128 (115 ): %xmm2:34 = MOVSDrm64 Address(label<data:59>)
129 (171 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:69
130 (173 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(2)>), %rsi:71
131 (175 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(3)>), %rdi:70
132 (117 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
133 (176 ): %rdi:70 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(3)>)
134 (174 ): %rsi:71 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(2)>)
135 (172 ): %rcx:69 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
136 (119 ): %rdx:72 = MOVrr64 %rax:16
137 (120 ): %rdi:23 = MOVrr64 %rdi:70
138 (121 ): %rsi:22 = MOVrr64 %rsi:71
139 (122 ): %rdx:18 = MOVrr64 %rdx:72
140 (177 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(1)>), %rcx:69
141 (124 ): %rax:16 = CALL Address(addr<fn:Plane_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
142 (178 ): %rcx:69 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(1)>)
143 (126 ): %rax:73 = MOVrr64 %rax:16
144 (127 ): MOVmr64 Base(%rcx:69), %rax:73
145 (128 ): %rax:74 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
146 (129 ): %rax:16 = MOVrr64 %rax:74
147 (182 ): %rsp:20 = MOVrr64 %rbp:21
148 (183 ): POP64 %rbp:21
149 (130 ): RET 
MachineFunction(name: color_of, ty: i32 (f64, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([64436109489]), def: {%eax:0, %vreg5:53, %xmm1:33, %xmm2:34, %vreg1:49, %vreg3:51, %vreg4:52, %edi:7, %vreg2:50, %vreg0:48, %xmm0:32}, live_in: {}, live_out: {%vreg0:48} } }, pred: [], succ: [Id { idx: 1 }, Id { idx: 2 }], iseq: RefCell { value: [Id { idx: 30 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 0 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 5 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 28 }, Id { idx: 10 }, Id { idx: 29 }, Id { idx: 12 }, Id { idx: 13 }, Id { idx: 27 }, Id { idx: 14 }, Id { idx: 16 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }, Id { idx: 22 }] } })
 0  ( 30 ): PUSH64 %rbp:21
 1  ( 31 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 32 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 33 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Arg(0)>), %xmm0:32
 4  ( 0  ): %edi:7 = MOVri32 i32 256
 5  ( 2  ): %xmm0:32 = CALL Address(addr<fn:cilk.i32_to_f64.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 6  ( 4  ): %xmm3:49 = MOVSDrr %xmm0:32
 7  ( 5  ): %xmm0:50 = MOVSDrm BaseFi(%rbp:21, FI<f64, Arg(0)>)
 8  ( 6  ): %xmm0:32 = MOVSDrr %xmm0:50
 9  ( 7  ): %xmm1:33 = MOVSDrm64 Address(label<data:60>)
 10 ( 8  ): %xmm2:34 = MOVSDrm64 Address(label<data:61>)
 11 ( 28 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(0)>), %xmm3:49
 12 ( 10 ): %xmm0:32 = CALL Address(addr<fn:clamp>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 13 ( 29 ): %xmm3:49 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(0)>)
 14 ( 12 ): %xmm1:51 = MOVSDrr %xmm0:32
 15 ( 13 ): %xmm0:52 = MOVSDrr %xmm3:49
 16 ( 27 ): %xmm0:52 = MULSDrr %xmm0:52, %xmm1:51
 17 ( 14 ): %xmm0:32 = MOVSDrr %xmm0:52
 18 ( 16 ): %eax:0 = CALL Address(addr<fn:cilk.f64_to_i32.f64>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 19 ( 18 ): %eax:53 = MOVrr32 %eax:0
 20 ( 19 ): %eax:48 = MOVrr32 %eax:53
 21 ( 20 ): CMPri %eax:48, i32 256
 22 ( 21 ): JE BB#1
 23 ( 22 ): JMP BB#2
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 23 }, Id { idx: 34 }, Id { idx: 35 }, Id { idx: 24 }] } })
 24 ( 23 ): %eax:0 = MOVri32 i32 255
 25 ( 34 ): %rsp:20 = MOVrr64 %rbp:21
 26 ( 35 ): POP64 %rbp:21
 27 ( 24 ): RET 
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {%vreg0:48}, live_out: {} } }, pred: [Id { idx: 0 }], succ: [], iseq: RefCell { value: [Id { idx: 25 }, Id { idx: 36 }, Id { idx: 37 }, Id { idx: 26 }] } })
 28 ( 25 ): %eax:0 = MOVrr32 %eax:48
 29 ( 36 ): %rsp:20 = MOVrr64 %rbp:21
 30 ( 37 ): POP64 %rbp:21
 31 ( 26 ): RET 
MachineFunction(name: print_col, ty: i32 (struct {f64, f64, f64}*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([4306567345]), def: {%eax:0, %vreg4:52, %vreg0:48, %vreg6:54, %vreg2:50, %vreg7:55, %vreg3:51, %vreg5:53, %vreg9:57, %xmm0:32, %edi:7, %vreg1:49, %vreg8:56, %vreg10:58}, live_in: {}, live_out: {} } }, pred: [], succ: [], iseq: RefCell { value: [Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 0 }, Id { idx: 1 }, Id { idx: 2 }, Id { idx: 4 }, Id { idx: 6 }, Id { idx: 7 }, Id { idx: 9 }, Id { idx: 11 }, Id { idx: 13 }, Id { idx: 15 }, Id { idx: 16 }, Id { idx: 49 }, Id { idx: 17 }, Id { idx: 18 }, Id { idx: 20 }, Id { idx: 22 }, Id { idx: 23 }, Id { idx: 25 }, Id { idx: 27 }, Id { idx: 29 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 50 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 36 }, Id { idx: 38 }, Id { idx: 39 }, Id { idx: 41 }, Id { idx: 43 }, Id { idx: 45 }, Id { idx: 47 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 48 }] } })
 0  ( 51 ): PUSH64 %rbp:21
 1  ( 52 ): %rbp:21 = MOVrr64 %rsp:20
 2  ( 53 ): %rsp:20 = SUBr64i32 %rsp:20, i32 16
 3  ( 54 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 0  ): %rax:48 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 5  ( 1  ): %xmm0:49 = MOVSDrm Base(%rax:48)
 6  ( 2  ): %xmm0:32 = MOVSDrr %xmm0:49
 7  ( 4  ): %eax:0 = CALL Address(addr<fn:color_of>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 8  ( 6  ): %edi:50 = MOVrr32 %eax:0
 9  ( 7  ): %edi:7 = MOVrr32 %edi:50
 10 ( 9  ): CALL Address(addr<fn:cilk.print.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 11 ( 11 ): %edi:7 = MOVri32 i32 32
 12 ( 13 ): CALL Address(addr<fn:cilk.printch.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 13 ( 15 ): %rax:51 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 14 ( 16 ): %rax:52 = MOVrr64 %rax:51
 15 ( 49 ): %rax:52 = ADDr64i32 %rax:52, i32 8
 16 ( 17 ): %xmm0:53 = MOVSDrm Base(%rax:52)
 17 ( 18 ): %xmm0:32 = MOVSDrr %xmm0:53
 18 ( 20 ): %eax:0 = CALL Address(addr<fn:color_of>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 19 ( 22 ): %edi:54 = MOVrr32 %eax:0
 20 ( 23 ): %edi:7 = MOVrr32 %edi:54
 21 ( 25 ): CALL Address(addr<fn:cilk.print.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 22 ( 27 ): %edi:7 = MOVri32 i32 32
 23 ( 29 ): CALL Address(addr<fn:cilk.printch.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 24 ( 31 ): %rax:55 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
 25 ( 32 ): %rax:56 = MOVrr64 %rax:55
 26 ( 50 ): %rax:56 = ADDr64i32 %rax:56, i32 16
 27 ( 33 ): %xmm0:57 = MOVSDrm Base(%rax:56)
 28 ( 34 ): %xmm0:32 = MOVSDrr %xmm0:57
 29 ( 36 ): %eax:0 = CALL Address(addr<fn:color_of>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,)
 30 ( 38 ): %edi:58 = MOVrr32 %eax:0
 31 ( 39 ): %edi:7 = MOVrr32 %edi:58
 32 ( 41 ): CALL Address(addr<fn:cilk.print.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 33 ( 43 ): %edi:7 = MOVri32 i32 10
 34 ( 45 ): CALL Address(addr<fn:cilk.printch.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 35 ( 47 ): %eax:0 = MOVri32 i32 0
 36 ( 55 ): %rsp:20 = MOVrr64 %rbp:21
 37 ( 56 ): POP64 %rbp:21
 38 ( 48 ): RET 
MachineFunction(name: main, ty: i32 ()):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([3211313]), def: {%vreg6:54, %rax:16, %vreg7:55}, live_in: {}, live_out: {%vreg7:55} } }, pred: [], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 444 }, Id { idx: 445 }, Id { idx: 446 }, Id { idx: 1 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 272 }, Id { idx: 5 }] } })
 0  (444 ): PUSH64 %rbp:21
 1  (445 ): %rbp:21 = MOVrr64 %rsp:20
 2  (446 ): %rsp:20 = SUBr64i32 %rsp:20, i32 112
 3  ( 1  ): %rax:16 = CALL Address(addr<fn:Env_new>) (imp-def:%rsp:20,imp-use:%rsp:20,)
 4  ( 3  ): %rax:54 = MOVrr64 %rax:16
 5  ( 4  ): MOVmr64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>), %rax:54
 6  (272 ): %eax:55 = MOVri32 i32 0
 7  ( 5  ): JMP BB#1
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([16843009]), def: {%vreg0:48}, live_in: {%vreg7:55}, live_out: {%vreg0:48} } }, pred: [Id { idx: 0 }, Id { idx: 13 }], succ: [Id { idx: 2 }, Id { idx: 14 }], iseq: RefCell { value: [Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 10 }] } })
 8  ( 7  ): %r8d:48 = MOVrr32 %eax:55
 9  ( 8  ): CMPri %r8d:48, i32 300
 10 ( 9  ): JL BB#2
 11 ( 10 ): JMP BB#14
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%vreg8:56}, live_in: {%vreg0:48}, live_out: {%vreg0:48, %vreg8:56} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 274 }, Id { idx: 11 }] } })
 12 (274 ): %eax:56 = MOVri32 i32 0
 13 ( 11 ): JMP BB#3
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([67175425]), def: {%vreg1:49}, live_in: {%vreg0:48, %vreg8:56}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 2 }, Id { idx: 12 }], succ: [Id { idx: 4 }, Id { idx: 13 }], iseq: RefCell { value: [Id { idx: 13 }, Id { idx: 14 }, Id { idx: 15 }, Id { idx: 16 }] } })
 14 ( 13 ): %r10d:49 = MOVrr32 %eax:56
 15 ( 14 ): CMPri %r10d:49, i32 300
 16 ( 15 ): JL BB#4
 17 ( 16 ): JMP BB#13
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([133277616119]), def: {%vreg21:69, %vreg18:66, %vreg17:65, %vreg24:72, %xmm0:32, %vreg35:83, %vreg33:81, %vreg26:74, %vreg12:60, %rdx:18, %xmm4:36, %vreg29:77, %vreg14:62, %vreg19:67, %vreg25:73, %r9:25, %edi:7, %vreg30:78, %xmm1:33, %xmm2:34, %rcx:17, %rax:16, %rsi:22, %vreg15:63, %vreg9:57, %vreg27:75, %vreg22:70, %vreg16:64, %vreg34:82, %eax:0, %vreg13:61, %vreg31:79, %vreg28:76, %vreg32:80, %rdi:23, %vreg10:58, %vreg11:59, %vreg23:71, %vreg20:68}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 3 }], succ: [Id { idx: 5 }, Id { idx: 11 }], iseq: RefCell { value: [Id { idx: 17 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 300 }, Id { idx: 302 }, Id { idx: 21 }, Id { idx: 303 }, Id { idx: 301 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 304 }, Id { idx: 306 }, Id { idx: 308 }, Id { idx: 26 }, Id { idx: 309 }, Id { idx: 307 }, Id { idx: 305 }, Id { idx: 28 }, Id { idx: 29 }, Id { idx: 30 }, Id { idx: 278 }, Id { idx: 31 }, Id { idx: 32 }, Id { idx: 279 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 280 }, Id { idx: 35 }, Id { idx: 310 }, Id { idx: 312 }, Id { idx: 314 }, Id { idx: 316 }, Id { idx: 37 }, Id { idx: 317 }, Id { idx: 315 }, Id { idx: 313 }, Id { idx: 311 }, Id { idx: 39 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 281 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 282 }, Id { idx: 44 }, Id { idx: 45 }, Id { idx: 46 }, Id { idx: 318 }, Id { idx: 320 }, Id { idx: 322 }, Id { idx: 48 }, Id { idx: 323 }, Id { idx: 321 }, Id { idx: 319 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 324 }, Id { idx: 326 }, Id { idx: 328 }, Id { idx: 53 }, Id { idx: 329 }, Id { idx: 327 }, Id { idx: 325 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 330 }, Id { idx: 332 }, Id { idx: 59 }, Id { idx: 333 }, Id { idx: 331 }, Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 334 }, Id { idx: 336 }, Id { idx: 67 }, Id { idx: 337 }, Id { idx: 335 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 338 }, Id { idx: 340 }, Id { idx: 342 }, Id { idx: 74 }, Id { idx: 343 }, Id { idx: 341 }, Id { idx: 339 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 344 }, Id { idx: 346 }, Id { idx: 348 }, Id { idx: 350 }, Id { idx: 81 }, Id { idx: 351 }, Id { idx: 349 }, Id { idx: 347 }, Id { idx: 345 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 352 }, Id { idx: 354 }, Id { idx: 356 }, Id { idx: 358 }, Id { idx: 360 }, Id { idx: 88 }, Id { idx: 361 }, Id { idx: 359 }, Id { idx: 357 }, Id { idx: 355 }, Id { idx: 353 }, Id { idx: 90 }, Id { idx: 91 }, Id { idx: 92 }, Id { idx: 93 }, Id { idx: 94 }, Id { idx: 95 }, Id { idx: 96 }, Id { idx: 362 }, Id { idx: 364 }, Id { idx: 98 }, Id { idx: 365 }, Id { idx: 363 }, Id { idx: 100 }, Id { idx: 101 }, Id { idx: 102 }, Id { idx: 103 }, Id { idx: 104 }, Id { idx: 105 }, Id { idx: 106 }, Id { idx: 107 }, Id { idx: 366 }, Id { idx: 368 }, Id { idx: 109 }, Id { idx: 369 }, Id { idx: 367 }, Id { idx: 111 }, Id { idx: 112 }, Id { idx: 113 }, Id { idx: 114 }, Id { idx: 115 }, Id { idx: 116 }] } })
 18 ( 17 ): %xmm0:32 = MOVSDrm64 Address(label<data:62>)
 19 ( 18 ): %xmm1:33 = MOVSDrm64 Address(label<data:63>)
 20 ( 19 ): %xmm2:34 = MOVSDrm64 Address(label<data:64>)
 21 (300 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 22 (302 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 23 ( 21 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 24 (303 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 25 (301 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 26 ( 23 ): %rcx:57 = MOVrr64 %rax:16
 27 ( 24 ): %edi:7 = MOVrr32 %r10d:49
 28 (304 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 29 (306 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 30 (308 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rcx:57
 31 ( 26 ): %xmm0:32 = CALL Address(addr<fn:cilk.i32_to_f64.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 32 (309 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
 33 (307 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 34 (305 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 35 ( 28 ): %xmm0:58 = MOVSDrr %xmm0:32
 36 ( 29 ): %xmm1:59 = MOVSDrm64 Address(label<data:65>)
 37 ( 30 ): %xmm2:60 = MOVSDrr %xmm0:58
 38 (278 ): %xmm2:60 = DIVSDrr %xmm2:60, %xmm1:59
 39 ( 31 ): %xmm0:61 = MOVSDrm64 Address(label<data:66>)
 40 ( 32 ): %xmm2:62 = MOVSDrr %xmm2:60
 41 (279 ): %xmm2:62 = SUBSDrr %xmm2:62, %xmm0:61
 42 ( 33 ): %eax:63 = MOVri32 i32 300
 43 ( 34 ): %edi:64 = MOVrr32 %eax:63
 44 (280 ): %edi:64 = SUBrr32 %edi:64, %r8d:48
 45 ( 35 ): %edi:7 = MOVrr32 %edi:64
 46 (310 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 47 (312 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 48 (314 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rcx:57
 49 (316 ): MOVSDmr BaseFi(%rbp:21, FI<f64, Local(11)>), %xmm2:62
 50 ( 37 ): %xmm0:32 = CALL Address(addr<fn:cilk.i32_to_f64.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 51 (317 ): %xmm2:62 = MOVSDrm BaseFi(%rbp:21, FI<f64, Local(11)>)
 52 (315 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
 53 (313 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 54 (311 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 55 ( 39 ): %xmm0:65 = MOVSDrr %xmm0:32
 56 ( 40 ): %xmm1:66 = MOVSDrm64 Address(label<data:67>)
 57 ( 41 ): %xmm0:67 = MOVSDrr %xmm0:65
 58 (281 ): %xmm0:67 = DIVSDrr %xmm0:67, %xmm1:66
 59 ( 42 ): %xmm1:68 = MOVSDrm64 Address(label<data:68>)
 60 ( 43 ): %xmm3:69 = MOVSDrr %xmm0:67
 61 (282 ): %xmm3:69 = SUBSDrr %xmm3:69, %xmm1:68
 62 ( 44 ): %xmm0:32 = MOVSDrr %xmm2:62
 63 ( 45 ): %xmm1:33 = MOVSDrr %xmm3:69
 64 ( 46 ): %xmm2:34 = MOVSDrm64 Address(label<data:69>)
 65 (318 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 66 (320 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 67 (322 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rcx:57
 68 ( 48 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 69 (323 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
 70 (321 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 71 (319 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 72 ( 50 ): %rdi:70 = MOVrr64 %rax:16
 73 ( 51 ): %rdi:23 = MOVrr64 %rdi:70
 74 (324 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 75 (326 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 76 (328 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rcx:57
 77 ( 53 ): %rax:16 = CALL Address(addr<fn:Vec_normalize>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
 78 (329 ): %rcx:57 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
 79 (327 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 80 (325 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 81 ( 55 ): %rsi:71 = MOVrr64 %rax:16
 82 ( 56 ): %rdi:23 = MOVrr64 %rcx:57
 83 ( 57 ): %rsi:22 = MOVrr64 %rsi:71
 84 (330 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 85 (332 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 86 ( 59 ): %rax:16 = CALL Address(addr<fn:Ray_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
 87 (333 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 88 (331 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 89 ( 61 ): %rax:72 = MOVrr64 %rax:16
 90 ( 62 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>), %rax:72
 91 ( 63 ): %xmm0:32 = MOVSDrm64 Address(label<data:70>)
 92 ( 64 ): %xmm1:33 = MOVSDrm64 Address(label<data:71>)
 93 ( 65 ): %xmm2:34 = MOVSDrm64 Address(label<data:72>)
 94 (334 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
 95 (336 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
 96 ( 67 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
 97 (337 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 98 (335 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 99 ( 69 ): %rsi:73 = MOVrr64 %rax:16
100 ( 70 ): %xmm0:32 = MOVSDrm64 Address(label<data:73>)
101 ( 71 ): %xmm1:33 = MOVSDrm64 Address(label<data:74>)
102 ( 72 ): %xmm2:34 = MOVSDrm64 Address(label<data:75>)
103 (338 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
104 (340 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
105 (342 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rsi:73
106 ( 74 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
107 (343 ): %rsi:73 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
108 (341 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
109 (339 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
110 ( 76 ): %rdx:74 = MOVrr64 %rax:16
111 ( 77 ): %xmm0:32 = MOVSDrm64 Address(label<data:76>)
112 ( 78 ): %xmm1:33 = MOVSDrm64 Address(label<data:77>)
113 ( 79 ): %xmm2:34 = MOVSDrm64 Address(label<data:78>)
114 (344 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
115 (346 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
116 (348 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rdx:74
117 (350 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(12)>), %rsi:73
118 ( 81 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
119 (351 ): %rsi:73 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(12)>)
120 (349 ): %rdx:74 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
121 (347 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
122 (345 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
123 ( 83 ): %rcx:75 = MOVrr64 %rax:16
124 ( 84 ): %xmm0:32 = MOVSDrm64 Address(label<data:79>)
125 ( 85 ): %xmm1:33 = MOVSDrm64 Address(label<data:80>)
126 ( 86 ): %xmm2:34 = MOVSDrm64 Address(label<data:81>)
127 (352 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
128 (354 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
129 (356 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rdx:74
130 (358 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(12)>), %rsi:73
131 (360 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(13)>), %rcx:75
132 ( 88 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
133 (361 ): %rcx:75 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(13)>)
134 (359 ): %rsi:73 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(12)>)
135 (357 ): %rdx:74 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
136 (355 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
137 (353 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
138 ( 90 ): %r9:76 = MOVrr64 %rax:16
139 ( 91 ): %edi:7 = MOVri32 i32 0
140 ( 92 ): %rsi:22 = MOVrr64 %rsi:73
141 ( 93 ): %rdx:18 = MOVrr64 %rdx:74
142 ( 94 ): %rcx:17 = MOVrr64 %rcx:75
143 ( 95 ): %xmm4:36 = MOVSDrm64 Address(label<data:82>)
144 ( 96 ): %r9:25 = MOVrr64 %r9:76
145 (362 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
146 (364 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
147 ( 98 ): %rax:16 = CALL Address(addr<fn:Isect_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,%rsi:22,%rdx:18,%rcx:17,%xmm4:36,%r9:25,)
148 (365 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
149 (363 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
150 (100 ): %rax:77 = MOVrr64 %rax:16
151 (101 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>), %rax:77
152 (102 ): %rdi:78 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
153 (103 ): %rsi:79 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>)
154 (104 ): %rdx:80 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
155 (105 ): %rdi:23 = MOVrr64 %rdi:78
156 (106 ): %rsi:22 = MOVrr64 %rsi:79
157 (107 ): %rdx:18 = MOVrr64 %rdx:80
158 (366 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
159 (368 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
160 (109 ): %eax:0 = CALL Address(addr<fn:Env_intersect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
161 (369 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
162 (367 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
163 (111 ): %eax:81 = MOVrr32 %eax:0
164 (112 ): %rax:82 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
165 (113 ): %eax:83 = MOVrm32 Base(%rax:82)
166 (114 ): CMPri %eax:83, i32 0
167 (115 ): JG BB#5
168 (116 ): JMP BB#11
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([30164452849]), def: {%xmm0:32, %xmm1:33, %rax:16, %vreg39:87, %vreg44:92, %rsi:22, %vreg37:85, %vreg38:86, %vreg36:84, %vreg43:91, %rdi:23, %vreg40:88, %vreg41:89, %vreg42:90, %xmm2:34}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg44:92, %vreg0:48, %vreg1:49} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 117 }, Id { idx: 118 }, Id { idx: 283 }, Id { idx: 119 }, Id { idx: 120 }, Id { idx: 121 }, Id { idx: 122 }, Id { idx: 123 }, Id { idx: 370 }, Id { idx: 372 }, Id { idx: 125 }, Id { idx: 373 }, Id { idx: 371 }, Id { idx: 127 }, Id { idx: 128 }, Id { idx: 129 }, Id { idx: 284 }, Id { idx: 130 }, Id { idx: 131 }, Id { idx: 132 }, Id { idx: 374 }, Id { idx: 376 }, Id { idx: 134 }, Id { idx: 377 }, Id { idx: 375 }, Id { idx: 136 }, Id { idx: 137 }, Id { idx: 276 }, Id { idx: 138 }] } })
169 (117 ): %rax:84 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
170 (118 ): %rax:85 = MOVrr64 %rax:84
171 (283 ): %rax:85 = ADDr64i32 %rax:85, i32 20
172 (119 ): %rax:86 = MOVrm64 Base(%rax:85)
173 (120 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>), %rax:86
174 (121 ): %xmm0:32 = MOVSDrm64 Address(label<data:83>)
175 (122 ): %xmm1:33 = MOVSDrm64 Address(label<data:84>)
176 (123 ): %xmm2:34 = MOVSDrm64 Address(label<data:85>)
177 (370 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
178 (372 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
179 (125 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
180 (373 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
181 (371 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
182 (127 ): %rdi:87 = MOVrr64 %rax:16
183 (128 ): %rax:88 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
184 (129 ): %rax:89 = MOVrr64 %rax:88
185 (284 ): %rax:89 = ADDr64i32 %rax:89, i32 20
186 (130 ): %rsi:90 = MOVrm64 Base(%rax:89)
187 (131 ): %rdi:23 = MOVrr64 %rdi:87
188 (132 ): %rsi:22 = MOVrr64 %rsi:90
189 (374 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
190 (376 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
191 (134 ): %rax:16 = CALL Address(addr<fn:Vec_multi>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
192 (377 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
193 (375 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
194 (136 ): %rax:91 = MOVrr64 %rax:16
195 (137 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>), %rax:91
196 (276 ): %eax:92 = MOVri32 i32 1
197 (138 ): JMP BB#6
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([196611]), def: {%vreg2:50}, live_in: {%vreg44:92, %vreg0:48, %vreg1:49}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 5 }, Id { idx: 9 }], succ: [Id { idx: 7 }, Id { idx: 10 }], iseq: RefCell { value: [Id { idx: 140 }, Id { idx: 141 }, Id { idx: 142 }, Id { idx: 143 }] } })
198 (140 ): %ecx:50 = MOVrr32 %eax:92
199 (141 ): CMPri %ecx:50, i32 4
200 (142 ): JL BB#7
201 (143 ): JMP BB#10
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([8690009591]), def: {%vreg60:108, %vreg45:93, %rax:16, %vreg62:110, %rsi:22, %vreg49:97, %vreg61:109, %vreg64:112, %rdx:18, %vreg66:114, %vreg59:107, %vreg56:104, %vreg48:96, %vreg57:105, %vreg46:94, %vreg50:98, %vreg51:99, %vreg53:101, %eax:0, %vreg65:113, %vreg63:111, %vreg52:100, %rdi:23, %vreg54:102, %vreg47:95, %vreg55:103, %vreg58:106, %xmm1:33}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 8 }, Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 144 }, Id { idx: 145 }, Id { idx: 285 }, Id { idx: 146 }, Id { idx: 147 }, Id { idx: 148 }, Id { idx: 286 }, Id { idx: 149 }, Id { idx: 150 }, Id { idx: 151 }, Id { idx: 378 }, Id { idx: 380 }, Id { idx: 382 }, Id { idx: 384 }, Id { idx: 153 }, Id { idx: 385 }, Id { idx: 383 }, Id { idx: 381 }, Id { idx: 379 }, Id { idx: 155 }, Id { idx: 156 }, Id { idx: 157 }, Id { idx: 386 }, Id { idx: 388 }, Id { idx: 390 }, Id { idx: 159 }, Id { idx: 391 }, Id { idx: 389 }, Id { idx: 387 }, Id { idx: 161 }, Id { idx: 162 }, Id { idx: 163 }, Id { idx: 287 }, Id { idx: 164 }, Id { idx: 165 }, Id { idx: 166 }, Id { idx: 288 }, Id { idx: 167 }, Id { idx: 168 }, Id { idx: 169 }, Id { idx: 392 }, Id { idx: 394 }, Id { idx: 396 }, Id { idx: 398 }, Id { idx: 171 }, Id { idx: 399 }, Id { idx: 397 }, Id { idx: 395 }, Id { idx: 393 }, Id { idx: 173 }, Id { idx: 174 }, Id { idx: 175 }, Id { idx: 400 }, Id { idx: 402 }, Id { idx: 404 }, Id { idx: 177 }, Id { idx: 405 }, Id { idx: 403 }, Id { idx: 401 }, Id { idx: 179 }, Id { idx: 180 }, Id { idx: 181 }, Id { idx: 182 }, Id { idx: 183 }, Id { idx: 184 }, Id { idx: 185 }, Id { idx: 186 }, Id { idx: 406 }, Id { idx: 408 }, Id { idx: 410 }, Id { idx: 188 }, Id { idx: 411 }, Id { idx: 409 }, Id { idx: 407 }, Id { idx: 190 }, Id { idx: 191 }, Id { idx: 192 }, Id { idx: 193 }, Id { idx: 194 }, Id { idx: 195 }] } })
202 (144 ): %rax:93 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
203 (145 ): %rax:94 = MOVrr64 %rax:93
204 (285 ): %rax:94 = ADDr64i32 %rax:94, i32 4
205 (146 ): %rdx:95 = MOVrm64 Base(%rax:94)
206 (147 ): %rax:96 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
207 (148 ): %rax:97 = MOVrr64 %rax:96
208 (286 ): %rax:97 = ADDr64i32 %rax:97, i32 12
209 (149 ): %rdi:98 = MOVrm64 Base(%rax:97)
210 (150 ): %rdi:23 = MOVrr64 %rdi:98
211 (151 ): %xmm1:33 = MOVSDrm64 Address(label<data:86>)
212 (378 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
213 (380 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
214 (382 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
215 (384 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rdx:95
216 (153 ): %rax:16 = CALL Address(addr<fn:Vec_mul>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%xmm1:33,)
217 (385 ): %rdx:95 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
218 (383 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
219 (381 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
220 (379 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
221 (155 ): %rsi:99 = MOVrr64 %rax:16
222 (156 ): %rdi:23 = MOVrr64 %rdx:95
223 (157 ): %rsi:22 = MOVrr64 %rsi:99
224 (386 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
225 (388 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
226 (390 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
227 (159 ): %rax:16 = CALL Address(addr<fn:Vec_add>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
228 (391 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
229 (389 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
230 (387 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
231 (161 ): %rdx:100 = MOVrr64 %rax:16
232 (162 ): %rax:101 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
233 (163 ): %rax:102 = MOVrr64 %rax:101
234 (287 ): %rax:102 = ADDr64i32 %rax:102, i32 36
235 (164 ): %rdi:103 = MOVrm64 Base(%rax:102)
236 (165 ): %rax:104 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
237 (166 ): %rax:105 = MOVrr64 %rax:104
238 (288 ): %rax:105 = ADDr64i32 %rax:105, i32 12
239 (167 ): %rsi:106 = MOVrm64 Base(%rax:105)
240 (168 ): %rdi:23 = MOVrr64 %rdi:103
241 (169 ): %rsi:22 = MOVrr64 %rsi:106
242 (392 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
243 (394 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
244 (396 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rdx:100
245 (398 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
246 (171 ): %rax:16 = CALL Address(addr<fn:Vec_reflect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
247 (399 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
248 (397 ): %rdx:100 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
249 (395 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
250 (393 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
251 (173 ): %rsi:107 = MOVrr64 %rax:16
252 (174 ): %rdi:23 = MOVrr64 %rdx:100
253 (175 ): %rsi:22 = MOVrr64 %rsi:107
254 (400 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
255 (402 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
256 (404 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
257 (177 ): %rax:16 = CALL Address(addr<fn:Ray_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
258 (405 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
259 (403 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
260 (401 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
261 (179 ): %rax:108 = MOVrr64 %rax:16
262 (180 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:23)*, Local(5)>), %rax:108
263 (181 ): %rdi:109 = MOVrm64 BaseFi(%rbp:21, FI<(ty:31)*, Local(0)>)
264 (182 ): %rsi:110 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(5)>)
265 (183 ): %rdx:111 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
266 (184 ): %rdi:23 = MOVrr64 %rdi:109
267 (185 ): %rsi:22 = MOVrr64 %rsi:110
268 (186 ): %rdx:18 = MOVrr64 %rdx:111
269 (406 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
270 (408 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
271 (410 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
272 (188 ): %eax:0 = CALL Address(addr<fn:Env_intersect>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,%rdx:18,)
273 (411 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
274 (409 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
275 (407 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
276 (190 ): %eax:112 = MOVrr32 %eax:0
277 (191 ): %rax:113 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
278 (192 ): %eax:114 = MOVrm32 Base(%rax:113)
279 (193 ): CMPrr %ecx:50, %eax:114
280 (194 ): JL BB#8
281 (195 ): JMP BB#9
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([100074999]), def: {%rax:16, %vreg76:124, %vreg77:125, %rsi:22, %vreg70:118, %vreg73:121, %vreg74:122, %vreg71:119, %vreg68:116, %vreg69:117, %vreg67:115, %vreg72:120, %rdi:23, %vreg75:123, %vreg78:126}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg1:49, %vreg0:48, %vreg2:50} } }, pred: [Id { idx: 7 }], succ: [Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 196 }, Id { idx: 197 }, Id { idx: 198 }, Id { idx: 199 }, Id { idx: 289 }, Id { idx: 200 }, Id { idx: 201 }, Id { idx: 202 }, Id { idx: 412 }, Id { idx: 414 }, Id { idx: 416 }, Id { idx: 418 }, Id { idx: 204 }, Id { idx: 419 }, Id { idx: 417 }, Id { idx: 415 }, Id { idx: 413 }, Id { idx: 206 }, Id { idx: 207 }, Id { idx: 208 }, Id { idx: 420 }, Id { idx: 422 }, Id { idx: 424 }, Id { idx: 210 }, Id { idx: 425 }, Id { idx: 423 }, Id { idx: 421 }, Id { idx: 212 }, Id { idx: 213 }, Id { idx: 214 }, Id { idx: 215 }, Id { idx: 216 }, Id { idx: 290 }, Id { idx: 217 }, Id { idx: 218 }, Id { idx: 219 }, Id { idx: 426 }, Id { idx: 428 }, Id { idx: 430 }, Id { idx: 221 }, Id { idx: 431 }, Id { idx: 429 }, Id { idx: 427 }, Id { idx: 223 }, Id { idx: 224 }, Id { idx: 225 }] } })
282 (196 ): %rdx:115 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>)
283 (197 ): %rdi:116 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>)
284 (198 ): %rax:117 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
285 (199 ): %rax:118 = MOVrr64 %rax:117
286 (289 ): %rax:118 = ADDr64i32 %rax:118, i32 20
287 (200 ): %rsi:119 = MOVrm64 Base(%rax:118)
288 (201 ): %rdi:23 = MOVrr64 %rdi:116
289 (202 ): %rsi:22 = MOVrr64 %rsi:119
290 (412 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
291 (414 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
292 (416 ): MOVmr64 BaseFi(%rbp:21, FI<i64, Local(10)>), %rdx:115
293 (418 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
294 (204 ): %rax:16 = CALL Address(addr<fn:Vec_multi>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
295 (419 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
296 (417 ): %rdx:115 = MOVrm64 BaseFi(%rbp:21, FI<i64, Local(10)>)
297 (415 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
298 (413 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
299 (206 ): %rsi:120 = MOVrr64 %rax:16
300 (207 ): %rdi:23 = MOVrr64 %rdx:115
301 (208 ): %rsi:22 = MOVrr64 %rsi:120
302 (420 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
303 (422 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
304 (424 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
305 (210 ): %rax:16 = CALL Address(addr<fn:Vec_add>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
306 (425 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
307 (423 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
308 (421 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
309 (212 ): %rax:121 = MOVrr64 %rax:16
310 (213 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>), %rax:121
311 (214 ): %rdi:122 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>)
312 (215 ): %rax:123 = MOVrm64 BaseFi(%rbp:21, FI<(ty:25)*, Local(2)>)
313 (216 ): %rax:124 = MOVrr64 %rax:123
314 (290 ): %rax:124 = ADDr64i32 %rax:124, i32 20
315 (217 ): %rsi:125 = MOVrm64 Base(%rax:124)
316 (218 ): %rdi:23 = MOVrr64 %rdi:122
317 (219 ): %rsi:22 = MOVrr64 %rsi:125
318 (426 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
319 (428 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
320 (430 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(14)>), %ecx:50
321 (221 ): %rax:16 = CALL Address(addr<fn:Vec_multi>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,%rsi:22,)
322 (431 ): %ecx:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(14)>)
323 (429 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
324 (427 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
325 (223 ): %rax:126 = MOVrr64 %rax:16
326 (224 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Local(4)>), %rax:126
327 (225 ): JMP BB#9
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([196611]), def: {%vreg3:51, %vreg44:92, %vreg79:127}, live_in: {%vreg1:49, %vreg0:48, %vreg2:50}, live_out: {%vreg44:92, %vreg0:48, %vreg1:49} } }, pred: [Id { idx: 7 }, Id { idx: 8 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 226 }, Id { idx: 291 }, Id { idx: 227 }, Id { idx: 277 }, Id { idx: 228 }] } })
328 (226 ): %eax:127 = MOVrr32 %ecx:50
329 (291 ): %eax:127 = ADDri32 %eax:127, i32 1
330 (227 ): %eax:51 = MOVrr32 %eax:127
331 (277 ): %eax:92 = MOVrr32 %eax:51
332 (228 ): JMP BB#6
MachineBasicBlock #10 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([95487409]), def: {%rdi:23, %vreg81:129, %vreg80:128, %eax:0}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 229 }, Id { idx: 230 }, Id { idx: 432 }, Id { idx: 434 }, Id { idx: 232 }, Id { idx: 435 }, Id { idx: 433 }, Id { idx: 234 }, Id { idx: 235 }] } })
333 (229 ): %rdi:128 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Local(3)>)
334 (230 ): %rdi:23 = MOVrr64 %rdi:128
335 (432 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
336 (434 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
337 (232 ): %eax:0 = CALL Address(addr<fn:print_col>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
338 (435 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
339 (433 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
340 (234 ): %eax:129 = MOVrr32 %eax:0
341 (235 ): JMP BB#12
MachineBasicBlock #11 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([30160258481]), def: {%xmm0:32, %xmm1:33, %vreg91:139, %xmm2:34, %vreg93:141, %rax:16, %vreg86:134, %vreg84:132, %vreg82:130, %vreg97:145, %vreg92:140, %vreg94:142, %vreg96:144, %eax:0, %vreg98:146, %vreg89:137, %vreg90:138, %vreg87:135, %vreg83:131, %vreg88:136, %rdi:23, %vreg85:133, %vreg95:143}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg1:49, %vreg0:48} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 12 }], iseq: RefCell { value: [Id { idx: 236 }, Id { idx: 237 }, Id { idx: 292 }, Id { idx: 238 }, Id { idx: 239 }, Id { idx: 293 }, Id { idx: 240 }, Id { idx: 241 }, Id { idx: 242 }, Id { idx: 294 }, Id { idx: 243 }, Id { idx: 244 }, Id { idx: 295 }, Id { idx: 245 }, Id { idx: 246 }, Id { idx: 247 }, Id { idx: 296 }, Id { idx: 248 }, Id { idx: 249 }, Id { idx: 297 }, Id { idx: 250 }, Id { idx: 251 }, Id { idx: 252 }, Id { idx: 253 }, Id { idx: 436 }, Id { idx: 438 }, Id { idx: 255 }, Id { idx: 439 }, Id { idx: 437 }, Id { idx: 257 }, Id { idx: 258 }, Id { idx: 440 }, Id { idx: 442 }, Id { idx: 260 }, Id { idx: 443 }, Id { idx: 441 }, Id { idx: 262 }, Id { idx: 263 }] } })
342 (236 ): %rax:130 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>)
343 (237 ): %rax:131 = MOVrr64 %rax:130
344 (292 ): %rax:131 = ADDr64i32 %rax:131, i32 8
345 (238 ): %rax:132 = MOVrm64 Base(%rax:131)
346 (239 ): %rax:133 = MOVrr64 %rax:132
347 (293 ): %rax:133 = ADDr64i32 %rax:133, i32 8
348 (240 ): %xmm0:134 = MOVSDrm Base(%rax:133)
349 (241 ): %rax:135 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>)
350 (242 ): %rax:136 = MOVrr64 %rax:135
351 (294 ): %rax:136 = ADDr64i32 %rax:136, i32 8
352 (243 ): %rax:137 = MOVrm64 Base(%rax:136)
353 (244 ): %rax:138 = MOVrr64 %rax:137
354 (295 ): %rax:138 = ADDr64i32 %rax:138, i32 8
355 (245 ): %xmm1:139 = MOVSDrm Base(%rax:138)
356 (246 ): %rax:140 = MOVrm64 BaseFi(%rbp:21, FI<(ty:23)*, Local(1)>)
357 (247 ): %rax:141 = MOVrr64 %rax:140
358 (296 ): %rax:141 = ADDr64i32 %rax:141, i32 8
359 (248 ): %rax:142 = MOVrm64 Base(%rax:141)
360 (249 ): %rax:143 = MOVrr64 %rax:142
361 (297 ): %rax:143 = ADDr64i32 %rax:143, i32 8
362 (250 ): %xmm2:144 = MOVSDrm Base(%rax:143)
363 (251 ): %xmm0:32 = MOVSDrr %xmm0:134
364 (252 ): %xmm1:33 = MOVSDrr %xmm1:139
365 (253 ): %xmm2:34 = MOVSDrr %xmm2:144
366 (436 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
367 (438 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
368 (255 ): %rax:16 = CALL Address(addr<fn:Vec_new>) (imp-def:%rsp:20,imp-use:%rsp:20,%xmm0:32,%xmm1:33,%xmm2:34,)
369 (439 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
370 (437 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
371 (257 ): %rdi:145 = MOVrr64 %rax:16
372 (258 ): %rdi:23 = MOVrr64 %rdi:145
373 (440 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %r10d:49
374 (442 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r8d:48
375 (260 ): %eax:0 = CALL Address(addr<fn:print_col>) (imp-def:%rsp:20,imp-use:%rsp:20,%rdi:23,)
376 (443 ): %r8d:48 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
377 (441 ): %r10d:49 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
378 (262 ): %eax:146 = MOVrr32 %eax:0
379 (263 ): JMP BB#12
MachineBasicBlock #12 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([67175425]), def: {%vreg4:52, %vreg8:56, %vreg99:147}, live_in: {%vreg1:49, %vreg0:48}, live_out: {%vreg0:48, %vreg8:56} } }, pred: [Id { idx: 10 }, Id { idx: 11 }], succ: [Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 264 }, Id { idx: 298 }, Id { idx: 265 }, Id { idx: 275 }, Id { idx: 266 }] } })
380 (264 ): %eax:147 = MOVrr32 %r10d:49
381 (298 ): %eax:147 = ADDri32 %eax:147, i32 1
382 (265 ): %eax:52 = MOVrr32 %eax:147
383 (275 ): %eax:56 = MOVrr32 %eax:52
384 (266 ): JMP BB#3
MachineBasicBlock #13 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([16843009]), def: {%vreg100:148, %vreg5:53, %vreg7:55}, live_in: {%vreg0:48}, live_out: {%vreg7:55} } }, pred: [Id { idx: 3 }], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 267 }, Id { idx: 299 }, Id { idx: 268 }, Id { idx: 273 }, Id { idx: 269 }] } })
385 (267 ): %eax:148 = MOVrr32 %r8d:48
386 (299 ): %eax:148 = ADDri32 %eax:148, i32 1
387 (268 ): %eax:53 = MOVrr32 %eax:148
388 (273 ): %eax:55 = MOVrr32 %eax:53
389 (269 ): JMP BB#1
MachineBasicBlock #14 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 1 }], succ: [], iseq: RefCell { value: [Id { idx: 270 }, Id { idx: 447 }, Id { idx: 448 }, Id { idx: 271 }] } })
390 (270 ): %eax:0 = MOVri32 i32 0
391 (447 ): %rsp:20 = MOVrr64 %rbp:21
392 (448 ): POP64 %rbp:21
393 (271 ): RET 

147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
181 181 181
181 181 181
181 181 181
181 181 181
181 181 181
181 181 181
181 181 181
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
180 180 180
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
179 179 179
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
178 178 178
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
177 177 177
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
176 176 176
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
175 175 175
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
174 174 174
174 174 174
174 174 174
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
173 173 173
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
172 172 172
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
171 171 171
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
170 170 170
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
169 169 169
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
168 168 168
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
167 167 167
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
166 166 166
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
165 165 165
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
164 164 164
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
163 163 163
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
162 162 162
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
128 128 128
127 127 127
127 127 127
128 128 128
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
161 161 161
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
128 128 128
128 128 128
128 128 128
127 127 127
126 126 126
127 127 127
127 127 127
127 127 127
128 128 128
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
160 160 160
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
128 128 128
128 128 128
128 128 128
127 127 127
127 127 127
127 127 127
126 126 126
126 126 126
126 126 126
127 127 127
127 127 127
127 127 127
127 127 127
128 128 128
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
128 128 128
128 128 128
128 128 128
127 127 127
127 127 127
127 127 127
127 127 127
126 126 126
126 126 126
125 125 125
125 125 125
125 125 125
126 126 126
126 126 126
126 126 126
127 127 127
127 127 127
127 127 127
128 128 128
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
159 159 159
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
128 128 128
128 128 128
128 128 128
127 127 127
127 127 127
127 127 127
126 126 126
126 126 126
126 126 126
125 125 125
125 125 125
124 124 124
124 124 124
125 125 125
125 125 125
125 125 125
126 126 126
126 126 126
126 126 126
126 126 126
127 127 127
127 127 127
127 127 127
128 128 128
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
158 158 158
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
157 157 157
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
156 156 156
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
155 155 155
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
154 154 154
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
152 152 152
152 152 152
152 152 152
152 152 152
152 152 152
151 151 151
151 151 151
151 151 151
151 151 151
150 150 150
150 150 150
150 150 150
150 150 150
150 150 150
149 149 149
149 149 149
149 149 149
149 149 149
148 148 148
148 148 148
148 148 148
148 148 148
147 147 147
147 147 147
147 147 147
147 147 147
146 146 146
146 146 146
146 146 146
145 145 145
145 145 145
145 145 145
145 145 145
144 144 144
144 144 144
144 144 144
144 144 144
143 143 143
143 143 143
143 143 143
142 142 142
142 142 142
142 142 142
141 141 141
141 141 141
141 141 141
141 141 141
140 140 140
140 140 140
140 140 140
139 139 139
139 139 139
139 139 139
138 138 138
138 138 138
138 138 138
138 138 138
137 137 137
137 137 137
137 137 137
136 136 136
136 136 136
136 136 136
135 135 135
135 135 135
135 135 135
134 134 134
134 134 134
134 134 134
133 133 133
133 133 133
133 133 133
133 133 133
132 132 132
132 132 132
132 132 132
131 131 131
131 131 131
131 131 131
130 130 130
130 130 130
130 130 130
129 129 129
129 129 129
129 129 129
128 128 128
128 128 128
128 128 128
127 127 127
127 127 127
127 127 127
126 126 126
126 126 126
126 126 126
126 126 126
125 125 125
125 125 125
125 125 125
124 124 124
123 123 123
123 123 123
124 124 124
124 124 124
124 124 124
125 125 125
125 125 125
125 125 125
126 126 126
126 126 126
126 126 126
127 127 127
127 127 127
127 127 127
128 128 128
128 128 128
128 128 128
129 129 129
129 129 129
129 129 129
129 129 129
130 130 130
130 130 130
130 130 130
131 131 131
131 131 131
131 131 131
132 132 132
132 132 132
132 132 132
133 133 133
133 133 133
133 133 133
134 134 134
134 134 134
134 134 134
135 135 135
135 135 135
135 135 135
135 135 135
136 136 136
136 136 136
136 136 136
137 137 137
137 137 137
137 137 137
138 138 138
138 138 138
138 138 138
139 139 139
139 139 139
139 139 139
139 139 139
140 140 140
140 140 140
140 140 140
141 141 141
141 141 141
141 141 141
142 142 142
142 142 142
142 142 142
142 142 142
143 143 143
143 143 143
143 143 143
144 144 144
144 144 144
144 144 144
144 144 144
145 145 145
145 145 145
145 145 145
145 145 145
146 146 146
146 146 146
146 146 146
146 146 146
147 147 147
147 147 147
147 147 147
148 148 148
148 148 148
148 148 148
148 148 148
148 148 148
149 149 149
149 149 149
149 149 149
149 149 149
150 150 150
150 150 150
150 150 150
150 150 150
151 151 151
151 151 151
151 151 151
151 151 151
151 151 151
152 152 152
152 152 152
152 152 152
152 152 152
152 152 152
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
153 153 153
