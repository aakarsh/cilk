
running 1 test
input:

    function main(output: * [600] i32): i32 {
        var a: i32; a = 10000;
        var c: i32; c = 8400;
        var b: i32;
        var d: i32;
        var e: i32;
        var g: i32;
        var f: [8401] i32;
        var i: i32;

        b = 0;
        while b < c {
            f[b] = a / 5;
            b = b + 1;
        }

        e = 0;
        c = 8400;
        i = 0;
        while 0 < c {
            println_i32(c);
            d = 0;
            b = c - 1;
            while 0 < b {
                g = b * 2- 1;
                d = d * b + f[b] * a;
                f[b] = d % g;
                d = d / g;
                b = b - 1;
            }

            println_i32(e + d / a);
            output[i] = e + d / a;

            e = d % a;
            c = c - 14;
            i = i + 1;
        }

        return 0;
    }
Parsed: Module { functions: [Function { name: "main", params: [("output", Pointer(Array(600, Int32)))], ret_ty: Int32, body: [VarDecl("a", Int32), Assign(Identifier("a"), Number(10000)), VarDecl("c", Int32), Assign(Identifier("c"), Number(8400)), VarDecl("b", Int32), VarDecl("d", Int32), VarDecl("e", Int32), VarDecl("g", Int32), VarDecl("f", Array(8401, Int32)), VarDecl("i", Int32), Assign(Identifier("b"), Number(0)), WhileLoop(Lt(Load(Identifier("b")), Load(Identifier("c"))), [Assign(Index(Identifier("f"), Load(Identifier("b"))), Div(Load(Identifier("a")), Number(5))), Assign(Identifier("b"), Add(Load(Identifier("b")), Number(1)))]), Assign(Identifier("e"), Number(0)), Assign(Identifier("c"), Number(8400)), Assign(Identifier("i"), Number(0)), WhileLoop(Lt(Number(0), Load(Identifier("c"))), [Call("println_i32", [Load(Identifier("c"))]), Assign(Identifier("d"), Number(0)), Assign(Identifier("b"), Sub(Load(Identifier("c")), Number(1))), WhileLoop(Lt(Number(0), Load(Identifier("b"))), [Assign(Identifier("g"), Sub(Mul(Load(Identifier("b")), Number(2)), Number(1))), Assign(Identifier("d"), Add(Mul(Load(Identifier("d")), Load(Identifier("b"))), Mul(Load(Index(Identifier("f"), Load(Identifier("b")))), Load(Identifier("a"))))), Assign(Index(Identifier("f"), Load(Identifier("b"))), Rem(Load(Identifier("d")), Load(Identifier("g")))), Assign(Identifier("d"), Div(Load(Identifier("d")), Load(Identifier("g")))), Assign(Identifier("b"), Sub(Load(Identifier("b")), Number(1)))]), Call("println_i32", [Add(Load(Identifier("e")), Div(Load(Identifier("d")), Load(Identifier("a"))))]), Assign(Index(Identifier("output"), Load(Identifier("i"))), Add(Load(Identifier("e")), Div(Load(Identifier("d")), Load(Identifier("a"))))), Assign(Identifier("e"), Rem(Load(Identifier("d")), Load(Identifier("a")))), Assign(Identifier("c"), Sub(Load(Identifier("c")), Number(14))), Assign(Identifier("i"), Add(Load(Identifier("i")), Number(1)))]), Return(Number(0))] }], structs: [] }
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
promotable? true
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single store? false
Debug at /home/unsigned/work/cilk/src/ir/mem2reg.rs
single block? false
Module (name: minilang)
define void cilk.println.i32(i32) internal;
define void cilk.print.i32(i32) internal;
define void cilk.printch.i32(i32) internal;
define void cilk.println.f64(f64) internal;
define void cilk.print.f64(f64) internal;
define f64 cilk.sin.f64(f64) internal;
define f64 cilk.cos.f64(f64) internal;
define f64 cilk.sqrt.f64(f64) internal;
define f64 cilk.floor.f64(f64) internal;
define f64 cilk.fabs.f64(f64) internal;
define f64 cilk.i32_to_f64.i32(i32) internal;
define i32 cilk.f64_to_i32.f64(f64) internal;
define i64* cilk.malloc.i32(i32) internal;
define i32 main([600 x i32]*) {
label.0:	// pred(), succ(1), def(), in(), out()
    %8 = alloca [8401 x i32] // (self:8, users:[Id { idx: 17 }, Id { idx: 50 }, Id { idx: 57 }])
    br %label.1 // (self:11, users:[])
label.1:	// pred(0,2), succ(2,3), def(), in(), out()
    %96 = phi i32 0, %label.0, i32 %22, %label.2 // (self:96, users:[Id { idx: 14 }, Id { idx: 17 }, Id { idx: 22 }])
    %14 = icmp lt, i32 %96, i32 8400 // (self:14, users:[Id { idx: 15 }])
    br i1 %14, %label.2, %label.3 // (self:15, users:[])
label.2:	// pred(1), succ(1), def(), in(), out()
    %17 = getelementptr [8401 x i32]* %8, i32 0, i32 %96 // (self:17, users:[Id { idx: 20 }])
    store i32 2000, i32* %17 // (self:20, users:[])
    %22 = add i32 %96, i32 1 // (self:22, users:[Id { idx: 96 }])
    br %label.1 // (self:24, users:[])
label.3:	// pred(1), succ(4), def(), in(), out()
    br %label.4 // (self:28, users:[])
label.4:	// pred(3,9), succ(5,6), def(), in(), out()
    %99 = phi i32 0, %label.3, i32 %92, %label.9 // (self:99, users:[Id { idx: 77 }, Id { idx: 92 }])
    %98 = phi i32 0, %label.3, i32 %86, %label.9 // (self:98, users:[Id { idx: 74 }, Id { idx: 82 }])
    %97 = phi i32 8400, %label.3, i32 %89, %label.9 // (self:97, users:[Id { idx: 30 }, Id { idx: 33 }, Id { idx: 36 }, Id { idx: 89 }])
    %30 = icmp lt, i32 0, i32 %97 // (self:30, users:[Id { idx: 31 }])
    br i1 %30, %label.5, %label.6 // (self:31, users:[])
label.5:	// pred(4), succ(7), def(), in(), out()
    call void cilk.println.i32, i32 %97 // (self:33, users:[])
    %36 = sub i32 %97, i32 1 // (self:36, users:[Id { idx: 100 }])
    br %label.7 // (self:38, users:[])
label.6:	// pred(4), succ(), def(), in(), out()
    ret i32 0 // (self:95, users:[])
label.7:	// pred(5,8), succ(8,9), def(), in(), out()
    %101 = phi i32 0, %label.5, i32 %64, %label.8 // (self:101, users:[Id { idx: 48 }, Id { idx: 73 }, Id { idx: 81 }, Id { idx: 86 }])
    %100 = phi i32 %36, %label.5, i32 %67, %label.8 // (self:100, users:[Id { idx: 40 }, Id { idx: 43 }, Id { idx: 48 }, Id { idx: 50 }, Id { idx: 57 }, Id { idx: 67 }])
    %40 = icmp lt, i32 0, i32 %100 // (self:40, users:[Id { idx: 41 }])
    br i1 %40, %label.8, %label.9 // (self:41, users:[])
label.8:	// pred(7), succ(7), def(), in(), out()
    %43 = mul i32 %100, i32 2 // (self:43, users:[Id { idx: 44 }])
    %44 = sub i32 %43, i32 1 // (self:44, users:[Id { idx: 60 }, Id { idx: 64 }])
    %48 = mul i32 %101, i32 %100 // (self:48, users:[Id { idx: 54 }])
    %50 = getelementptr [8401 x i32]* %8, i32 0, i32 %100 // (self:50, users:[Id { idx: 51 }])
    %51 = load i32* %50 // (self:51, users:[Id { idx: 53 }])
    %53 = mul i32 %51, i32 10000 // (self:53, users:[Id { idx: 54 }])
    %54 = add i32 %48, i32 %53 // (self:54, users:[Id { idx: 60 }, Id { idx: 64 }])
    %57 = getelementptr [8401 x i32]* %8, i32 0, i32 %100 // (self:57, users:[Id { idx: 61 }])
    %60 = rem i32 %54, i32 %44 // (self:60, users:[Id { idx: 61 }])
    store i32 %60, i32* %57 // (self:61, users:[])
    %64 = div i32 %54, i32 %44 // (self:64, users:[Id { idx: 101 }])
    %67 = sub i32 %100, i32 1 // (self:67, users:[Id { idx: 100 }])
    br %label.7 // (self:69, users:[])
label.9:	// pred(7), succ(4), def(), in(), out()
    %73 = div i32 %101, i32 10000 // (self:73, users:[Id { idx: 74 }])
    %74 = add i32 %98, i32 %73 // (self:74, users:[Id { idx: 75 }])
    call void cilk.println.i32, i32 %74 // (self:75, users:[])
    %77 = getelementptr (ty:8)* %arg.0, i32 0, i32 %99 // (self:77, users:[Id { idx: 83 }])
    %81 = div i32 %101, i32 10000 // (self:81, users:[Id { idx: 82 }])
    %82 = add i32 %98, i32 %81 // (self:82, users:[Id { idx: 83 }])
    store i32 %82, i32* %77 // (self:83, users:[])
    %86 = rem i32 %101, i32 10000 // (self:86, users:[Id { idx: 98 }])
    %89 = sub i32 %97, i32 14 // (self:89, users:[Id { idx: 97 }])
    %92 = add i32 %99, i32 1 // (self:92, users:[Id { idx: 99 }])
    br %label.4 // (self:94, users:[])
}

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
before coalesing MachineFunction(name: main, ty: functy:9):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg13:61}, live_in: {%edx:2}, live_out: {%vreg13:61, %edx:2} } }, pred: [], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 94 }, Id { idx: 0 }] } })
 0  ( 94 ): %vreg13:61 = Copy Constant(i32 0)
 1  ( 0  ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg0:48}, live_in: {%vreg13:61, %edx:2}, live_out: {%vreg0:48, %edx:2} } }, pred: [Id { idx: 0 }, Id { idx: 2 }], succ: [Id { idx: 2 }, Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }] } })
 2  ( 2  ): %vreg0:48 = Copy Register(%vreg13:61)
 3  ( 3  ): CMPri Register(%vreg0:48), Constant(i32 8400)
 4  ( 4  ): JL Branch(Id { idx: 2 })
 5  ( 5  ): JMP Branch(Id { idx: 3 })
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg15:63, %vreg16:64, %vreg1:49, %vreg13:61, %vreg14:62}, live_in: {%vreg0:48, %edx:2}, live_out: {%vreg13:61, %edx:2} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 6 }, Id { idx: 106 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 107 }, Id { idx: 10 }, Id { idx: 95 }, Id { idx: 11 }] } })
 6  ( 6  ): %vreg14:62 = Copy Register(%vreg0:48)
 7  (106 ): %vreg14:62 = SHLr32i8 Register(%vreg14:62), Constant(i8 2)
 8  ( 7  ): %vreg15:63 = LEAr64m Mem(BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %vreg14:62))
 9  ( 8  ): MOVmi32 Mem(Base(%vreg15:63)), Constant(i32 2000)
 10 ( 9  ): %vreg16:64 = Copy Register(%vreg0:48)
 11 (107 ): %vreg16:64 = ADDri32 Register(%vreg16:64), Constant(i32 1)
 12 ( 10 ): %vreg1:49 = Copy Register(%vreg16:64)
 13 ( 95 ): %vreg13:61 = Copy Register(%vreg1:49)
 14 ( 11 ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg19:67, %vreg18:66, %vreg17:65}, live_in: {%edx:2}, live_out: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 96 }, Id { idx: 98 }, Id { idx: 100 }, Id { idx: 12 }] } })
 15 ( 96 ): %vreg17:65 = Copy Constant(i32 0)
 16 ( 98 ): %vreg18:66 = Copy Constant(i32 0)
 17 (100 ): %vreg19:67 = Copy Constant(i32 8400)
 18 ( 12 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50, %vreg4:52, %vreg3:51}, live_in: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65}, live_out: {%vreg3:51, %vreg2:50, %vreg4:52, %edx:2} } }, pred: [Id { idx: 3 }, Id { idx: 8 }], succ: [Id { idx: 5 }, Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 14 }, Id { idx: 16 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }] } })
 19 ( 14 ): %vreg2:50 = Copy Register(%vreg17:65)
 20 ( 16 ): %vreg3:51 = Copy Register(%vreg18:66)
 21 ( 18 ): %vreg4:52 = Copy Register(%vreg19:67)
 22 ( 19 ): CMPri Register(%vreg4:52), Constant(i32 0)
 23 ( 20 ): JG Branch(Id { idx: 5 })
 24 ( 21 ): JMP Branch(Id { idx: 9 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%edi:7, %vreg20:68, %vreg21:69, %vreg5:53, %vreg22:70}, live_in: {%vreg3:51, %vreg2:50, %vreg4:52, %edx:2}, live_out: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 108 }, Id { idx: 27 }, Id { idx: 102 }, Id { idx: 104 }, Id { idx: 28 }] } })
 25 ( 22 ): %edi:7 = MOVrr32 Register(%vreg4:52)
 26 ( 23 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 27 ( 24 ): CALL Mem(Address(addr<fn:cilk.println.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 28 ( 25 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 29 ( 26 ): %vreg20:68 = Copy Register(%vreg4:52)
 30 (108 ): %vreg20:68 = SUBri32 Register(%vreg20:68), Constant(i32 1)
 31 ( 27 ): %vreg5:53 = Copy Register(%vreg20:68)
 32 (102 ): %vreg21:69 = Copy Constant(i32 0)
 33 (104 ): %vreg22:70 = Copy Register(%vreg5:53)
 34 ( 28 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg7:55}, live_in: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70}, live_out: {%vreg7:55, %vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54} } }, pred: [Id { idx: 5 }, Id { idx: 7 }], succ: [Id { idx: 7 }, Id { idx: 8 }], iseq: RefCell { value: [Id { idx: 30 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }] } })
 35 ( 30 ): %vreg6:54 = Copy Register(%vreg21:69)
 36 ( 32 ): %vreg7:55 = Copy Register(%vreg22:70)
 37 ( 33 ): CMPri Register(%vreg7:55), Constant(i32 0)
 38 ( 34 ): JG Branch(Id { idx: 7 })
 39 ( 35 ): JMP Branch(Id { idx: 8 })
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg28:76, %vreg34:82, %vreg37:85, %vreg24:72, %vreg27:75, %eax:0, %vreg8:56, %vreg22:70, %vreg21:69, %vreg33:81, %vreg35:83, %vreg30:78, %vreg23:71, %vreg29:77, %vreg25:73, %vreg32:80, %vreg31:79, %vreg36:84, %vreg26:74, %vreg9:57}, live_in: {%vreg7:55, %vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54}, live_out: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 36 }, Id { idx: 109 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 110 }, Id { idx: 39 }, Id { idx: 111 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 112 }, Id { idx: 44 }, Id { idx: 113 }, Id { idx: 45 }, Id { idx: 114 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 115 }, Id { idx: 59 }, Id { idx: 103 }, Id { idx: 105 }, Id { idx: 60 }] } })
 40 ( 36 ): %vreg23:71 = Copy Register(%vreg7:55)
 41 (109 ): %vreg23:71 = SHLr32i8 Register(%vreg23:71), Constant(i8 2)
 42 ( 37 ): %vreg24:72 = LEAr64m Mem(BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %vreg23:71))
 43 ( 38 ): %vreg25:73 = Copy Register(%vreg6:54)
 44 (110 ): %vreg25:73 = IMULrr32 Register(%vreg25:73), Register(%vreg7:55)
 45 ( 39 ): %vreg26:74 = Copy Register(%vreg7:55)
 46 (111 ): %vreg26:74 = SHLr32i8 Register(%vreg26:74), Constant(i8 2)
 47 ( 40 ): %vreg27:75 = LEAr64m Mem(BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %vreg26:74))
 48 ( 41 ): %vreg28:76 = MOVrm32 Mem(Base(%vreg27:75))
 49 ( 42 ): %vreg29:77 = IMULrri32 Register(%vreg28:76), Constant(i32 10000)
 50 ( 43 ): %vreg30:78 = Copy Register(%vreg25:73)
 51 (112 ): %vreg30:78 = ADDrr32 Register(%vreg30:78), Register(%vreg29:77)
 52 ( 44 ): %vreg31:79 = Copy Register(%vreg7:55)
 53 (113 ): %vreg31:79 = SHLr32i8 Register(%vreg31:79), Constant(i8 1)
 54 ( 45 ): %vreg32:80 = Copy Register(%vreg31:79)
 55 (114 ): %vreg32:80 = SUBri32 Register(%vreg32:80), Constant(i32 1)
 56 ( 46 ): %eax:0 = MOVrr32 Register(%vreg30:78)
 57 ( 47 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 58 ( 48 ): %vreg33:81 = MOVrr32 Register(%vreg32:80)
 59 ( 49 ): IDIV Register(%vreg33:81) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 60 ( 50 ): %vreg34:82 = Copy Register(%edx:2)
 61 ( 51 ): MOVmr32 Mem(Base(%vreg24:72)), Register(%vreg34:82)
 62 ( 52 ): %eax:0 = MOVrr32 Register(%vreg30:78)
 63 ( 53 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 64 ( 54 ): %vreg35:83 = MOVrr32 Register(%vreg32:80)
 65 ( 55 ): IDIV Register(%vreg35:83) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 66 ( 56 ): %vreg36:84 = Copy Register(%eax:0)
 67 ( 57 ): %vreg8:56 = Copy Register(%vreg36:84)
 68 ( 58 ): %vreg37:85 = Copy Register(%vreg7:55)
 69 (115 ): %vreg37:85 = SUBri32 Register(%vreg37:85), Constant(i32 1)
 70 ( 59 ): %vreg9:57 = Copy Register(%vreg37:85)
 71 (103 ): %vreg21:69 = Copy Register(%vreg8:56)
 72 (105 ): %vreg22:70 = Copy Register(%vreg9:57)
 73 ( 60 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg10:58, %vreg49:97, %vreg18:66, %eax:0, %vreg42:90, %vreg45:93, %vreg48:96, %vreg50:98, %vreg17:65, %vreg44:92, %edi:7, %vreg39:87, %vreg41:89, %vreg46:94, %vreg47:95, %vreg43:91, %vreg11:59, %vreg12:60, %vreg38:86, %vreg40:88, %vreg19:67}, live_in: {%vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54}, live_out: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 116 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 117 }, Id { idx: 73 }, Id { idx: 118 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 119 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 120 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 121 }, Id { idx: 90 }, Id { idx: 97 }, Id { idx: 99 }, Id { idx: 101 }, Id { idx: 91 }] } })
 74 ( 61 ): %eax:0 = MOVrr32 Register(%vreg6:54)
 75 ( 62 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 76 ( 63 ): %vreg38:86 = MOVri32 Constant(i32 10000)
 77 ( 64 ): IDIV Register(%vreg38:86) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 78 ( 65 ): %vreg39:87 = Copy Register(%eax:0)
 79 ( 66 ): %vreg40:88 = Copy Register(%vreg3:51)
 80 (116 ): %vreg40:88 = ADDrr32 Register(%vreg40:88), Register(%vreg39:87)
 81 ( 67 ): %edi:7 = MOVrr32 Register(%vreg40:88)
 82 ( 68 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 83 ( 69 ): CALL Mem(Address(addr<fn:cilk.println.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 84 ( 70 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 85 ( 71 ): %vreg41:89 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 86 ( 72 ): %vreg42:90 = Copy Register(%vreg2:50)
 87 (117 ): %vreg42:90 = SHLr32i8 Register(%vreg42:90), Constant(i8 2)
 88 ( 73 ): %vreg43:91 = Copy Register(%vreg41:89)
 89 (118 ): %vreg43:91 = ADDrr64 Register(%vreg43:91), Register(%vreg42:90)
 90 ( 74 ): %eax:0 = MOVrr32 Register(%vreg6:54)
 91 ( 75 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 92 ( 76 ): %vreg44:92 = MOVri32 Constant(i32 10000)
 93 ( 77 ): IDIV Register(%vreg44:92) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 94 ( 78 ): %vreg45:93 = Copy Register(%eax:0)
 95 ( 79 ): %vreg46:94 = Copy Register(%vreg3:51)
 96 (119 ): %vreg46:94 = ADDrr32 Register(%vreg46:94), Register(%vreg45:93)
 97 ( 80 ): MOVmr32 Mem(Base(%vreg43:91)), Register(%vreg46:94)
 98 ( 81 ): %eax:0 = MOVrr32 Register(%vreg6:54)
 99 ( 82 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
100 ( 83 ): %vreg47:95 = MOVri32 Constant(i32 10000)
101 ( 84 ): IDIV Register(%vreg47:95) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
102 ( 85 ): %vreg48:96 = Copy Register(%edx:2)
103 ( 86 ): %vreg10:58 = Copy Register(%vreg48:96)
104 ( 87 ): %vreg49:97 = Copy Register(%vreg4:52)
105 (120 ): %vreg49:97 = SUBri32 Register(%vreg49:97), Constant(i32 14)
106 ( 88 ): %vreg11:59 = Copy Register(%vreg49:97)
107 ( 89 ): %vreg50:98 = Copy Register(%vreg2:50)
108 (121 ): %vreg50:98 = ADDri32 Register(%vreg50:98), Constant(i32 1)
109 ( 90 ): %vreg12:60 = Copy Register(%vreg50:98)
110 ( 97 ): %vreg17:65 = Copy Register(%vreg12:60)
111 ( 99 ): %vreg18:66 = Copy Register(%vreg10:58)
112 (101 ): %vreg19:67 = Copy Register(%vreg11:59)
113 ( 91 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 92 }, Id { idx: 93 }] } })
114 ( 92 ): %eax:0 = MOVri32 Constant(i32 0)
115 ( 93 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
after coalesing MachineFunction(name: main, ty: functy:9):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg13:61}, live_in: {%edx:2}, live_out: {%vreg13:61, %edx:2} } }, pred: [], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 94 }, Id { idx: 0 }] } })
 0  ( 94 ): %vreg13:61 = Copy Constant(i32 0)
 1  ( 0  ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg0:48}, live_in: {%vreg13:61, %edx:2}, live_out: {%vreg0:48, %edx:2} } }, pred: [Id { idx: 0 }, Id { idx: 2 }], succ: [Id { idx: 2 }, Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }] } })
 2  ( 2  ): %vreg0:48 = Copy Register(%vreg13:61)
 3  ( 3  ): CMPri Register(%vreg0:48), Constant(i32 8400)
 4  ( 4  ): JL Branch(Id { idx: 2 })
 5  ( 5  ): JMP Branch(Id { idx: 3 })
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg15:63, %vreg16:64, %vreg1:49, %vreg13:61, %vreg14:62}, live_in: {%vreg0:48, %edx:2}, live_out: {%vreg13:61, %edx:2} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 6 }, Id { idx: 106 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 107 }, Id { idx: 10 }, Id { idx: 95 }, Id { idx: 11 }] } })
 6  ( 6  ): %vreg14:62 = Copy Register(%vreg0:48)
 7  (106 ): %vreg14:62 = SHLr32i8 Register(%vreg14:62), Constant(i8 2)
 8  ( 7  ): %vreg15:63 = LEAr64m Mem(BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %vreg14:62))
 9  ( 8  ): MOVmi32 Mem(Base(%vreg15:63)), Constant(i32 2000)
 10 ( 9  ): %vreg16:64 = Copy Register(%vreg0:48)
 11 (107 ): %vreg16:64 = ADDri32 Register(%vreg16:64), Constant(i32 1)
 12 ( 10 ): %vreg1:49 = Copy Register(%vreg16:64)
 13 ( 95 ): %vreg13:61 = Copy Register(%vreg1:49)
 14 ( 11 ): JMP Branch(Id { idx: 1 })
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg19:67, %vreg18:66, %vreg17:65}, live_in: {%edx:2}, live_out: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 96 }, Id { idx: 98 }, Id { idx: 100 }, Id { idx: 12 }] } })
 15 ( 96 ): %vreg17:65 = Copy Constant(i32 0)
 16 ( 98 ): %vreg18:66 = Copy Constant(i32 0)
 17 (100 ): %vreg19:67 = Copy Constant(i32 8400)
 18 ( 12 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg2:50, %vreg4:52, %vreg3:51}, live_in: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65}, live_out: {%vreg3:51, %vreg2:50, %vreg4:52, %edx:2} } }, pred: [Id { idx: 3 }, Id { idx: 8 }], succ: [Id { idx: 5 }, Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 14 }, Id { idx: 16 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }] } })
 19 ( 14 ): %vreg2:50 = Copy Register(%vreg17:65)
 20 ( 16 ): %vreg3:51 = Copy Register(%vreg18:66)
 21 ( 18 ): %vreg4:52 = Copy Register(%vreg19:67)
 22 ( 19 ): CMPri Register(%vreg4:52), Constant(i32 0)
 23 ( 20 ): JG Branch(Id { idx: 5 })
 24 ( 21 ): JMP Branch(Id { idx: 9 })
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%edi:7, %vreg20:68, %vreg21:69, %vreg5:53, %vreg22:70}, live_in: {%vreg3:51, %vreg2:50, %vreg4:52, %edx:2}, live_out: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 22 }, Id { idx: 23 }, Id { idx: 24 }, Id { idx: 25 }, Id { idx: 26 }, Id { idx: 108 }, Id { idx: 27 }, Id { idx: 102 }, Id { idx: 104 }, Id { idx: 28 }] } })
 25 ( 22 ): %edi:7 = MOVrr32 Register(%vreg4:52)
 26 ( 23 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 27 ( 24 ): CALL Mem(Address(addr<fn:cilk.println.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 28 ( 25 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 29 ( 26 ): %vreg20:68 = Copy Register(%vreg4:52)
 30 (108 ): %vreg20:68 = SUBri32 Register(%vreg20:68), Constant(i32 1)
 31 ( 27 ): %vreg5:53 = Copy Register(%vreg20:68)
 32 (102 ): %vreg21:69 = Copy Constant(i32 0)
 33 (104 ): %vreg22:70 = Copy Register(%vreg5:53)
 34 ( 28 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg6:54, %vreg7:55}, live_in: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70}, live_out: {%vreg7:55, %vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54} } }, pred: [Id { idx: 5 }, Id { idx: 7 }], succ: [Id { idx: 7 }, Id { idx: 8 }], iseq: RefCell { value: [Id { idx: 30 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }] } })
 35 ( 30 ): %vreg6:54 = Copy Register(%vreg21:69)
 36 ( 32 ): %vreg7:55 = Copy Register(%vreg22:70)
 37 ( 33 ): CMPri Register(%vreg7:55), Constant(i32 0)
 38 ( 34 ): JG Branch(Id { idx: 7 })
 39 ( 35 ): JMP Branch(Id { idx: 8 })
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg28:76, %vreg34:82, %vreg37:85, %vreg24:72, %vreg27:75, %eax:0, %vreg8:56, %vreg22:70, %vreg21:69, %vreg33:81, %vreg35:83, %vreg30:78, %vreg23:71, %vreg29:77, %vreg25:73, %vreg32:80, %vreg31:79, %vreg36:84, %vreg26:74, %vreg9:57}, live_in: {%vreg7:55, %vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54}, live_out: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 36 }, Id { idx: 109 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 110 }, Id { idx: 39 }, Id { idx: 111 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 112 }, Id { idx: 44 }, Id { idx: 113 }, Id { idx: 45 }, Id { idx: 114 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 115 }, Id { idx: 59 }, Id { idx: 103 }, Id { idx: 105 }, Id { idx: 60 }] } })
 40 ( 36 ): %vreg23:71 = Copy Register(%vreg7:55)
 41 (109 ): %vreg23:71 = SHLr32i8 Register(%vreg23:71), Constant(i8 2)
 42 ( 37 ): %vreg24:72 = LEAr64m Mem(BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %vreg23:71))
 43 ( 38 ): %vreg25:73 = Copy Register(%vreg6:54)
 44 (110 ): %vreg25:73 = IMULrr32 Register(%vreg25:73), Register(%vreg7:55)
 45 ( 39 ): %vreg26:74 = Copy Register(%vreg7:55)
 46 (111 ): %vreg26:74 = SHLr32i8 Register(%vreg26:74), Constant(i8 2)
 47 ( 40 ): %vreg27:75 = LEAr64m Mem(BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %vreg26:74))
 48 ( 41 ): %vreg28:76 = MOVrm32 Mem(Base(%vreg27:75))
 49 ( 42 ): %vreg29:77 = IMULrri32 Register(%vreg28:76), Constant(i32 10000)
 50 ( 43 ): %vreg30:78 = Copy Register(%vreg25:73)
 51 (112 ): %vreg30:78 = ADDrr32 Register(%vreg30:78), Register(%vreg29:77)
 52 ( 44 ): %vreg31:79 = Copy Register(%vreg7:55)
 53 (113 ): %vreg31:79 = SHLr32i8 Register(%vreg31:79), Constant(i8 1)
 54 ( 45 ): %vreg32:80 = Copy Register(%vreg31:79)
 55 (114 ): %vreg32:80 = SUBri32 Register(%vreg32:80), Constant(i32 1)
 56 ( 46 ): %eax:0 = MOVrr32 Register(%vreg30:78)
 57 ( 47 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 58 ( 48 ): %vreg33:81 = MOVrr32 Register(%vreg32:80)
 59 ( 49 ): IDIV Register(%vreg33:81) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 60 ( 50 ): %vreg34:82 = Copy Register(%edx:2)
 61 ( 51 ): MOVmr32 Mem(Base(%vreg24:72)), Register(%vreg34:82)
 62 ( 52 ): %eax:0 = MOVrr32 Register(%vreg30:78)
 63 ( 53 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 64 ( 54 ): %vreg35:83 = MOVrr32 Register(%vreg32:80)
 65 ( 55 ): IDIV Register(%vreg35:83) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 66 ( 56 ): %vreg36:84 = Copy Register(%eax:0)
 67 ( 57 ): %vreg8:56 = Copy Register(%vreg36:84)
 68 ( 58 ): %vreg37:85 = Copy Register(%vreg7:55)
 69 (115 ): %vreg37:85 = SUBri32 Register(%vreg37:85), Constant(i32 1)
 70 ( 59 ): %vreg9:57 = Copy Register(%vreg37:85)
 71 (103 ): %vreg21:69 = Copy Register(%vreg8:56)
 72 (105 ): %vreg22:70 = Copy Register(%vreg9:57)
 73 ( 60 ): JMP Branch(Id { idx: 6 })
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%vreg10:58, %vreg49:97, %vreg18:66, %eax:0, %vreg42:90, %vreg45:93, %vreg48:96, %vreg50:98, %vreg17:65, %vreg44:92, %edi:7, %vreg39:87, %vreg41:89, %vreg46:94, %vreg47:95, %vreg43:91, %vreg11:59, %vreg12:60, %vreg38:86, %vreg40:88, %vreg19:67}, live_in: {%vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54}, live_out: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 116 }, Id { idx: 67 }, Id { idx: 68 }, Id { idx: 69 }, Id { idx: 70 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 117 }, Id { idx: 73 }, Id { idx: 118 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 119 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 120 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 121 }, Id { idx: 90 }, Id { idx: 97 }, Id { idx: 99 }, Id { idx: 101 }, Id { idx: 91 }] } })
 74 ( 61 ): %eax:0 = MOVrr32 Register(%vreg6:54)
 75 ( 62 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 76 ( 63 ): %vreg38:86 = MOVri32 Constant(i32 10000)
 77 ( 64 ): IDIV Register(%vreg38:86) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 78 ( 65 ): %vreg39:87 = Copy Register(%eax:0)
 79 ( 66 ): %vreg40:88 = Copy Register(%vreg3:51)
 80 (116 ): %vreg40:88 = ADDrr32 Register(%vreg40:88), Register(%vreg39:87)
 81 ( 67 ): %edi:7 = MOVrr32 Register(%vreg40:88)
 82 ( 68 ): AdjStackDown Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 83 ( 69 ): CALL Mem(Address(addr<fn:cilk.println.i32>)) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 84 ( 70 ): AdjStackUp Constant(i32 0) (imp-def:%rsp:20,imp-use:%rsp:20,)
 85 ( 71 ): %vreg41:89 = MOVrm64 Mem(BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>))
 86 ( 72 ): %vreg42:90 = Copy Register(%vreg2:50)
 87 (117 ): %vreg42:90 = SHLr32i8 Register(%vreg42:90), Constant(i8 2)
 88 ( 73 ): %vreg43:91 = Copy Register(%vreg41:89)
 89 (118 ): %vreg43:91 = ADDrr64 Register(%vreg43:91), Register(%vreg42:90)
 90 ( 74 ): %eax:0 = MOVrr32 Register(%vreg6:54)
 91 ( 75 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 92 ( 76 ): %vreg44:92 = MOVri32 Constant(i32 10000)
 93 ( 77 ): IDIV Register(%vreg44:92) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 94 ( 78 ): %vreg45:93 = Copy Register(%eax:0)
 95 ( 79 ): %vreg46:94 = Copy Register(%vreg3:51)
 96 (119 ): %vreg46:94 = ADDrr32 Register(%vreg46:94), Register(%vreg45:93)
 97 ( 80 ): MOVmr32 Mem(Base(%vreg43:91)), Register(%vreg46:94)
 98 ( 81 ): %eax:0 = MOVrr32 Register(%vreg6:54)
 99 ( 82 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
100 ( 83 ): %vreg47:95 = MOVri32 Constant(i32 10000)
101 ( 84 ): IDIV Register(%vreg47:95) (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
102 ( 85 ): %vreg48:96 = Copy Register(%edx:2)
103 ( 86 ): %vreg10:58 = Copy Register(%vreg48:96)
104 ( 87 ): %vreg49:97 = Copy Register(%vreg4:52)
105 (120 ): %vreg49:97 = SUBri32 Register(%vreg49:97), Constant(i32 14)
106 ( 88 ): %vreg11:59 = Copy Register(%vreg49:97)
107 ( 89 ): %vreg50:98 = Copy Register(%vreg2:50)
108 (121 ): %vreg50:98 = ADDri32 Register(%vreg50:98), Constant(i32 1)
109 ( 90 ): %vreg12:60 = Copy Register(%vreg50:98)
110 ( 97 ): %vreg17:65 = Copy Register(%vreg12:60)
111 ( 99 ): %vreg18:66 = Copy Register(%vreg10:58)
112 (101 ): %vreg19:67 = Copy Register(%vreg11:59)
113 ( 91 ): JMP Branch(Id { idx: 4 })
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([0]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 92 }, Id { idx: 93 }] } })
114 ( 92 ): %eax:0 = MOVri32 Constant(i32 0)
115 ( 93 ): RET 

%vreg19[LiveSegment { start: 7:256, end: 7:272 }, LiveSegment { start: 7:272, end: 7:304 }, LiveSegment { start: 7:304, end: 7:304 }, LiveSegment { start: 7:352, end: 7:368 }, LiveSegment { start: 7:368, end: 7:400 }, LiveSegment { start: 7:400, end: 7:416 }, LiveSegment { start: 8:0, end: 8:16 }, LiveSegment { start: 8:16, end: 8:48 }, LiveSegment { start: 8:48, end: 8:64 }, LiveSegment { start: 8:288, end: 8:304 }, LiveSegment { start: 8:304, end: 8:336 }, LiveSegment { start: 8:336, end: 8:352 }, LiveSegment { start: 8:416, end: 8:432 }, LiveSegment { start: 8:432, end: 8:464 }, LiveSegment { start: 8:464, end: 8:464 }, LiveSegment { start: 9:0, end: 9:0 }, LiveSegment { start: 1:0, end: 1:64 }, LiveSegment { start: 2:0, end: 2:64 }, LiveSegment { start: 8:512, end: 8:528 }, LiveSegment { start: 8:528, end: 8:544 }, LiveSegment { start: 8:368, end: 8:384 }, LiveSegment { start: 8:384, end: 8:400 }, LiveSegment { start: 7:448, end: 7:464 }, LiveSegment { start: 7:464, end: 7:480 }, LiveSegment { start: 7:320, end: 7:336 }, LiveSegment { start: 7:192, end: 7:208 }, LiveSegment { start: 7:208, end: 7:224 }, LiveSegment { start: 7:128, end: 7:144 }, LiveSegment { start: 5:160, end: 5:192 }, LiveSegment { start: 6:0, end: 6:16 }, LiveSegment { start: 7:512, end: 7:544 }]
	LiveRange { segments: [LiveSegment { start: 3:32, end: 3:64 }, LiveSegment { start: 4:0, end: 4:32 }, LiveSegment { start: 8:640, end: 8:672 }], remove: [] }
Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
interfering(%vreg30): [%vreg34, %vreg31, %vreg7, %vreg4, %vreg32, %vreg29, %vreg2, %vreg33]
spill target: %vreg34
Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
interfering(%vreg24): [%vreg31, %vreg28, %vreg25, %vreg7, %vreg4, %vreg32, %vreg29, %vreg26, %vreg2, %vreg33, %vreg30, %vreg27]
spill target: %vreg28
%vreg3[LiveSegment { start: 7:256, end: 7:272 }, LiveSegment { start: 7:272, end: 7:304 }, LiveSegment { start: 7:304, end: 7:304 }, LiveSegment { start: 7:352, end: 7:368 }, LiveSegment { start: 7:368, end: 7:400 }, LiveSegment { start: 7:400, end: 7:416 }, LiveSegment { start: 8:0, end: 8:16 }, LiveSegment { start: 8:16, end: 8:48 }, LiveSegment { start: 8:48, end: 8:64 }, LiveSegment { start: 8:288, end: 8:304 }, LiveSegment { start: 8:304, end: 8:336 }, LiveSegment { start: 8:336, end: 8:352 }, LiveSegment { start: 8:416, end: 8:432 }, LiveSegment { start: 8:432, end: 8:464 }, LiveSegment { start: 8:464, end: 8:464 }, LiveSegment { start: 9:0, end: 9:0 }, LiveSegment { start: 1:0, end: 1:64 }, LiveSegment { start: 2:0, end: 2:64 }, LiveSegment { start: 8:512, end: 8:528 }, LiveSegment { start: 8:528, end: 8:544 }, LiveSegment { start: 8:368, end: 8:384 }, LiveSegment { start: 8:384, end: 8:400 }, LiveSegment { start: 7:448, end: 7:464 }, LiveSegment { start: 7:464, end: 7:480 }, LiveSegment { start: 7:192, end: 7:208 }, LiveSegment { start: 7:208, end: 7:224 }, LiveSegment { start: 5:160, end: 5:192 }, LiveSegment { start: 6:0, end: 6:16 }, LiveSegment { start: 7:512, end: 7:544 }, LiveSegment { start: 3:32, end: 3:64 }, LiveSegment { start: 4:0, end: 4:32 }, LiveSegment { start: 8:640, end: 8:672 }, LiveSegment { start: 2:64, end: 2:80 }, LiveSegment { start: 2:80, end: 2:96 }, LiveSegment { start: 2:96, end: 2:112 }, LiveSegment { start: 8:560, end: 8:576 }, LiveSegment { start: 8:576, end: 8:592 }, LiveSegment { start: 8:208, end: 8:256 }, LiveSegment { start: 7:144, end: 7:176 }, LiveSegment { start: 7:80, end: 7:96 }, LiveSegment { start: 7:96, end: 7:112 }, LiveSegment { start: 7:0, end: 7:16 }, LiveSegment { start: 7:16, end: 7:32 }, LiveSegment { start: 5:96, end: 5:112 }, LiveSegment { start: 5:112, end: 5:128 }, LiveSegment { start: 5:128, end: 5:160 }, LiveSegment { start: 8:480, end: 8:496 }, LiveSegment { start: 8:64, end: 8:96 }, LiveSegment { start: 7:416, end: 7:432 }, LiveSegment { start: 7:160, end: 7:176 }, LiveSegment { start: 7:176, end: 7:352 }, LiveSegment { start: 7:112, end: 7:128 }, LiveSegment { start: 7:32, end: 7:336 }, LiveSegment { start: 8:592, end: 8:608 }, LiveSegment { start: 7:480, end: 7:512 }]
	LiveRange { segments: [LiveSegment { start: 4:16, end: 4:96 }, LiveSegment { start: 5:0, end: 5:192 }, LiveSegment { start: 6:0, end: 6:80 }, LiveSegment { start: 7:0, end: 7:544 }, LiveSegment { start: 8:0, end: 8:368 }, LiveSegment { start: 5:68, end: 5:68 }, LiveSegment { start: 8:180, end: 8:180 }], remove: [] }
Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
interfering(%vreg3): [%vreg43, %vreg40, %vreg37, %vreg31, %vreg25, %vreg22, %vreg19, %vreg7, %vreg4, %vreg44, %vreg41, %vreg38, %vreg35, %vreg32, %vreg29, %vreg26, %vreg23, %vreg20, %vreg8, %vreg5, %vreg2, %vreg45, %vreg42, %vreg39, %vreg36, %vreg33, %vreg30, %vreg27, %vreg24, %vreg21, %vreg9, %vreg6]
spill target: %vreg22
Debug at /home/unsigned/work/cilk/src/codegen/x64/machine/regalloc.rs
interfering(%vreg22): [%vreg52, %vreg37, %vreg34, %vreg31, %vreg28, %vreg25, %vreg7, %vreg4, %vreg35, %vreg32, %vreg29, %vreg26, %vreg23, %vreg8, %vreg2, %vreg51, %vreg36, %vreg33, %vreg30, %vreg27, %vreg24, %vreg21, %vreg9, %vreg6, %vreg3]
spill target: %vreg52
OUTPUT: MachineModule (name: minilang)
MachineFunction(name: cilk.println.i32, ty: void (i32, )):
MachineFunction(name: cilk.print.i32, ty: void (i32, )):
MachineFunction(name: cilk.printch.i32, ty: void (i32, )):
MachineFunction(name: cilk.println.f64, ty: void (f64, )):
MachineFunction(name: cilk.print.f64, ty: void (f64, )):
MachineFunction(name: cilk.sin.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.cos.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.sqrt.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.floor.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.fabs.f64, ty: f64 (f64, )):
MachineFunction(name: cilk.i32_to_f64.i32, ty: f64 (i32, )):
MachineFunction(name: cilk.f64_to_i32.f64, ty: i32 (f64, )):
MachineFunction(name: cilk.malloc.i32, ty: i64* (i32, )):
MachineFunction(name: main, ty: i32 ([600 x i32]*, )):
MachineBasicBlock #0 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([131074]), def: {%vreg13:61}, live_in: {%edx:2}, live_out: {%vreg13:61, %edx:2} } }, pred: [], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 150 }, Id { idx: 151 }, Id { idx: 152 }, Id { idx: 153 }, Id { idx: 94 }, Id { idx: 0 }] } })
 0  (150 ): PUSH64 %rbp:21
 1  (151 ): %rbp:21 = MOVrr64 %rsp:20
 2  (152 ): %rsp:20 = SUBr64i32 %rsp:20, i32 33648
 3  (153 ): MOVmr64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>), %rdi:23
 4  ( 94 ): %ecx:61 = MOVri32 i32 0
 5  ( 0  ): JMP BB#1
MachineBasicBlock #1 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([196611]), def: {%vreg0:48}, live_in: {%vreg13:61, %edx:2}, live_out: {%vreg0:48, %edx:2} } }, pred: [Id { idx: 0 }, Id { idx: 2 }], succ: [Id { idx: 2 }, Id { idx: 3 }], iseq: RefCell { value: [Id { idx: 2 }, Id { idx: 3 }, Id { idx: 4 }, Id { idx: 5 }] } })
 6  ( 2  ): %eax:48 = MOVrr32 %ecx:61
 7  ( 3  ): CMPri %eax:48, i32 8400
 8  ( 4  ): JL BB#2
 9  ( 5  ): JMP BB#3
MachineBasicBlock #2 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([2293795]), def: {%vreg15:63, %vreg16:64, %vreg1:49, %vreg13:61, %vreg14:62}, live_in: {%vreg0:48, %edx:2}, live_out: {%vreg13:61, %edx:2} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 1 }], iseq: RefCell { value: [Id { idx: 6 }, Id { idx: 106 }, Id { idx: 7 }, Id { idx: 8 }, Id { idx: 9 }, Id { idx: 107 }, Id { idx: 10 }, Id { idx: 95 }, Id { idx: 11 }] } })
 10 ( 6  ): %rcx:62 = MOVrr32 %eax:48
 11 (106 ): %rcx:62 = SHLr32i8 %rcx:62, i8 2
 12 ( 7  ): %rcx:63 = LEAr64m BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %rcx:62)
 13 ( 8  ): MOVmi32 Base(%rcx:63), i32 2000
 14 ( 9  ): %eax:64 = MOVrr32 %eax:48
 15 (107 ): %eax:64 = ADDri32 %eax:64, i32 1
 16 ( 10 ): %eax:49 = MOVrr32 %eax:64
 17 ( 95 ): %ecx:61 = MOVrr32 %eax:49
 18 ( 11 ): JMP BB#1
MachineBasicBlock #3 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([16974083]), def: {%vreg19:67, %vreg18:66, %vreg17:65}, live_in: {%edx:2}, live_out: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65} } }, pred: [Id { idx: 1 }], succ: [Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 96 }, Id { idx: 98 }, Id { idx: 100 }, Id { idx: 12 }] } })
 19 ( 96 ): %r8d:65 = MOVri32 i32 0
 20 ( 98 ): %ecx:66 = MOVri32 i32 0
 21 (100 ): %eax:67 = MOVri32 i32 8400
 22 ( 12 ): JMP BB#4
MachineBasicBlock #4 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([117638915]), def: {%vreg2:50, %vreg4:52, %vreg3:51}, live_in: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65}, live_out: {%vreg3:51, %vreg2:50, %vreg4:52, %edx:2} } }, pred: [Id { idx: 3 }, Id { idx: 8 }], succ: [Id { idx: 5 }, Id { idx: 9 }], iseq: RefCell { value: [Id { idx: 14 }, Id { idx: 16 }, Id { idx: 18 }, Id { idx: 19 }, Id { idx: 20 }, Id { idx: 21 }] } })
 23 ( 14 ): %r10d:50 = MOVrr32 %r8d:65
 24 ( 16 ): %eax:51 = MOVrr32 %ecx:66
 25 ( 18 ): %r9d:52 = MOVrr32 %eax:67
 26 ( 19 ): CMPri %r9d:52, i32 0
 27 ( 20 ): JG BB#5
 28 ( 21 ): JMP BB#9
MachineBasicBlock #5 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([112658103]), def: {%edi:7, %vreg20:68, %vreg21:69, %vreg5:53, %vreg22:70}, live_in: {%vreg3:51, %vreg2:50, %vreg4:52, %edx:2}, live_out: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70} } }, pred: [Id { idx: 4 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 22 }, Id { idx: 122 }, Id { idx: 124 }, Id { idx: 126 }, Id { idx: 128 }, Id { idx: 130 }, Id { idx: 24 }, Id { idx: 131 }, Id { idx: 129 }, Id { idx: 127 }, Id { idx: 125 }, Id { idx: 123 }, Id { idx: 26 }, Id { idx: 108 }, Id { idx: 27 }, Id { idx: 102 }, Id { idx: 104 }, Id { idx: 28 }] } })
 29 ( 22 ): %edi:7 = MOVrr32 %r9d:52
 30 (122 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(1)>), %edi:7
 31 (124 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(2)>), %eax:51
 32 (126 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(3)>), %r10d:50
 33 (128 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(4)>), %edx:2
 34 (130 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(5)>), %r9d:52
 35 ( 24 ): CALL Address(addr<fn:cilk.println.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
 36 (131 ): %r9d:52 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(5)>)
 37 (129 ): %edx:2 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(4)>)
 38 (127 ): %r10d:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(3)>)
 39 (125 ): %eax:51 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(2)>)
 40 (123 ): %edi:7 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(1)>)
 41 ( 26 ): %eax:68 = MOVrr32 %r9d:52
 42 (108 ): %eax:68 = SUBri32 %eax:68, i32 1
 43 ( 27 ): %eax:53 = MOVrr32 %eax:68
 44 (102 ): %ecx:69 = MOVri32 i32 0
 45 (104 ): %edx:70 = MOVrr32 %eax:53
 46 ( 28 ): JMP BB#6
MachineBasicBlock #6 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([153225506]), def: {%vreg6:54, %vreg7:55}, live_in: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70}, live_out: {%vreg7:55, %vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54} } }, pred: [Id { idx: 5 }, Id { idx: 7 }], succ: [Id { idx: 7 }, Id { idx: 8 }], iseq: RefCell { value: [Id { idx: 30 }, Id { idx: 146 }, Id { idx: 32 }, Id { idx: 33 }, Id { idx: 34 }, Id { idx: 35 }] } })
 47 ( 30 ): %r11d:54 = MOVrr32 %ecx:69
 48 (146 ): %ecx:101 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(8)>)
 49 ( 32 ): %r8d:55 = MOVrr32 %ecx:101
 50 ( 33 ): CMPri %r8d:55, i32 0
 51 ( 34 ): JG BB#7
 52 ( 35 ): JMP BB#8
MachineBasicBlock #7 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([153553191]), def: {%vreg28:76, %vreg34:82, %vreg37:85, %vreg24:72, %vreg27:75, %eax:0, %vreg8:56, %vreg22:70, %vreg21:69, %vreg33:81, %vreg35:83, %vreg30:78, %vreg23:71, %vreg29:77, %vreg25:73, %vreg32:80, %vreg31:79, %vreg36:84, %vreg26:74, %vreg9:57}, live_in: {%vreg7:55, %vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54}, live_out: {%vreg4:52, %vreg21:69, %vreg3:51, %vreg2:50, %edx:2, %vreg22:70} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 6 }], iseq: RefCell { value: [Id { idx: 36 }, Id { idx: 109 }, Id { idx: 37 }, Id { idx: 38 }, Id { idx: 110 }, Id { idx: 39 }, Id { idx: 111 }, Id { idx: 40 }, Id { idx: 41 }, Id { idx: 145 }, Id { idx: 144 }, Id { idx: 149 }, Id { idx: 148 }, Id { idx: 42 }, Id { idx: 43 }, Id { idx: 112 }, Id { idx: 44 }, Id { idx: 113 }, Id { idx: 45 }, Id { idx: 114 }, Id { idx: 46 }, Id { idx: 47 }, Id { idx: 48 }, Id { idx: 49 }, Id { idx: 50 }, Id { idx: 143 }, Id { idx: 142 }, Id { idx: 51 }, Id { idx: 52 }, Id { idx: 53 }, Id { idx: 54 }, Id { idx: 55 }, Id { idx: 56 }, Id { idx: 57 }, Id { idx: 58 }, Id { idx: 115 }, Id { idx: 59 }, Id { idx: 103 }, Id { idx: 105 }, Id { idx: 147 }, Id { idx: 60 }] } })
 53 ( 36 ): %rax:71 = MOVrr32 %r8d:55
 54 (109 ): %rax:71 = SHLr32i8 %rax:71, i8 2
 55 ( 37 ): %eax:72 = LEAr64m BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %rax:71)
 56 ( 38 ): %ecx:73 = MOVrr32 %r11d:54
 57 (110 ): %ecx:73 = IMULrr32 %ecx:73, %r8d:55
 58 ( 39 ): %rax:74 = MOVrr32 %r8d:55
 59 (111 ): %rax:74 = SHLr32i8 %rax:74, i8 2
 60 ( 40 ): %rax:75 = LEAr64m BaseFiAlignOff(%rbp:21, FI<arrty:11, Local(0)>, 1, %rax:74)
 61 ( 41 ): %edx:76 = MOVrm32 Base(%rax:75)
 62 (145 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(7)>), %edx:76
 63 (144 ): %r11d:100 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(7)>)
 64 (149 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(9)>), %r11d:100
 65 (148 ): %r11d:102 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(9)>)
 66 ( 42 ): %eax:77 = IMULrri32 %r11d:102, i32 10000
 67 ( 43 ): %eax:78 = MOVrr32 %ecx:73
 68 (112 ): %eax:78 = ADDrr32 %eax:78, %eax:77
 69 ( 44 ): %eax:79 = MOVrr32 %r8d:55
 70 (113 ): %eax:79 = SHLr32i8 %eax:79, i8 1
 71 ( 45 ): %ecx:80 = MOVrr32 %eax:79
 72 (114 ): %ecx:80 = SUBri32 %ecx:80, i32 1
 73 ( 46 ): %eax:0 = MOVrr32 %eax:78
 74 ( 47 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 75 ( 48 ): %r11d:81 = MOVrr32 %ecx:80
 76 ( 49 ): IDIV %r11d:81 (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 77 ( 50 ): %edx:82 = MOVrr32 %edx:2
 78 (143 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(6)>), %edx:82
 79 (142 ): %edx:99 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(6)>)
 80 ( 51 ): MOVmr32 Base(%eax:72), %edx:99
 81 ( 52 ): %eax:0 = MOVrr32 %eax:78
 82 ( 53 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 83 ( 54 ): %ecx:83 = MOVrr32 %ecx:80
 84 ( 55 ): IDIV %ecx:83 (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 85 ( 56 ): %eax:84 = MOVrr32 %eax:0
 86 ( 57 ): %ecx:56 = MOVrr32 %eax:84
 87 ( 58 ): %eax:85 = MOVrr32 %r8d:55
 88 (115 ): %eax:85 = SUBri32 %eax:85, i32 1
 89 ( 59 ): %eax:57 = MOVrr32 %eax:85
 90 (103 ): %ecx:69 = MOVrr32 %ecx:56
 91 (105 ): %edx:70 = MOVrr32 %eax:57
 92 (147 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(8)>), %edx:70
 93 ( 60 ): JMP BB#6
MachineBasicBlock #8 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([263655351]), def: {%vreg10:58, %vreg49:97, %vreg18:66, %eax:0, %vreg42:90, %vreg45:93, %vreg48:96, %vreg50:98, %vreg17:65, %vreg44:92, %edi:7, %vreg39:87, %vreg41:89, %vreg46:94, %vreg47:95, %vreg43:91, %vreg11:59, %vreg12:60, %vreg38:86, %vreg40:88, %vreg19:67}, live_in: {%vreg4:52, %vreg3:51, %vreg2:50, %edx:2, %vreg6:54}, live_out: {%vreg19:67, %vreg18:66, %edx:2, %vreg17:65} } }, pred: [Id { idx: 6 }], succ: [Id { idx: 4 }], iseq: RefCell { value: [Id { idx: 61 }, Id { idx: 62 }, Id { idx: 63 }, Id { idx: 64 }, Id { idx: 65 }, Id { idx: 66 }, Id { idx: 116 }, Id { idx: 67 }, Id { idx: 132 }, Id { idx: 134 }, Id { idx: 136 }, Id { idx: 138 }, Id { idx: 140 }, Id { idx: 69 }, Id { idx: 141 }, Id { idx: 139 }, Id { idx: 137 }, Id { idx: 135 }, Id { idx: 133 }, Id { idx: 71 }, Id { idx: 72 }, Id { idx: 117 }, Id { idx: 73 }, Id { idx: 118 }, Id { idx: 74 }, Id { idx: 75 }, Id { idx: 76 }, Id { idx: 77 }, Id { idx: 78 }, Id { idx: 79 }, Id { idx: 119 }, Id { idx: 80 }, Id { idx: 81 }, Id { idx: 82 }, Id { idx: 83 }, Id { idx: 84 }, Id { idx: 85 }, Id { idx: 86 }, Id { idx: 87 }, Id { idx: 120 }, Id { idx: 88 }, Id { idx: 89 }, Id { idx: 121 }, Id { idx: 90 }, Id { idx: 97 }, Id { idx: 99 }, Id { idx: 101 }, Id { idx: 91 }] } })
 94 ( 61 ): %eax:0 = MOVrr32 %r11d:54
 95 ( 62 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
 96 ( 63 ): %ecx:86 = MOVri32 i32 10000
 97 ( 64 ): IDIV %ecx:86 (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
 98 ( 65 ): %eax:87 = MOVrr32 %eax:0
 99 ( 66 ): %edi:88 = MOVrr32 %eax:51
100 (116 ): %edi:88 = ADDrr32 %edi:88, %eax:87
101 ( 67 ): %edi:7 = MOVrr32 %edi:88
102 (132 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(1)>), %edi:7
103 (134 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(2)>), %eax:51
104 (136 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(3)>), %r10d:50
105 (138 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(4)>), %r9d:52
106 (140 ): MOVmr32 BaseFi(%rbp:21, FI<i32, Local(5)>), %r11d:54
107 ( 69 ): CALL Address(addr<fn:cilk.println.i32>) (imp-def:%rsp:20,imp-use:%rsp:20,%edi:7,)
108 (141 ): %r11d:54 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(5)>)
109 (139 ): %r9d:52 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(4)>)
110 (137 ): %r10d:50 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(3)>)
111 (135 ): %eax:51 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(2)>)
112 (133 ): %edi:7 = MOVrm32 BaseFi(%rbp:21, FI<i32, Local(1)>)
113 ( 71 ): %rax:89 = MOVrm64 BaseFi(%rbp:21, FI<(ty:8)*, Arg(0)>)
114 ( 72 ): %rdx:90 = MOVrr32 %r10d:50
115 (117 ): %rdx:90 = SHLr32i8 %rdx:90, i8 2
116 ( 73 ): %rcx:91 = MOVrr64 %rax:89
117 (118 ): %rcx:91 = ADDrr64 %rcx:91, %rdx:90
118 ( 74 ): %eax:0 = MOVrr32 %r11d:54
119 ( 75 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
120 ( 76 ): %r8d:92 = MOVri32 i32 10000
121 ( 77 ): IDIV %r8d:92 (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
122 ( 78 ): %edx:93 = MOVrr32 %eax:0
123 ( 79 ): %eax:94 = MOVrr32 %eax:51
124 (119 ): %eax:94 = ADDrr32 %eax:94, %edx:93
125 ( 80 ): MOVmr32 Base(%rcx:91), %eax:94
126 ( 81 ): %eax:0 = MOVrr32 %r11d:54
127 ( 82 ): CDQ  (imp-def:%eax:0,%edx:2,imp-use:%eax:0,)
128 ( 83 ): %ecx:95 = MOVri32 i32 10000
129 ( 84 ): IDIV %ecx:95 (imp-def:%eax:0,%edx:2,imp-use:%eax:0,%edx:2,)
130 ( 85 ): %eax:96 = MOVrr32 %edx:2
131 ( 86 ): %ecx:58 = MOVrr32 %eax:96
132 ( 87 ): %eax:97 = MOVrr32 %r9d:52
133 (120 ): %eax:97 = SUBri32 %eax:97, i32 14
134 ( 88 ): %r9d:59 = MOVrr32 %eax:97
135 ( 89 ): %eax:98 = MOVrr32 %r10d:50
136 (121 ): %eax:98 = ADDri32 %eax:98, i32 1
137 ( 90 ): %eax:60 = MOVrr32 %eax:98
138 ( 97 ): %r8d:65 = MOVrr32 %eax:60
139 ( 99 ): %ecx:66 = MOVrr32 %ecx:58
140 (101 ): %eax:67 = MOVrr32 %r9d:59
141 ( 91 ): JMP BB#4
MachineBasicBlock #9 (MachineBasicBlock { liveness: RefCell { value: LivenessInfo { phys_def: PhysRegSet([65537]), def: {%eax:0}, live_in: {}, live_out: {} } }, pred: [Id { idx: 4 }], succ: [], iseq: RefCell { value: [Id { idx: 92 }, Id { idx: 154 }, Id { idx: 155 }, Id { idx: 93 }] } })
142 ( 92 ): %eax:0 = MOVri32 i32 0
143 (154 ): %rsp:20 = MOVrr64 %rbp:21
144 (155 ): POP64 %rbp:21
145 ( 93 ): RET 

Debug at /home/unsigned/work/cilk/src/codegen/x64/exec/jit.rs
duration: 149.7µs
test pi ... FAILED

failures:

failures:
    pi

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

