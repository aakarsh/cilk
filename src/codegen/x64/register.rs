use super::machine::instr::*;
use crate::ir::types::*;
use std::fmt;
use std::{cell::RefCell, rc::Rc};

#[derive(Copy, Clone, PartialEq, Eq, Hash)]
pub struct PhysReg(pub usize);

#[derive(Copy, Clone, PartialEq, Eq, Hash)]
pub struct VirtReg(pub usize);

#[derive(Debug, Clone)]
pub struct VirtRegGen {
    id: Rc<RefCell<usize>>,
}

#[derive(Debug, Clone, Copy, Hash, PartialEq)]
pub enum RegisterClassKind {
    GR32,
    GR64,
}

// START: x86 dependent code
// TODO: THIS CODE WILL BE AUTO-GENERATED BY MACRO IN THE FUTURE

#[derive(Debug, Clone, Copy, Hash, PartialEq)]
pub enum GR32 {
    EAX,
    EBX,
    ECX,
    EDX,
    ESI,
    EDI,
    EBP,
    ESP,
}

#[derive(Debug, Clone, Copy, Hash, PartialEq)]
pub enum GR64 {
    RAX,
    RBX,
    RCX,
    RDX,
    RDI,
    RSI,
    RBP,
    RSP,
    R8,
    R9,
    R10,
    R11,
    R12,
    R13,
    R14,
    R15,
}

const GR64_PHYS_SPACING: usize = 8;

pub trait X86RegistersTrait {
    fn as_phys_reg(&self) -> PhysReg;
}

impl X86RegistersTrait for GR32 {
    fn as_phys_reg(&self) -> PhysReg {
        let n = match self {
            GR32::EAX => 0,
            GR32::ECX => 1,
            GR32::EDX => 2,
            GR32::EBX => 3,
            GR32::ESP => 4,
            GR32::EBP => 5,
            GR32::ESI => 6,
            GR32::EDI => 7,
        };
        PhysReg(n)
    }
}

impl X86RegistersTrait for GR64 {
    fn as_phys_reg(&self) -> PhysReg {
        let n = match self {
            GR64::RAX => 0,
            GR64::RCX => 1,
            GR64::RDX => 2,
            GR64::RBX => 3,
            GR64::RSP => 4,
            GR64::RBP => 5,
            GR64::RSI => 6,
            GR64::RDI => 7,
            GR64::R8 => 8,
            GR64::R9 => 9,
            GR64::R10 => 10,
            GR64::R11 => 11,
            GR64::R12 => 12,
            GR64::R13 => 13,
            GR64::R14 => 14,
            GR64::R15 => 15,
        };
        PhysReg(n + GR64_PHYS_SPACING)
    }
}

// END: x86 dependent code

impl VirtRegGen {
    pub fn new() -> Self {
        Self {
            id: Rc::new(RefCell::new(0)),
        }
    }

    pub fn gen_vreg(&self, ty: Type) -> RegisterInfo {
        let mut reg = RegisterInfo::new(ty);
        reg.set_vreg(VirtReg(self.next_id()));
        reg
    }

    fn next_id(&self) -> usize {
        let mut id = self.id.borrow_mut();
        *id += 1;
        *id
    }

    pub fn next_vreg(&self) -> VirtReg {
        VirtReg(self.next_id())
    }
}

// register nubmering: https://corsix.github.io/dynasm-doc/instructions.html#registers

pub fn get_general_reg(n: usize) -> Option<PhysReg> {
    match n {
        0 => Some(PhysReg(0)),
        1 => Some(PhysReg(1)),
        2 => Some(PhysReg(2)),
        3 => Some(PhysReg(6)),
        4 => Some(PhysReg(7)),
        5 => Some(PhysReg(8)),
        6 => Some(PhysReg(9)),
        7 => Some(PhysReg(10)),
        8 => Some(PhysReg(11)),
        _ => None,
    }
}

pub fn get_arg_reg(n: usize) -> Option<PhysReg> {
    let regs = [7, 6, 2, 1, 8, 9]; // rdi, rsi, rdx, rcx, r8, r9
    regs.get(n).map(|x| PhysReg(*x))
}

impl PhysReg {
    pub fn get(&self) -> usize {
        self.0
    }
}

impl VirtReg {
    pub fn get(&self) -> usize {
        self.0
    }
}

impl fmt::Debug for PhysReg {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let reg_names = [
            "RAX", "RCX", "RDX", "RBX", "RSP", "RBP", "RSI", "RDI", "R8", "R9", "R10", "R11",
            "R12", "R13", "R14", "R15",
        ];
        write!(f, "%{}", reg_names[self.0])
        // write!(f, "%R{}", self.0)
    }
}

impl fmt::Debug for VirtReg {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "%vreg{}", self.0)
    }
}
