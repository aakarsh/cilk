use super::machine::instr::*;
use crate::ir::types::*;
use std::fmt;
use std::{cell::RefCell, rc::Rc};

#[derive(Copy, Clone, PartialEq, Eq, Hash)]
pub struct PhysReg(pub usize);

#[derive(Copy, Clone, PartialEq, Eq, Hash)]
pub struct VirtReg(pub usize);

#[derive(Debug, Clone)]
pub struct VirtRegGen {
    id: Rc<RefCell<usize>>,
}

// START: x64 dependent code
// TODO: THIS CODE WILL BE AUTO-GENERATED BY MACRO IN THE FUTURE

const GR32_NUM: isize = 16;
// const GR64_NUM: usize = 16;

// Remember to fix PhysReg::reg_class() when appending a variant
#[derive(Debug, Clone, Copy, Hash, PartialEq)]
pub enum RegisterClassKind {
    GR32 = 0,
    GR64 = GR32_NUM,
    // NEXT = GR64_NUM, TODO
}

// TODO: TEMPORARY FUNCTIONS. WILL BE REMOVED.
pub fn ty2rc(ty: &Type) -> Option<RegisterClassKind> {
    match ty {
        Type::Void => None,
        Type::Int32 => Some(RegisterClassKind::GR32),
        Type::Int64 => Some(RegisterClassKind::GR64),
        Type::Pointer(_) => Some(RegisterClassKind::GR64),
        Type::Array(_) => Some(RegisterClassKind::GR64),
        e => unimplemented!("{:?}", e),
    }
}
pub fn rc2ty(rc: RegisterClassKind) -> Type {
    match rc {
        RegisterClassKind::GR32 => Type::Int32,
        RegisterClassKind::GR64 => Type::Int64,
    }
}

impl PhysReg {
    pub fn reg_class(&self) -> RegisterClassKind {
        // TODO: FOLLOWING CODE IS SLOW
        // const RC: [RegisterClassKind; 2] = [RegisterClassKind::GR32, RegisterClassKind::GR64];
        // let p = self.retrieve();
        // for i in 0..RC.len() - 1 {
        //     if RC[i] as usize <= p && p < RC[i + 1] as usize {
        //         return RC[i];
        //     }
        // }
        // *RC.last().unwrap()

        let n = self.retrieve();
        if RegisterClassKind::GR32 as usize <= n && n < RegisterClassKind::GR64 as usize {
            return RegisterClassKind::GR32;
        }
        RegisterClassKind::GR64
    }
}

macro_rules! to_phys {
    ($($r:path),*) => {
        vec![$($r),*].iter().map(|r| r.as_phys_reg()).collect()
    };
}

impl RegisterClassKind {
    pub fn get_reg_order(&self) -> RegisterOrder {
        RegisterOrder::general_purpose(*self)
    }

    pub fn get_arg_reg_order(&self) -> RegisterOrder {
        RegisterOrder::arguments(*self)
    }

    pub fn get_nth_arg_reg(&self, nth: usize) -> Option<PhysReg> {
        self.get_arg_reg_order_vec().get(nth).map(|r| *r)
    }

    pub fn size_in_bits(&self) -> usize {
        match self {
            Self::GR32 => 32,
            Self::GR64 => 64,
        }
    }

    pub fn size_in_byte(&self) -> usize {
        self.size_in_bits() / 8
    }

    // TODO: proper name?
    pub fn shares_same_register_file(&self, rc: RegisterClassKind) -> bool {
        match self {
            Self::GR32 => matches!(rc, Self::GR32 | Self::GR64),
            Self::GR64 => matches!(rc, Self::GR32 | Self::GR64),
        }
    }

    // Returns normal order of registers used to pass arguments
    // TODO: This is System V AMD64 ABI.
    // https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI
    pub fn get_arg_reg_order_vec(&self) -> Vec<PhysReg> {
        match self {
            RegisterClassKind::GR32 => to_phys!(
                GR32::EDI,
                GR32::ESI,
                GR32::EDX,
                GR32::ECX,
                GR32::R8D,
                GR32::R9D
            ),
            RegisterClassKind::GR64 => to_phys!(
                GR64::RDI,
                GR64::RSI,
                GR64::RDX,
                GR64::RCX,
                GR64::R8,
                GR64::R9
            ),
        }
    }

    // Returns normal order of general-purpose registers
    pub fn get_gp_reg_order_vec(&self) -> Vec<PhysReg> {
        match self {
            RegisterClassKind::GR32 => to_phys!(
                GR32::EAX,
                GR32::ECX,
                GR32::EDX,
                GR32::ESI,
                GR32::EDI,
                GR32::R8D,
                GR32::R9D,
                GR32::R10D,
                GR32::R11D
                // TODO: following 4 regs need to be saved if changed
                // GR32::R12D,
                // GR32::R13D,
                // GR32::R14D,
                // GR32::R15D,
            ),
            RegisterClassKind::GR64 => to_phys!(
                GR64::RAX,
                GR64::RCX,
                GR64::RDX,
                GR64::RSI,
                GR64::RDI,
                GR64::R8,
                GR64::R9,
                GR64::R10,
                GR64::R11
                // TODO: following 4 regs need to be saved if changed
                // GR64::R12,
                // GR64::R13,
                // GR64::R14,
                // GR64::R15,
            ),
        }
    }
}

#[derive(Debug, Clone, Copy, Hash, PartialEq)]
pub enum GR32 {
    EAX,
    EBX,
    ECX,
    EDX,
    ESI,
    EDI,
    EBP,
    ESP,
    R8D,
    R9D,
    R10D,
    R11D,
    R12D,
    R13D,
    R14D,
    R15D,
}

#[derive(Debug, Clone, Copy, Hash, PartialEq)]
pub enum GR64 {
    RAX,
    RBX,
    RCX,
    RDX,
    RDI,
    RSI,
    RBP,
    RSP,
    R8,
    R9,
    R10,
    R11,
    R12,
    R13,
    R14,
    R15,
}

pub trait X64RegisterTrait {
    fn as_phys_reg(&self) -> PhysReg;
}

impl X64RegisterTrait for PhysReg {
    fn as_phys_reg(&self) -> PhysReg {
        *self
    }
}

// register nubmering: https://corsix.github.io/dynasm-doc/instructions.html#registers

impl X64RegisterTrait for GR32 {
    fn as_phys_reg(&self) -> PhysReg {
        let n = match self {
            GR32::EAX => 0,
            GR32::ECX => 1,
            GR32::EDX => 2,
            GR32::EBX => 3,
            GR32::ESP => 4,
            GR32::EBP => 5,
            GR32::ESI => 6,
            GR32::EDI => 7,
            GR32::R8D => 8,
            GR32::R9D => 9,
            GR32::R10D => 10,
            GR32::R11D => 11,
            GR32::R12D => 12,
            GR32::R13D => 13,
            GR32::R14D => 14,
            GR32::R15D => 15,
        };
        PhysReg(n + RegisterClassKind::GR32 as usize)
    }
}

impl X64RegisterTrait for GR64 {
    fn as_phys_reg(&self) -> PhysReg {
        let n = match self {
            GR64::RAX => 0,
            GR64::RCX => 1,
            GR64::RDX => 2,
            GR64::RBX => 3,
            GR64::RSP => 4,
            GR64::RBP => 5,
            GR64::RSI => 6,
            GR64::RDI => 7,
            GR64::R8 => 8,
            GR64::R9 => 9,
            GR64::R10 => 10,
            GR64::R11 => 11,
            GR64::R12 => 12,
            GR64::R13 => 13,
            GR64::R14 => 14,
            GR64::R15 => 15,
        };
        PhysReg(n + RegisterClassKind::GR64 as usize)
    }
}

// END: x64 dependent code

#[derive(Debug, Clone)]
pub struct RegisterOrder {
    order: Vec<PhysReg>,
    nth: usize,
    reg_class: RegisterClassKind,
}

impl RegisterOrder {
    pub fn general_purpose(reg_class: RegisterClassKind) -> Self {
        Self {
            reg_class,
            order: reg_class.get_gp_reg_order_vec(),
            nth: 0,
        }
    }

    pub fn arguments(reg_class: RegisterClassKind) -> Self {
        Self {
            reg_class,
            order: reg_class.get_arg_reg_order_vec(),
            nth: 0,
        }
    }
}

impl Iterator for RegisterOrder {
    type Item = PhysReg;

    fn next(&mut self) -> Option<Self::Item> {
        self.nth += 1;
        self.order.get(self.nth - 1).and_then(|item| Some(*item))
    }
}

impl VirtRegGen {
    pub fn new() -> Self {
        Self {
            id: Rc::new(RefCell::new(0)),
        }
    }

    pub fn gen_vreg(&self, rc: RegisterClassKind) -> RegisterInfo {
        let mut reg = RegisterInfo::new(rc);
        reg.set_vreg(VirtReg(self.next_id()));
        reg
    }

    fn next_id(&self) -> usize {
        let mut id = self.id.borrow_mut();
        *id += 1;
        *id
    }

    pub fn next_vreg(&self) -> VirtReg {
        VirtReg(self.next_id())
    }
}

impl PhysReg {
    pub fn retrieve(&self) -> usize {
        self.0
    }
}

impl VirtReg {
    pub fn retrieve(&self) -> usize {
        self.0
    }
}

impl fmt::Debug for PhysReg {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let reg_names = [
            "EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI", "R8D", "R9D", "R10D", "R11D",
            "R12D", "R13D", "R14D", "R15D", "RAX", "RCX", "RDX", "RBX", "RSP", "RBP", "RSI", "RDI",
            "R8", "R9", "R10", "R11", "R12", "R13", "R14", "R15",
        ];
        write!(f, "%{}", reg_names[self.retrieve()])
    }
}

impl fmt::Debug for VirtReg {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "%vreg{}", self.retrieve())
    }
}
